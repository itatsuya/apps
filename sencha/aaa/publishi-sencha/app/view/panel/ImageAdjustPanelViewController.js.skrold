/*
 * File: app/view/panel/ImageAdjustPanelViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.ImageAdjustPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panel.imageadjustpanel',

    setCanvasAttributes: function(canvas) {
        // Set fabric custom attributes here.
        canvas.preserveObjectStacking = true; // Ensures that objects remain in current stack position when selected
        canvas.controlsAboveOverlay = true;	// Ensures that the object selection handles draw outside margins as well

        // Set the background color for image letter boxing.
        canvas.backgroundColor = '#7F7F7F';

        // Customize object controls.
        var isDeviceTabOrPhone = (Ext.os.deviceType == 'Tablet' || Ext.os.deviceType == 'Phone');
        fabric.Object.prototype.set({
            borderColor: '#3399FF',
            cornerColor: '#3399FF',
            cornerStyle: 'circle',
            cornerSize: isDeviceTabOrPhone ? 11 : 8,
            cornerHitTolerance: Ext.supports.TouchEvents ? 3 : 1,
            transparentCorners: false
        });
    },

    setImageAdjustData: function(imageData) {
        // Set the data into the view model.
        this.getViewModel().setData(imageData);

        var view = this.getView();
        var thresholdSlider = view.down('#thresholdSlider'),
            chkInverse = view.down('#chkInverse');

        var parentController = imageData.parentView.getController();
        this.disableRevertChanges = parentController.disableRevertChanges.bind(parentController);
        this.disableRevertChanges(true);

        var isProductDesigner = RolandKioskPrint.AppData.isProductDesigner();

        // Load the image.
        var promise = this.loadImage(imageData);
        var me = this;
        me.filterIndex = {};
        me.cropRect = null;

        promise.then(function() {
            var canvas = me.canvas;
            var imageObject = me.imageObject;

            // Suspend event handling.
            me.suppressEvents = true;

            imageObject.blackWhiteFilter = new fabric.Image.filters.BlackWhite({
                threshold: imageData.threshold
            });
            imageObject.filters.push(imageObject.blackWhiteFilter);
            thresholdSlider.setValue(imageData.threshold);

            imageObject.invertFilter = new fabric.Image.filters.Invert({
                invert: imageData.invert
            });

            imageObject.filters.push(imageObject.invertFilter);
            chkInverse.setValue(imageData.invert);

            // Resume event handling.
            me.suppressEvents = false;

            imageObject.applyFilters();

            // Make the filtered image visible.
            imageObject.set('visible', true);

            canvas.renderAll();

            // Enable the editing controls.
            thresholdSlider.setDisabled(false);
            chkInverse.setDisabled(false);
        });
    },

    getImageAdjustData: function() {
        var thresholdSlider = this.getView().down('#thresholdSlider');
        var chkInverse = this.getView().down('#chkInverse');

        return {
            threshold: thresholdSlider.getValue(),
            invert: chkInverse.getValue(),
            imgPath: this.getViewModel().get('parentFilePath')
        };
    },

    applyFilter: function(filterData) {
        var canvas = this.canvas;
        var imageObject = this.imageObject;

        if (filterData.threshold !== undefined) {
            imageObject.blackWhiteFilter.threshold = filterData.threshold;
        }

        if (filterData.invert !== undefined) {
            imageObject.invertFilter.invert = filterData.invert;
        }

        imageObject.applyFilters();
        canvas.renderAll();
    },

    revertChanges: function() {
        var imageData = this.getViewModel().getData();

        // Restore initial values.
        this.updateControls({
            threshold: imageData.threshold,
            invert: imageData.invert
        });
        this.disableRevertChanges(true);
    },

    updateControls: function(imageData) {
        this.applyFilter(imageData);
        var view = this.getView(),
            thresholdSlider = view.down('#thresholdSlider'),
            chkInverse = view.down('#chkInverse');

        this.suppressEvents = true;

        chkInverse.setValue(imageData.invert);
        thresholdSlider.setValue(imageData.threshold);

        this.suppressEvents = false;
    },

    loadImage: function(imageData) {
        var deferred = new Ext.Deferred(),
            filePath = imageData.parentFilePath;

        // Add the image object to canvas, marking it non-selectable.
        var me = this;
        filePath = RolandKioskPrint.AppData.getURLWithNonce(filePath);
        fabric.Image.fromURL(filePath, function(img) {
            var canvas = me.canvas;

            var rx = canvas.width / img.width;
            var ry = canvas.height / img.height;

            this.rr = (rx < ry) ? rx : ry;

            var imageWidth = Math.ceil(rr * img.width);
            var imageHeight = Math.ceil(rr * img.height);
            var imageX = (canvas.width - imageWidth) / 2;
            var imageY = (canvas.height - imageHeight) / 2;

            canvas.setViewportTransform([rr, 0, 0, rr, imageX, imageY]);

            // The image object is hidden at first. Gets shown once the filters are applied.
            img.set({
                left: 0,
                top: 0,
                selectable: false,
                evented: false,
                visible: false
            });

            canvas.add(img);
            me.imageObject = img;

            // Add the crop rect.
            if (imageData.left !== 0 ||
                imageData.top !== 0 ||
                imageData.width != 100 ||
                imageData.height != 100) {

                var cropLeft = Math.round(img.width * imageData.left / 100),
                    cropTop = Math.round(img.height * imageData.top / 100),
                    cropWidth = Math.round(img.width * imageData.width / 100),
                    cropHeight = Math.round(img.height * imageData.height / 100);

                var cropRect = new fabric.Rect({
                    id: 'crop',
                    left: cropLeft,
                    top: cropTop,
                    width: cropWidth,
                    height: cropHeight,
                    strokeDashArray: [5, 5],
                    fill: '',
                    stroke: RolandKioskPrint.app.constants.CROP_RECT_STROKE_COLOR,
                    strokeWidth: RolandKioskPrint.app.constants.CROP_RECT_STROKE_WIDTH,
                    selectable: false,
                    evented: false
                });
                canvas.add(cropRect);
            }

            deferred.resolve();
        });

        return deferred.promise;
    },

    onChkInverseChange: function(field, newValue, oldValue, eOpts) {
        if (this.suppressEvents) {
            return;
        }
        this.applyFilter({
            invert: newValue
        });
        this.disableRevertChanges(false);
    },

    onCanvasPanelAfterRender: function(component, eOpts) {
        // Get hold of the html canvas element.
        var canvasContainer = this.getView().down('#canvasContainer');
        var containerElement = canvasContainer.getEl().dom;
        var canvasElement = containerElement.getElementsByTagName('canvas')[0];

        // Create the fabric.js canvas object.
        var canvas = new fabric.Canvas(canvasElement);
        this.setCanvasAttributes(canvas);

        // Set the canvas to same size as the container, leaving room for the border.
        canvas.setDimensions({
            width: canvasContainer.getWidth() - 2,
            height: canvasContainer.getHeight() - 2
        });

        canvas.calcOffset();

        // Stash the fabric canvas off the controller.
        this.canvas = canvas;
    },

    onThresholdSliderChange: function(slider, newValue, thumb, type, eOpts) {
        if (this.suppressEvents) {
            return;
        }

        this.applyFilter({
            threshold: newValue
        });
    },

    onThresholdSliderChangeComplete: function(slider, newValue, thumb, eOpts) {
        this.disableRevertChanges(false);
    }

});
