/*
 * File: app/view/panel/ColorPanelViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.ColorPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panel.colorpanel',

    listen: {
        controller: {
            'panel.undoredopanel': {
                undoRedoChanged: 'onUndoRedoChange'
            },
            designer: {
                designerClosed: 'onDesignerClosed'
            }
        }
    },

    getSelectedColorableObjects: function() {
        var canvas = RolandKioskPrint.AppData.getCanvas()

        var selectedObjects = []


        var me = this

        canvas.getActiveObjects().forEach(function(o) {
            me.getObjectsInner(o, selectedObjects, me.isColorableObject)

        })


        return selectedObjects

    },

    getSelectedSpecialColorableObjects: function() {
        var canvas = RolandKioskPrint.AppData.getCanvas()

        var selectedObjects = []


        var me = this

        canvas.getActiveObjects().forEach(function(o) {
            me.getObjectsInner(o, selectedObjects, me.isSpecialColorableObject)

        })


        return selectedObjects

    },

    getAllSpecialColorableObjects: function() {
        var canvas = RolandKioskPrint.AppData.getCanvas()

        var objects = []


        var me = this

        var isProductModelDesigner = RolandKioskPrint.AppData.isProductModelDesigner()


        canvas.getObjects().forEach(function(o) {
            if (o.id != 'margin' && o.id != 'mask' &&
                (isProductModelDesigner || o.sourceType == RolandKioskPrint.app.constants.OBJECT_SOURCE_PD)) {
                me.getObjectsInner(o, objects, me.isSpecialColorableObject)

            }
        })

        return objects

    },

    getObjectsInner: function(objectOrGroup, objects, callback) {
        var objectType = objectOrGroup.get('type')


        if (objectType == 'group' &&
            (!objectOrGroup.isPathGroup || objectOrGroup.sourceType == RolandKioskPrint.app.constants.OBJECT_SOURCE_SVG)) {
            var me = this

            objectOrGroup.forEachObject(function(o) {
                me.getObjectsInner(o, objects, callback)

            })

        } else if (objectType == 'clippingGroup') {
            var element = objectOrGroup.getElement()

            if (callback(element)) {
                objects.push(element)

            }
        } else if (callback(objectOrGroup)) {
            objects.push(objectOrGroup)

        }
    },

    isColorableObject: function(object) {
        return !object.isCutPath && !object.editAreaType && object.get('id') != 'background' &&
                    object.get('type') != 'image' && object.get('type') != 'clippingGroup'

    },

    isSpecialColorableObject: function(object) {
        return !object.isCutPath && !object.editAreaType && object.get('id') != 'background'

    },

    applyColorAttribute: function(attrName, attrValue, objects) {
        if (!objects) {
            objects = this.getSelectedColorableObjects()

        }

        for (var i = 0, length = objects.length
 i < length; i++) {
            var obj = objects[i]

            obj.set(attrName, attrValue)


            if (obj.editAreaId) {
                obj[attrName + 'Orig'] = attrValue

            }
        }
    },

    getColorAttribute: function(attrName, objects) {
        // Get the attribute value.
        // For empty selection, returns "empty".
        // If the selection has a single value for this attribute, returns
        // that value. Otherwise returns "mixed".
        var attrValue = 'empty'


        if (!objects) {
            objects = this.getSelectedColorableObjects()

        }

        if (objects.length > 0) {
            attrValue = objects[0].get(attrName)

        }

        for (var i = 1
 i < objects.length; i++) {
            if (objects[i].get(attrName) != attrValue) {
                attrValue = 'mixed'

                break

            }
        }
        return attrValue

    },

    updatePanel: function() {
        var tabPanel = this.getView().down('#tabPanel')

        var idx = tabPanel.items.indexOf(tabPanel.getActiveTab())


        if (idx === 0) {
            this.updateColorTab()

        } else {
            this.updateSpotColorTab()

        }
    },

    getColorData: function() {
        return this.getViewModel().getData()

    },

    setColorData: function(colorData) {
        this.getViewModel().setData(colorData)


        // Register for custom canvas ready and finish notifications, if
        // we haven't already. We do not un-register these.
        if (!this.onCanvasStateChange) {
            var canvas = RolandKioskPrint.AppData.getCanvas()

            var me = this


            this.onCanvasStateChange = {
                'canvas:x-ready': function() {
                    me.onCanvasReady()

                },
                'canvas:x-finish': function() {
                    me.onCanvasFinish()

                }
            }

            canvas.on(this.onCanvasStateChange)

        }
    },

    onObjectAdded: function(object) {
        var canvas = RolandKioskPrint.AppData.getCanvas()

        if (canvas.loadingUndoRedoState) {
            // If inside undo state loading, skip applying varnish settings.
            return

        }

        var varnishSettings = this.getViewModel().get('varnishSettings')

        if (!varnishSettings.applyToAll) {
            // Apply all is false.
            return

        }

        // Check if varnish can be applied.
        if (object.get('type') == 'group' && !object.isPathGroup) {
            return

        }
        if (this.isSpecialColorableObject(object)) {
            this.applySpotColorAttribute('varnish', varnishSettings.varnishStatus, [object])

            this.applySpotColorAttribute('textureType', varnishSettings.textureType, [object])

        }
    },

    applySpotColorAttribute: function(attrName, attrValue, objects) {
        if (!objects) {
            objects = this.getSelectedSpecialColorableObjects()

        }

        for (var i = 0, length = objects.length
 i < length; i++) {
            if (attrName == 'primer' || attrName == 'white' || attrName == 'varnish') {
                var specialColor = objects[i].get('specialColor') || '000'

                specialColor = specialColor.split('')

                if (attrName == 'primer') {
                    specialColor[0] = attrValue ? '1' : '0'

                } else if (attrName == 'white') {
                    specialColor[1] = attrValue ? '1' : '0'

                } else if (attrName == 'varnish') {
                    specialColor[2] = attrValue ? '1' : '0'

                }
                objects[i].set('specialColor', specialColor.join(''))

            } else {
                objects[i].set(attrName, attrValue)

            }
        }
    },

    getSpotColorAttribute: function(attrName, objects) {
        // Get the attribute value.
        // For empty selection, returns "empty".
        // If the selection has a single value for this attribute, returns
        // that value. Otherwise returns "mixed".
        var attrValue = 'empty'


        if (!objects) {
            objects = this.getSelectedSpecialColorableObjects()

        }

        if (objects.length > 0) {
            if (attrName == 'primer' || attrName == 'white' || attrName == 'varnish') {
                var specialColor = objects[0].get('specialColor') || '000'

                specialColor = specialColor.split('')


                if (attrName == 'primer') {
                    attrValue = (specialColor[0] == '1')

                } else if (attrName == 'white') {
                    attrValue = (specialColor[1] == '1')

                } else if (attrName == 'varnish') {
                    attrValue = (specialColor[2] == '1')

                }
            } else {
                attrValue = objects[0].get(attrName)

            }
        }

        for (var i = 1
 i < objects.length; i++) {
            if (attrName == 'primer' || attrName == 'white' || attrName == 'varnish') {
                var specialColor = objects[i].get('specialColor') || '000'

                specialColor = specialColor.split('')


                if (attrName == 'primer') {
                    specialColor = (specialColor[0] == '1')

                } else if (attrName == 'white') {
                    specialColor = (specialColor[1] == '1')

                } else if (attrName == 'varnish') {
                    specialColor = (specialColor[2] == '1')

                }

                if (specialColor != attrValue) {
                    attrValue = 'mixed'

                    break

                }
            } else {
                if (objects[i].get(attrName) != attrValue) {
                    attrValue = 'mixed'

                    break

                }
            }
        }

        return attrValue

    },

    onCanvasReady: function() {
        var me = this

        var canvas = RolandKioskPrint.AppData.getCanvas()

        if (!this.onObjectChange) {
            this.onObjectChange = {
                'object:added': function(e) {
                    me.onObjectAdded(e.target)

                }
            }

        }
        canvas.on(this.onObjectChange)

    },

    onCanvasFinish: function() {
        // Unregister for object change notifications.
        if (this.onObjectChange) {
            var canvas = RolandKioskPrint.AppData.getCanvas()

            canvas.off(this.onObjectChange)

        }
    },

    setPanelTabs: function() {
        var view = this.getView()

        var colorConfig = view.down('#colorConfig'),
            varnishConfig = view.down('#varnishConfig')


        var colorData = this.getViewModel().getData()

        var showVarnishTab = (colorData.varnishMaster.varnish == 'on')


        if (showVarnishTab) {
            // For product designer, additionally check if per-object varnish can be applied.
            if (RolandKioskPrint.AppData.isProductDesigner() && colorData.templateApplyToAll) {
                showVarnishTab = false

            }
        }

        if (showVarnishTab) {
            // Show/hide the data views.
            var varnishType

            if (colorData.varnishMaster.varnishType == RolandKioskPrint.app.constants.MATTE_VARNISH) {
                varnishType = RolandKioskPrint.app.getString('label.designer.varnishTypeMatte')

                view.down('#matteView').show()

                view.down('#glossView').hide()

            } else {
                varnishType = RolandKioskPrint.app.getString('label.designer.varnishTypeGloss')

                view.down('#matteView').hide()

                view.down('#glossView').show()

            }

            // Set the varnish type text.
            view.down('#lblVarnishType').setText(varnishType)


            colorConfig.show()

            view.down('#pnlColor').show()

            varnishConfig.show()

            view.down('#pnlVarnish').show()


            var tabPanel = this.getView().down('#tabPanel')

            tabPanel.setActiveTab(this.canApplyColor() ? 0 : 1)

        } else {
           colorConfig.hide()

           view.down('#pnlColor').show()

           varnishConfig.hide()

           view.down('#pnlVarnish').hide()

        }
    },

    isFillActive: function() {
        var btnFillColor = this.getView().down('#btnFillColor')

        return btnFillColor.pressed

    },

    formatColorValue: function(value) {
        if (value.length == 4) {
            // Convert to 6 hex digits - '#3FA' becomes '#33FFAA'
            return '#' + value[1] + value[1] + value[2] + value[2] + value[3] + value[3]

        }
        return value

    },

    canApplyColor: function() {
        // Check if we can apply color with the current object selection state.
        if (this.isSelectionLocked()) {
            return false

        }

        var objects = this.getSelectedColorableObjects(),
            canApply = (objects.length > 0)


        if (!canApply) {
            // Check if we can apply non print color.
            objects = this.getSelectedSpecialColorableObjects()

            canApply = (objects.length > 0)

        }

        return canApply

    },

    canApplyVarnish: function() {
        var colorData = this.getViewModel().getData()

        if (!colorData.varnishMaster) {
            return false

        }

        var canApply = (colorData.varnishMaster.varnish == 'on')


        if (canApply) {
            // For product designer, additionally check if per-object varnish can be applied.
            if (RolandKioskPrint.AppData.isProductDesigner() && colorData.templateApplyToAll) {
                canApply = false

            }
        }

        return canApply

    },

    updateColorTab: function() {
        // Update color view.
        var objects = this.getSelectedColorableObjects()

        var attrName = this.isFillActive() ? 'fill' : 'stroke'

        var attrValue = this.getColorAttribute(attrName, objects)


        var colorView = this.getView().down('#colorView')

        colorView.getSelectionModel().deselectAll()


        if ((typeof(attrValue) == 'string' && attrValue[0] == '#') || attrValue === '') {
            var colorValue

            if (attrValue === '') {
                colorValue = 'None'

            } else {
                colorValue = this.formatColorValue(attrValue)
 // Format fabric color value to the store format
                if (colorValue == '#FFFFFF') {
                    colorValue = 'RDG_WHITE'

                }
            }

            // Find the corresponding record in store, and select.
            var store = colorView.getStore()

            var color = store.findRecord('colorValue', colorValue)


            if (color) {
                colorView.select(color, false, true)

            }
        }

        var selectionLocked = this.isSelectionLocked()

        colorView.setDisabled(attrValue == 'empty' || selectionLocked)


        var btnFillColor = this.getView().down('#btnFillColor')

        btnFillColor.setDisabled(colorView.isDisabled())


        var btnOutlineColor = this.getView().down('#btnOutlineColor')

        btnOutlineColor.setDisabled(colorView.isDisabled())


        // Update not print button.
        var btnNotPrintColor = this.getView().down('#btnNotPrintColor')

        objects = this.getSelectedSpecialColorableObjects()


        var noColor = this.getSpotColorAttribute('noColor', objects)

        btnNotPrintColor.toggle(noColor === true)

        btnNotPrintColor.setDisabled(noColor == 'empty' || selectionLocked)

    },

    updateSpotColorTab: function() {
        var varnish,
            textureType


        var colorData = this.getViewModel().getData()


        // Update the apply all checkbox state.
        this.suppressEvents = true

        var chkApplyToAll = this.getView().down('#chkApplyToAll')

        chkApplyToAll.setValue(colorData.varnishSettings.applyToAll)

        this.suppressEvents = false


        var selectionLocked = false

        if (colorData.varnishSettings.applyToAll) {
            varnish = colorData.varnishSettings.varnishStatus

            textureType = colorData.varnishSettings.textureType

        } else {
            var objects = this.getSelectedSpecialColorableObjects()

            varnish = this.getSpotColorAttribute('varnish', objects)

            textureType = this.getSpotColorAttribute('textureType', objects)

            selectionLocked = this.isSelectionLocked()

        }

        if (colorData.varnishMaster.varnishType == RolandKioskPrint.app.constants.MATTE_VARNISH) {
            var matteView = this.getView().down('#matteView')

            matteView.getSelectionModel().deselectAll()


            if (varnish != 'empty' && varnish != 'mixed') {
                var matteType

                if (varnish) {
                    if (textureType === '') {
                        matteType = 'Plain'

                    } else if (textureType != 'empty' && textureType != 'mixed') {
                        matteType = textureType

                    }
                } else {
                    matteType = 'None'

                }

                var matteTypesStore = matteView.getStore()

                var rec = matteTypesStore.findRecord('name', matteType)

                matteView.select(rec, false, true)

            }

            matteView.setDisabled(varnish == 'empty' || selectionLocked)

        } else {
            var glossView = this.getView().down('#glossView')

            glossView.getSelectionModel().deselectAll()


            if (varnish != 'empty' && varnish != 'mixed') {
                var glossType = varnish ? 'Plain' : 'None'

                var glossTypesStore = glossView.getStore()

                var rec = glossTypesStore.findRecord('name', glossType)

                glossView.select(rec, false, true)

            }

            glossView.setDisabled(varnish == 'empty' || selectionLocked)

        }
    },

    applyVarnishItem: function(item, glossOrMatte) {
        var varnish,
            textureType


        if (item.name == 'None') {
            varnish = false

            textureType = ''

        } else if (item.name == 'Plain') {
            varnish = true

            textureType = ''

        } else {
            varnish = true

            textureType = item.name

        }

        // See if we are changing the 'apply all' setting, or applying per-object.
        var chkApplyToAll = this.getView().down('#chkApplyToAll')


        var objects

        if (chkApplyToAll.checked) {
            // Applying to all.
            var varnishSettings = {
                'varnishStatus': varnish,
                'textureType': textureType,
                'applyToAll': true
            }


            this.getViewModel().setData({
                'varnishSettings': varnishSettings
            })


            objects = this.getAllSpecialColorableObjects()

        } else {
            objects = this.getSelectedSpecialColorableObjects()

        }

        this.applySpotColorAttribute('varnish', varnish, objects)

        this.applySpotColorAttribute('textureType', textureType, objects)


        var canvas = RolandKioskPrint.AppData.getCanvas()

        canvas.renderAll()


        if (objects.length !== 0) {
            canvas.fire('object:modified')

        }
    },

    onUndoRedoChange: function() {
        this.updateSpotColorTab()

    },

    isSelectionLocked: function() {
        var canvas = RolandKioskPrint.AppData.getCanvas()

        var activeObject = canvas.getActiveObject()


        return (activeObject && activeObject.isLocked) ? true : false

    },

    onDesignerClosed: function() {
        RolandKioskPrint.app.setNotPrintColorFirstUseShown(false, true)

    },

    onFillColorButonClick: function(button, e, eOpts) {
        this.updatePanel()

    },

    onOutlineColorButtonClick: function(button, e, eOpts) {
        this.updatePanel()

    },

    onColorViewItemClick: function(dataview, record, item, index, e, eOpts) {
        var attrName = this.isFillActive() ? 'fill' : 'stroke'

        var colorValue = record.data.colorValue


        if (colorValue == 'None') {
            this.applyColorAttribute(attrName, '')

        } else if (colorValue == 'RDG_WHITE') {
            this.applyColorAttribute(attrName, '#FFFFFF')

        } else {
            this.applyColorAttribute(attrName, colorValue)

        }

        if (attrName == 'stroke') {
            // Apply stroke width, so that the stroke shows up.
            this.applyColorAttribute('strokeWidth', RolandKioskPrint.app.constants.DEFAULT_STROKE_WIDTH)

        }

        var canvas = RolandKioskPrint.AppData.getCanvas()

        canvas.renderAll()


        var activeObject = canvas.getActiveObject()

        if (activeObject) {
            canvas.fire('object:modified', {target: activeObject})

        }
    },

    onColorViewContainerClick: function(dataview, e, eOpts) {
        return false
 // Prevent deselection when clicking outside items
    },

    onNotPrintColorButtonClick: function(button, e, eOpts) {
        var notPrintColorFirstUseShown = RolandKioskPrint.app.getNotPrintColorFirstUseShown()

        var widget

        if (!notPrintColorFirstUseShown) {
            if (RolandKioskPrint.AppData.isProductModelDesigner()) {
                widget = Ext.widget('productmodeldesignernotprintcolorfirstuse')

            } else {
                widget = Ext.widget({
                    xtype: 'productdesignernotprintcolorfirstuse',
                    clientView: true
                })

            }

            RolandKioskPrint.app.showModalView(widget)

            RolandKioskPrint.app.setNotPrintColorFirstUseShown(true)

        }

        this.applySpotColorAttribute('noColor', button.pressed)

        var canvas = RolandKioskPrint.AppData.getCanvas()

        canvas.renderAll()


        var activeObject = canvas.getActiveObject()

        if (activeObject) {
            canvas.fire('object:modified', {target: activeObject})

        }
    },

    onGlossViewContainerClick: function(dataview, e, eOpts) {
        return false
 // Prevent deselection when clicking outside items
    },

    onGlossViewItemClick: function(dataview, record, item, index, e, eOpts) {
        this.applyVarnishItem(record.data, true)

    },

    onMatteViewContainerClick: function(dataview, e, eOpts) {
        return false
 // Prevent deselection when clicking outside items
    },

    onMatteViewItemClick: function(dataview, record, item, index, e, eOpts) {
        this.applyVarnishItem(record.data, false)

    },

    onApplyToAllChange: function(field, newValue, oldValue, eOpts) {
        if (this.suppressEvents) {
            return

        }

        var varnishSettings = {}

        var canvas = RolandKioskPrint.AppData.getCanvas()

        if (newValue) {
            // Get the selected varnish item.
            var glossView = this.getView().down('#glossView')

            var matteView = this.getView().down('#matteView')

            var varnishView = (glossView.isVisible() ? glossView : matteView)


            var selectedRecords = varnishView.getSelectionModel().getSelection()

            if (selectedRecords.length === 0) {
                // Select the first item in the view.
                varnishView.getSelectionModel().select(0)

                selectedRecords = varnishView.getSelectionModel().getSelection()

            }

            var item = selectedRecords[0].data

            var varnish,
                textureType


            if (item.name == 'None') {
                varnish = false

                textureType = ''

            } else if (item.name == 'Plain') {
                varnish = true

                textureType = ''

            } else {
                varnish = true

                textureType = item.name

            }

            varnishSettings = {
                'varnishStatus': varnish,
                'textureType': textureType,
                'applyToAll': true
            }


            var objects = this.getAllSpecialColorableObjects()


            this.applySpotColorAttribute('varnish', varnish, objects)

            this.applySpotColorAttribute('textureType', textureType, objects)


            canvas.renderAll()

        } else {
            varnishSettings = {
                'applyToAll': false
            }

        }

        this.getViewModel().setData({
            'varnishSettings': varnishSettings
        })


        this.updateSpotColorTab()


        canvas.fire('object:modified')

    },

    onTabPanelTabChange: function(tabPanel, newCard, oldCard, eOpts) {
        var active = tabPanel.items.indexOf(newCard)

        if (active === 0) {
            this.updateColorTab()

        } else {
            this.updateSpotColorTab()

        }
    },

    onPanelHide: function(component, eOpts) {
        // Unregister for canvas notifications.
        if (this.onCanvasSelectionChange) {
            var canvas = RolandKioskPrint.AppData.getCanvas()

            canvas.off(this.onCanvasSelectionChange)

        }
    },

    onPanelBeforeShow: function(component, eOpts) {
        // Choose fill by default.
        var btnFillColor = this.getView().down('#btnFillColor')

        btnFillColor.toggle(true)


        var colorView = this.getView().down('#colorView')

        var store = colorView.getStore()


        // Set appropriate panel tabs.
        this.setPanelTabs()


        // Update the panel.
        this.updatePanel()


        // Register for further selection change notifications.
        var canvas = RolandKioskPrint.AppData.getCanvas()

        var me = this


        if (!this.onCanvasSelectionChange) {
            this.onCanvasSelectionChange = {
                'selection:created': function() {
                    me.updatePanel()

                },
                'selection:updated': function() {
                    me.updatePanel()

                },
                'selection:cleared': function() {
                    me.updatePanel()

                }
            }

        }

        canvas.on(this.onCanvasSelectionChange)

    },

    onPanelAfterRender: function(component, eOpts) {
        // Populate the gloss and matte data views.
        var glossTypeData = [
        ['None', 'resources/images/NoVarnish.png'],
        ['Plain', 'resources/images/NoTexture.png']
        ]


        var glossTypesStore = Ext.create('Ext.data.ArrayStore', {
            // store configs
            storeId: 'GlossTypes',
            // reader configs
            fields: [
            'name',
            'thumbPath'
            ],
            data: glossTypeData
        })


        var glossView = this.getView().down('#glossView')

        glossView.setStore(glossTypesStore)


        var matteTypeData = [
        ['None', 'resources/images/NoVarnish.png'],
        ['Plain', 'resources/images/NoTexture.png']
        ]


        var matteTypesStore = Ext.create('Ext.data.ArrayStore', {
            // store configs
            storeId: 'MatteTypes',
            // reader configs
            fields: [
            'name',
            'thumbPath'
            ],
            data: matteTypeData
        })


        // Append the list of matte textures.
        var texturesStore = Ext.StoreManager.lookup('Textures')

        matteTypesStore.add(texturesStore.getData().items)


        var matteView = this.getView().down('#matteView')

        matteView.setStore(matteTypesStore)

    }

})

