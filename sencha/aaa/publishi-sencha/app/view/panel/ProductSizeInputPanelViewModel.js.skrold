/*
 * File: app/view/panel/ProductSizeInputPanelViewModel.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.ProductSizeInputPanelViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.panel.productsizeinputpanel',

    requires: [
        'Ext.app.bind.Formula'
    ],

    formulas: {
        maxCornerRadiusUnit: function(get) {
            var widthMM = get('widthMM');
            var heightMM = get('heightMM');

            // Max corner radius is the smaller of half the width and height.
            var maxCornerRadiusMM = Math.min(widthMM / 2, heightMM / 2);

            var units = get('units');
            if (units == 'mm') {
                return maxCornerRadiusMM;
            }

            var maxCornerRadiusUnit = this.convertMMToUnit(units, maxCornerRadiusMM);
            return parseFloat(maxCornerRadiusUnit.toFixed(4));
        },
        widthUnit: {
            get: function(get) {
                var widthMM = get('widthMM');
                if (widthMM === null) {
                    return;
                }
                return this.convertMMToUnit(get('units'), widthMM);
            },
            set: function(value) {
                this.set({
                    widthMM: this.convertUnitToMM(this.get('units'), value)
                });
            }
        },
        heightUnit: {
            get: function(get) {
                var heightMM = get('heightMM');
                if (heightMM === null) {
                    return;
                }
                return this.convertMMToUnit(get('units'), heightMM);
            },
            set: function(value) {
                this.set({
                    heightMM: this.convertUnitToMM(this.get('units'), value)
                });
            }
        },
        leftMarginUnit: {
            get: function(get) {
                var leftMarginMM = get('leftMarginMM');
                return this.convertMMToUnit(get('units'), leftMarginMM);
            },
            set: function(value) {
                this.set({
                    leftMarginMM: this.convertUnitToMM(this.get('units'), value)
                });
            }
        },
        rightMarginUnit: {
            get: function(get) {
                var rightMarginMM = get('rightMarginMM');
                return this.convertMMToUnit(get('units'), rightMarginMM);
            },
            set: function(value) {
                this.set({
                    rightMarginMM: this.convertUnitToMM(this.get('units'), value)
                });
            }
        },
        topMarginUnit: {
            get: function(get) {
                var topMarginMM = get('topMarginMM');
                return this.convertMMToUnit(get('units'), topMarginMM);
            },
            set: function(value) {
                this.set({
                    topMarginMM: this.convertUnitToMM(this.get('units'), value)
                });
            }
        },
        bottomMarginUnit: {
            get: function(get) {
                var bottomMarginMM = get('bottomMarginMM');
                return this.convertMMToUnit(get('units'), bottomMarginMM);
            },
            set: function(value) {
                this.set({
                    bottomMarginMM: this.convertUnitToMM(this.get('units'), value)
                });
            }
        },
        cornerRadiusUnit: {
            get: function(get) {
                var cornerRadiusMM = get('cornerRadiusMM');
                return this.convertMMToUnit(get('units'), cornerRadiusMM);
            },
            set: function(value) {
                this.set({
                    cornerRadiusMM: this.convertUnitToMM(this.get('units'), value)
                });
            }
        },
        offsetXUnit: {
            get: function(get) {
                var xOffsetMM = get('xOffsetMM');
                if (xOffsetMM === null) {
                    return;
                }
                return this.convertMMToUnit(get('units'), xOffsetMM);
            },
            set: function(value) {
                this.set({
                    xOffsetMM: this.convertUnitToMM(this.get('units'), value)
                });
            }
        },
        offsetYUnit: {
            get: function(get) {
                var yOffsetMM = get('yOffsetMM');
                if (yOffsetMM === null) {
                    return;
                }
                return this.convertMMToUnit(get('units'), yOffsetMM);
            },
            set: function(value) {
                this.set({
                    yOffsetMM: this.convertUnitToMM(this.get('units'), value)
                });
            }
        },
        foilPrint: {
            get: function(get) {
                return this.isPrintType(
                get('printType'),
                RolandKioskPrint.app.constants.PRINT_TYPE_FOIL
                );
            },
            set: function(value) {
                if (value) {
                    this.set('printType', RolandKioskPrint.app.constants.PRINT_TYPE_FOIL);
                }
            }
        },
        metalPrint: {
            get: function(get) {
                return this.isPrintType(
                get('printType'),
                RolandKioskPrint.app.constants.PRINT_TYPE_METAL
                );
            },
            set: function(value) {
                if (value) {
                    this.set('printType', RolandKioskPrint.app.constants.PRINT_TYPE_METAL);
                }
            }
        },
        cutPrint: {
            get: function(get) {
                return this.isPrintType(
                get('printType'),
                RolandKioskPrint.app.constants.PRINT_TYPE_CUT
                );
            },
            set: function(value) {
                if (value) {
                    this.set('printType', RolandKioskPrint.app.constants.PRINT_TYPE_CUT);
                }
            }
        },
        colorPrint: {
            get: function(get) {
                return this.isPrintType(
                get('printType'),
                RolandKioskPrint.app.constants.PRINT_TYPE_COLOR
                );
            },
            set: function(value) {
                if (value) {
                    this.set('printType', RolandKioskPrint.app.constants.PRINT_TYPE_COLOR);
                }
            }
        }
    },

    convertMMToUnit: function(units, mmValue) {
        var result = mmValue;

        if (units == 'inch') {
            result = mmValue / 25.4;
        }
        return result;
    },

    convertUnitToMM: function(units, unitValue) {
        var result = unitValue;

        if (units == 'inch') {
            result = unitValue * 25.4;
        }
        return result;
    },

    isPrintType: function(printType, checkType) {
        var result = false;

        if (Array.isArray(printType)) {
            for (var i = 0; i < printType.length && !result; i++) {
                result = (printType[i] == checkType);
            }
        } else {
            result = (printType == checkType);
        }

        return result;
    }

});