/*
 * File: app/view/panel/ImageUploadPanelViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.ImageUploadPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panel.imageuploadpanel',

    listen: {
        controller: {
            '*': {
                imageUploadNextClicked: 'onImageUploadNextClicked',
                imageUploadBackClicked: 'onImageUploadBackClicked'
            }
        }
    },

    updatePanelMode: function(screenType) {
        this.screenType = screenType


        // Update the parent model data.
        var parentPanel = this.parentPanel

        parentPanel.getViewModel().set('screenType', this.screenType)


        var btnCloseBack = parentPanel.down('#btnCloseBack')

        var btnNextClose = parentPanel.down('#btnNextClose')

        var view = this.getView()


        if (screenType == 'uploadMethodSelection') {
            view.down('#qrCodePanel').hide()

            view.down('#pnlShootingTips').hide()

            view.down('#pnlUploadingSteps').hide()

            view.down('#uploadSelectionBtnPanel').show()

            btnNextClose.hide()

        } else if (screenType == 'imageShootingTips') {
            view.down('#qrCodePanel').hide()

            view.down('#pnlShootingTips').show()

            view.down('#pnlUploadingSteps').hide()

            view.down('#uploadSelectionBtnPanel').hide()

            btnNextClose.show()

            btnCloseBack.show()

        } else if (screenType == 'imageUploadSteps') {
            view.down('#qrCodePanel').hide()

            view.down('#pnlShootingTips').hide()

            view.down('#pnlUploadingSteps').show()

            view.down('#uploadSelectionBtnPanel').hide()

        } else if (screenType == 'networkSettingsQRCode') {
            view.down('#qrCodePanel').show()

            view.down('#pnlShootingTips').hide()

            view.down('#pnlUploadingSteps').hide()

            view.down('#uploadSelectionBtnPanel').hide()

            btnNextClose.show()

        } else if (screenType == 'uploadURLQRCode') {
            btnCloseBack.hide()

        }

        if (!view.down('#qrCodePanel').isVisible()) {
            var imgQRCode = this.getView().down('#imgQRCode')

            imgQRCode.setStyle({
                backgroundImage: "url('')"
            })

        }
    },

    onImageUploadNextClicked: function() {
        if (this.screenType == 'imageShootingTips') {
            this.updatePanelMode('imageUploadSteps')

        } else if (this.screenType == 'imageUploadSteps') {
            this.showNetworkSettingsQRCodeScreen()

        } else if (this.screenType == 'networkSettingsQRCode') {
            this.showUploadURLQRCodeScreen()

        }
    },

    onImageUploadBackClicked: function() {
        if (this.screenType == 'imageUploadSteps') {
            this.updatePanelMode('imageShootingTips')

        } else if (this.screenType == 'networkSettingsQRCode') {
            var prevScreenType

            if (this.backgroundImage && RolandKioskPrint.AppData.isProductDesigner()) {
                prevScreenType = 'imageUploadSteps'

            } else {
                prevScreenType = 'uploadMethodSelection'

            }
            this.updatePanelMode(prevScreenType)

        } else if (this.screenType == 'imageShootingTips') {
            this.updatePanelMode('uploadMethodSelection')

        }
    },

    showNetworkSettingsQRCodeScreen: function() {
        var serverUrl = RolandKioskPrint.app.constants.NETWORK_SETTINGS_QRCODE_GENERATE_URL

        var parentPanel = this.parentPanel


        parentPanel.getEl().mask(RolandKioskPrint.app.getString('message.designer.generatingQRCode'))


        Ext.Ajax.request({
            scope: this,
            url: serverUrl,
            cors: true,
            success: function(response, opts){
                var qrCodeData = Ext.decode(response.responseText)

                parentPanel.getEl().unmask()


                if (qrCodeData.success) {
                    // Set the QR code image.
                    var imgQRCode = this.getView().down('#imgQRCode')

                    var url = "url('" + qrCodeData.qrcodeImage + "')"

                    imgQRCode.setStyle({
                        backgroundImage: url,
                        backgroundRepeat: 'no-repeat',
                        backgroundSize: 'contain',
                        backgroundPosition: 'center center'
                    })


                    var ssidPanel = this.getView().down('#pnlSSID')

                    var passwordPanel = this.getView().down('#pnlPassword')

                    var urlPanel = this.getView().down('#pnlURL')


                    ssidPanel.show()

                    passwordPanel.show()

                    urlPanel.hide()


                    var lblSSIDValue = this.getView().down('#lblSSIDValue')

                    var lblPasswordValue = this.getView().down('#lblPasswordValue')


                    lblSSIDValue.setText(qrCodeData.networkSSID)

                    lblPasswordValue.setText(qrCodeData.networkPassword)


                    this.updatePanelMode('networkSettingsQRCode')

                } else {
                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                                  RolandKioskPrint.app.getString('message.designer.qrCodeGenerationFailed'))

                }
            },
            failure: function(response, opts) {
                parentPanel.getEl().unmask()

                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                              RolandKioskPrint.app.getString('message.designer.qrCodeGenerationFailed'))

            }
        })

    },

    showUploadURLQRCodeScreen: function() {
        var serverUrl

        if (RolandKioskPrint.AppData.isProductModelDesigner()) {
            var curPrefLang = RolandKioskPrint.app.getPrefLanguage()


            // Background images are only allowed in product model designer.
            if (this.backgroundImage) {
                serverUrl = Ext.String.format(RolandKioskPrint.app.constants.QRCODE_GENERATE_URL, 'product-model-background', curPrefLang)

            } else {
                serverUrl = Ext.String.format(RolandKioskPrint.app.constants.QRCODE_GENERATE_URL, 'product-model', curPrefLang)

            }
        } else {
            var curPrefLang = RolandKioskPrint.app.getPrefClientLanguage()

            if (!RolandKioskPrint.app.isSystemLanguage(curPrefLang)) {
                curPrefLang = 'en'

            }
            if (this.backgroundImage) {
                serverUrl = Ext.String.format(RolandKioskPrint.app.constants.QRCODE_GENERATE_URL, 'end-user-background', curPrefLang)

            } else {
                serverUrl = Ext.String.format(RolandKioskPrint.app.constants.QRCODE_GENERATE_URL, 'end-user', curPrefLang)

            }
        }

        if (!this.backgroundImage) {
            serverUrl += '&print-type=' + RolandKioskPrint.AppData.getActivePrintType()

        }

        var parentPanel = this.parentPanel

        parentPanel.getEl().mask(RolandKioskPrint.app.getString('message.designer.generatingQRCode'))


        Ext.Ajax.request({
            scope: this,
            url: serverUrl,
            cors: true,
            success: function(response, opts){
                var qrCodeData = Ext.decode(response.responseText)


                parentPanel.getEl().unmask()

                if (qrCodeData.success) {
                    // Set the QR code image.
                    var imgQRCode = this.getView().down('#imgQRCode')


                    var url = "url('" + qrCodeData.qrcodeImage + "')"

                    imgQRCode.setStyle({
                        backgroundImage: url,
                        backgroundRepeat: 'no-repeat',
                        backgroundSize: 'contain',
                        backgroundPosition: 'center center'
                    })


                    var ssidPanel = this.getView().down('#pnlSSID')

                    var passwordPanel = this.getView().down('#pnlPassword')

                    var urlPanel = this.getView().down('#pnlURL')

                    var notePanel = this.getView().down('#pnlNote')


                    ssidPanel.hide()

                    passwordPanel.hide()

                    notePanel.hide()

                    urlPanel.show()


                    var lblUrlValue = this.getView().down('#lblUrlValue')

                    lblUrlValue.setText(qrCodeData.uploadUrl)


                    var lblTittle = this.getView().down('#lblTittle')

                    var title = RolandKioskPrint.app.getString('label.designer.titleOnlineImageUpload')

                    lblTittle.setText(title)


                    this.updatePanelMode('uploadURLQRCode')

                } else {
                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                                  RolandKioskPrint.app.getString('message.designer.qrCodeGenerationFailed'))

                }
            },
            failure: function(response, opts) {
                parentPanel.getEl().unmask()

                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                              RolandKioskPrint.app.getString('message.designer.qrCodeGenerationFailed'))

            }
        })

    },

    onFilefieldChange: function(filefield, value, eOpts) {
        if (!value) {
            // Clearing fileInputEl fires fileFieldChange again on IE.
            // We do a early return in that case.
            return

        }

        var appData = RolandKioskPrint.AppData


        var serverUrl

        var printType = appData.getActivePrintType()


        if (appData.isProductModelDesigner()) {
            if (this.backgroundImage) {
                serverUrl = RolandKioskPrint.app.constants.PRODUCT_MODEL_BG_IMAGE_UPLOAD_URL

            } else {
                serverUrl = RolandKioskPrint.app.constants.PRODUCT_MODEL_IMAGE_UPLOAD_URL +
                '&print-type=' + printType

            }
        } else {
            if (this.backgroundImage) {
                serverUrl = RolandKioskPrint.app.constants.END_USER_BG_IMAGE_UPLOAD_URL

            } else {
                serverUrl = RolandKioskPrint.app.constants.END_USER_IMAGE_UPLOAD_URL +
                '&print-type=' + printType

            }
        }

        var fileInputEl = filefield.getEl().down('input[type=file]')

        // Not submitting the form, rather using Ajax.request to upload the image.
        var file = fileInputEl.dom.files[0]


        if (!file.type.startsWith('image/')) {
            Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
            RolandKioskPrint.app.getString('message.generic.notImageFile'))

            fileInputEl.dom.value = ''

            return

        } else if (file.type != 'image/jpeg' && file.type != 'image/png') {
            Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
            RolandKioskPrint.app.getString('message.generic.notSupportedImageFormat'))

            fileInputEl.dom.value = ''

            return

        }
        var filters = []

        var formData = new FormData()

        formData.append('file', file)


        if (!this.backgroundImage) {
            // Do not apply filters on background images.
            if (appData.isActivePrintTypeFoil()) {
                // Apply image binarization filter, if foil print.
                filters.push({
                    name: 'blackwhite'
                })

            } else if (appData.isActivePrintTypeMetal()) {
                filters.push({
                    name: 'grayscale'
                })

            }
        }

        formData.append('filters', JSON.stringify(filters))


        var parentPanel = this.parentPanel

        parentPanel.getEl().mask(RolandKioskPrint.app.getString('message.designer.uploadingImage'))

        Ext.Ajax.request({
            scope: this,
            method: 'POST',
            url: serverUrl,
            rawData: formData,
            headers: {
                'Content-Type': null // To use content type of FormData
            },
            success: function(response, opts) {
                var imageData = Ext.decode(response.responseText)


                parentPanel.getEl().unmask()

                if (imageData.success)
                {
                    var imgPanelView = parentPanel.getViewModel().get('imgPanelView')


                    // Add image to view.
                    var imgView = imgPanelView.down('#imgView')

                    if (imgView.store.getCount() == 1)
                    {
                        var firstRecord = imgView.store.getAt(0)

                        if (firstRecord.data.thumbPath === '') {
                            imgView.store.removeAll()
 // Clear dummy record.
                        }
                    }

                    imgView.store.insert(0, {
                        fileName: (imageData.fileName !== undefined) ? imageData.fileName : imageData.filePath.replace(/^.*[\\\/]/, ''),
                        filePath: imageData.filePath,
                        thumbPath: imageData.thumbPath,
                        origHeight: imageData.origHeight,
                        origWidth: imageData.origWidth
                    })


                    imgView.refresh()

                } else if (imageData.uploadStatus == 1) {
                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                    RolandKioskPrint.app.getString('message.designer.uploadingImageFailed') + ' ' +
                    RolandKioskPrint.app.getString('message.designer.requestSizeExceeds'))

                } else if (imageData.uploadStatus == 2) {
                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                    RolandKioskPrint.app.getString('message.designer.uploadingImageFailed') + ' ' +
                    RolandKioskPrint.app.getString('message.designer.fileSizeExceeds'))

                } else if (imageData.uploadStatus == 3) {
                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                    RolandKioskPrint.app.getString('message.designer.uploadingImageFailed') + ' ' +
                    RolandKioskPrint.app.getString('message.designer.numImagesExceeds'))

                } else if (imageData.uploadStatus == 4) {
                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                    RolandKioskPrint.app.getString('message.designer.uploadingImageFailed') + ' ' +
                    RolandKioskPrint.app.getString('message.designer.unsupportedImageFormat'))

                } else {
                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                    RolandKioskPrint.app.getString('message.designer.uploadingImageFailed'))

                }
            },
            failure: function() {
                parentPanel.getEl().unmask()

                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                RolandKioskPrint.app.getString('message.designer.uploadingImageFailed'))

            }
        })


        // Reset so that change fires even when the same file is selected again.
        fileInputEl.dom.value = ''

    },

    onOtherThanSelectImagesClick: function(button, e, eOpts) {
        if (this.backgroundImage && RolandKioskPrint.AppData.isProductDesigner()) {
            this.updatePanelMode('imageShootingTips')

        } else {
            this.showNetworkSettingsQRCodeScreen()

        }
    },

    onPanelAfterRender: function(component, eOpts) {
        // Configure the skip screen link action same as next button.
        var lblSkipScreen = this.getView().down('#lblSkipScreen')

        var me = this

        lblSkipScreen.getEl().on('click', function() {
            me.onImageUploadNextClicked()

        })


        // Find and store the parent panel.
        var parentPanel

        if (RolandKioskPrint.AppData.isProductModelDesigner()) {
            parentPanel = this.getView().up('productmodeldesignerimageupload')

        } else {
            parentPanel = this.getView().up('productdesignerimageupload')

        }

        this.parentPanel = parentPanel


        this.backgroundImage = parentPanel.getViewModel().get('backgroundImage') || false

        if (this.backgroundImage && RolandKioskPrint.AppData.isProductDesigner()) {
            this.getView().down('#lblTakePic').show()

        }

        // Update the panel.
        var screenType = parentPanel.getViewModel().get('screenType')

        this.updatePanelMode(screenType)

    }

})

