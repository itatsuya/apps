/*
 * File: app/view/panel/FlipRotatePanelViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.FlipRotatePanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panel.fliprotatepanel',

    flip: function(fx, fy) {
        var canvas = RolandKioskPrint.AppData.getCanvas()


        var activeObject = canvas.getActiveObject()


        if (activeObject && !activeObject.isLocked) {
            if (fx) {
                activeObject.flipX = !activeObject.flipX

            }
            if (fy) {
                activeObject.flipY = !activeObject.flipY

            }
            activeObject.setCoords()


            canvas.renderAll()

            canvas.calcOffset()


            canvas.fire('object:modified', {target: activeObject})

        }
    },

    rotate: function(byAngle) {
        var canvas = RolandKioskPrint.AppData.getCanvas()


        var activeObject = canvas.getActiveObject()


        if (activeObject && !activeObject.isLocked) {
            var angle = this.adjustRotationAngle(activeObject.getAngle(), byAngle)

            activeObject.rotate(angle)

            activeObject.setCoords()


            canvas.renderAll()

            canvas.calcOffset()


            canvas.fire('object:modified', {target: activeObject})

        }
    },

    parentShown: function() {
        // Update the panel.
        this.updatePanel()


        // Register for further selection change notifications.
        var canvas = RolandKioskPrint.AppData.getCanvas()

        var me = this


        if (!this.onCanvasSelectionChange) {
            this.onCanvasSelectionChange = {
                'selection:created': function() {
                    me.updatePanel()

                },
                'selection:updated': function() {
                    me.updatePanel()

                },
                'selection:cleared': function() {
                    me.updatePanel()

                }
            }

        }
        canvas.on(this.onCanvasSelectionChange)

    },

    parentHidden: function() {
        // Unregister for canvas notifications.
        if (this.onCanvasSelectionChange) {
            var canvas = RolandKioskPrint.AppData.getCanvas()

            canvas.off(this.onCanvasSelectionChange)

        }
    },

    updatePanel: function() {
        var canFlip = false


        var canvas = RolandKioskPrint.AppData.getCanvas()

        var activeObject = canvas.getActiveObject()


        var cropMode = RolandKioskPrint.AppData.getCropMode()

        if (!cropMode) {
            // Enable flip and rotate if we have active selection.
            canFlip = (activeObject && !activeObject.isEffectivelyLocked &&
                       !activeObject.isLocked) ? true : false

        }

        var isProductDesigner =
            (RolandKioskPrint.AppData.appMode == RolandKioskPrint.app.constants.APP_MODE_PRODUCT_DESIGNER)


        // While the edit areas are selectable as targets in product designer, we do not
        // allow those to be transformed.
        if (isProductDesigner && canFlip) {
            if (activeObject && activeObject.editAreaType) {
                canFlip = false

            } else if (activeObject && activeObject.get('type') == 'activeSelection') {
                var objects = activeObject.getObjects()

                for (var i = 0, length = objects.length
 i < length; i++) {
                    if (objects[i].editAreaType) {
                        canFlip = false

                        break

                    }
                }
            }
        }

        // While the imprint area is selectable in product model designer, we do not
        // allow it to be flipped or rotated.
        if (!isProductDesigner && canFlip) {
            if (activeObject && RolandKioskPrint.AppData.isImprintArea(activeObject)) {
                canFlip = false

            } else if (activeObject && activeObject.get('type') == 'activeSelection') {
                var objects = activeObject.getObjects()

                for (var i = 0, length = objects.length
 i < length; i++) {
                    if (RolandKioskPrint.AppData.isImprintArea(objects[i])) {
                        canFlip = false

                        break

                    }
                }
            }
        }

        // Doing away with view-model bindings.
        // These were not functioning correctly with ExtJS 6.6
        // Now enabling/disabling buttons directly.
        var view = this.getView()


        view.down('#btnFlipHorizontal').setDisabled(!canFlip)

        view.down('#btnFlipVertical').setDisabled(!canFlip)


        view.down('#btnRotateClockwise').setDisabled(!canFlip)

        view.down('#btnRotateCounterClockwise').setDisabled(!canFlip)

    },

    adjustRotationAngle: function(currAngle, rotateByAngle) {
        if (rotateByAngle === 0) {
            return currAngle

        }

        // The new angle needs to be a multiple of rotation angle.
        // If the current angle is already a multiple of rotation angle, we
        // just add the two and return.
        if ((currAngle % rotateByAngle) === 0) {
            return currAngle + rotateByAngle

        }

        // Otherwise we adjust the rotation angle
        var absRotateByAngle = Math.abs(rotateByAngle)


        if (rotateByAngle > 0) {
            return Math.ceil(currAngle / absRotateByAngle) * absRotateByAngle

        } else {
            return Math.floor(currAngle / absRotateByAngle) * absRotateByAngle

        }
    },

    onFlipHorizontalButtonClick: function(button, e, eOpts) {
        this.flip(true, false)
 // Flip horizontally
    },

    onFlipVerticalButtonClick: function(button, e, eOpts) {
        this.flip(false, true)
 // Flip vertically
    },

    onRotateClockwiseButtonClick: function(button, e, eOpts) {
        this.rotate(RolandKioskPrint.app.constants.OBJECT_ROTATION_DEGREES)
 // Rotate right by specified degrees.
    },

    onRotateCounterClockwiseButtonClick: function(button, e, eOpts) {
        this.rotate(-RolandKioskPrint.app.constants.OBJECT_ROTATION_DEGREES)
 // Rotate left by specified degrees.
    }

})

