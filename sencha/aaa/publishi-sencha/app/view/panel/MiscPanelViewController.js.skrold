/*
 * File: app/view/panel/MiscPanelViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.MiscPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panel.miscpanel',

    copyObject: function(object, index, copiedObjects) {
        // fabric object cloning is async.
        var deferred = new Ext.Deferred();
        var canvasPanelController = RolandKioskPrint.AppData.getCanvasPanel().getController();

        // Make a copy of the object.
        // We set clipTo to null (and restore later) since it does not round-trip
        // well through JSON - the mechanism used by fabric object.clone
        object.clipTo = null;
        object.clone(function(copy) {
            // Check if the new object can be placed at an offset of 5,5
            var allow = canvasPanelController.allowObjectMove(copy, object.left + 5, object.top + 5);
            if (allow) {
                copy.set('top', object.top + 5);
                copy.set('left', object.left + 5);
            }

            copiedObjects[index] = copy;

            // Once copied, restore clipping on the original object.
            if (object.editAreaId) {
                var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel();
                canvasPanel.getController().setClipToEditArea(object);
                canvasPanel.getController().setClipToEditArea(copy);
            }
            deferred.resolve();
        }, [
            // Additionally including these properties.
            'id',
            'selectable',
            'isCutPath',
            'specialColor',
            'textureType',
            'noColor',
            'editAreaId',
            'perPixelTargetFind',
            'targetFindTolerance',
            'objectCaching',
            'sourceType',
            'skipDrawing',
            'origWidth',
            'origHeight',
            'isLowRes',
            'printType',
            'uniColor',
            'fillSharpness',
            'strokeSharpness',
            'isOutlinePath',
            'startScaleX',
            'startScaleY'
        ]);

        return deferred.promise;
    },

    updatePanel: function() {
        var allowCopyDelete = {
            canCopy: false,
            canDelete: false
        };

        var cropMode = RolandKioskPrint.AppData.getCropMode();
        if (!cropMode) {
            allowCopyDelete = this.allowCopyDelete();
        }

        // Doing away with view-model bindings.
        // These were not functioning correctly with ExtJS 6.6
        // Now enabling/disabling buttons directly.

        this.getView().down('#btnCopy').setDisabled(!allowCopyDelete.canCopy);
        this.getView().down('#btnDelete').setDisabled(!allowCopyDelete.canDelete);
    },

    allowCopyDelete: function() {
        var canvas = RolandKioskPrint.AppData.getCanvas();
        var activeObject = canvas.getActiveObject();

        // Enable copy and delete if we have active selection.
        var canCopy = (activeObject && !activeObject.isEffectivelyLocked &&
                       !activeObject.isLocked) ? true : false;
        var canDelete = canCopy;

        var isProductDesigner =
            (RolandKioskPrint.AppData.appMode == RolandKioskPrint.app.constants.APP_MODE_PRODUCT_DESIGNER);

        var isEditAreaSelection = false;
        if (activeObject && activeObject.editAreaType) {
            isEditAreaSelection = true;
        } else if (activeObject && activeObject.get('type') == 'activeSelection') {
            var objects = activeObject.getObjects();
            for (var i = 0, length = objects.length; i < length; i++) {
                if (objects[i].editAreaType) {
                    isEditAreaSelection = true;
                    break;
                }
            }
        }

        // Do not allow edit areas to be copied.
        if (isEditAreaSelection) {
            canCopy = false;
        }

        // Do not allow edit areas to be deleted in product designer.
        if (isEditAreaSelection && isProductDesigner) {
            canDelete = false;
        }

        var isImprintAreaSelection = false;
        if (activeObject && RolandKioskPrint.AppData.isImprintArea(activeObject)) {
            isImprintAreaSelection = true;
        } else if (activeObject && activeObject.get('type') == 'activeSelection') {
            var objects = activeObject.getObjects();
            for (var i = 0, length = objects.length; i < length; i++) {
                if (RolandKioskPrint.AppData.isImprintArea(objects[i])) {
                    isImprintAreaSelection = true;
                    break;
                }
            }
        }

        // Do not allow foil imprint area to be copied or deleted.
        if (isImprintAreaSelection) {
            canCopy = canDelete = false;
        }

        return {
            'canCopy': canCopy,
            'canDelete': canDelete
        };
    },

    parentShown: function() {
        // Update the panel.
        this.updatePanel();

        // Register for further selection change notifications.
        var canvas = RolandKioskPrint.AppData.getCanvas();
        var me = this;

        if (!this.onCanvasSelectionChange) {
            this.onCanvasSelectionChange = {
                'selection:created': function() {
                    me.updatePanel();
                },
                'selection:updated': function() {
                    me.updatePanel();
                },
                'selection:cleared': function() {
                    me.updatePanel();
                }
            };
        }
        canvas.on(this.onCanvasSelectionChange);
    },

    parentHidden: function() {
        // Unregister for canvas notifications.
        if (this.onCanvasSelectionChange) {
            var canvas = RolandKioskPrint.AppData.getCanvas();
            canvas.off(this.onCanvasSelectionChange);
        }
    },

    removeObjectsClippedBy: function(editAreaId) {
        var canvas = RolandKioskPrint.AppData.getCanvas();

        var objects = canvas.getObjects();
        var objectsToRemove = [];

        objects.forEach(function(object) {
            if (object.editAreaId == editAreaId) {
                objectsToRemove.push(object);
            }
        });

        objectsToRemove.forEach(function(object) {
            canvas.remove(object);
        });
    },

    onDelete: function() {
        var allowCopyDelete = this.allowCopyDelete();
        if (!allowCopyDelete.canDelete) {
            return;
        }

        var canvas = RolandKioskPrint.AppData.getCanvas();

        var selectedObjects = canvas.getActiveObjects();
        if (selectedObjects.length === 0) {
            // Nothing to delete.
            return;
        }

        var undoRedoPanel = RolandKioskPrint.AppData.getUndoRedoPanel();
        undoRedoPanel.getController().mute(); // Mute undo/redo handling. We notify once at end.

        var msg = RolandKioskPrint.app.getString('label.designer.deleteConfirmation');
        if (selectedObjects.length > 1) {
            msg = RolandKioskPrint.app.getString('label.designer.deleteConfirmationMultiple');
        }

        var me = this;
        Ext.Msg.confirm(RolandKioskPrint.app.getString('message.generic.confirmation'),
                        msg, function(btnText) {
                            if (btnText == 'yes') {
                                canvas.discardActiveObject();

                                var editAreaIds = [];
                                selectedObjects.forEach(function(object) {
                                    canvas.remove(object);
                                    if (object.editAreaType) {
                                        editAreaIds.push(object.id);
                                    }
                                });

                                editAreaIds.forEach(function(editAreaId) {
                                    me.removeObjectsClippedBy(editAreaId);
                                });

                                undoRedoPanel.getController().unmute();
                                canvas.fire('object:removed');
                            } else {
                                undoRedoPanel.getController().unmute();
                            }
                        }, this);
    },

    onCopyButtonClick: function(button, e, eOpts) {
        var canvas = RolandKioskPrint.AppData.getCanvas();

        var copyObjects = canvas.getActiveObjects();
        if (copyObjects.length === 0) {
            // Nothing to copy.
            return;
        }

        var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel();
        if (!canvasPanel.getController().canCopyObjects(copyObjects)) {
            // Check if we have reached the maximum limit on number of objects.
            return;
        }

        // Since fabric.js object cloning is async, we need to use promises here.
        var copyPromises = [];
        var copiedObjects;

        var undoRedoPanel = RolandKioskPrint.AppData.getUndoRedoPanel();
        undoRedoPanel.getController().mute(); // Mute undo/redo handling. We notify once at end.

        canvas.discardActiveObject();
        copiedObjects =  new Array(copyObjects.length);

        var me = this;
        copyObjects.forEach(function(object, index) {
            var promise = me.copyObject(object, index, copiedObjects); // Initiate copy
            copyPromises.push(promise);
        });

        Ext.Promise.all(copyPromises).then(function() {
            var numObjects = copiedObjects.length;

            // Add copied objects to canvas.
            for (var i = 0; i < numObjects; i++) {
                var copiedObject = copiedObjects[i];
                if (!copiedObject) {
                    continue;
                }

                if (copiedObject.editAreaId) {
                    canvasPanel.getController().addObjectToEditAreaById(copiedObject, copiedObject.editAreaId);
                } else if (copiedObject.id == 'background') {
                    canvas.insertAt(copiedObject, canvasPanel.getController().getNextBGObjectIndex());
                } else {
                    canvas.add(copiedObject);
                }
            }

            var newObject;
            if (numObjects == 1) {
                // Set the copied object as active.
                canvas.setActiveObject(copiedObjects[0]);
                newObject = copiedObjects[0];
            } else {
                // Create a selection group for the copied objects.
                var selectionGroup = new fabric.ActiveSelection(copiedObjects, {
                    canvas: canvas
                });
                canvas.setActiveObject(selectionGroup);
                newObject = selectionGroup;
            }

            undoRedoPanel.getController().unmute();
            canvas.fire('object:added', {target: newObject});

            canvas.renderAll();
        },
        function() {
            undoRedoPanel.getController().unmute();
        });
    },

    onDeleteButtonClick: function(button, e, eOpts) {
        this.onDelete();
    }

});
