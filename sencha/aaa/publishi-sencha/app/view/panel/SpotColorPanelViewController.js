/*
 * File: app/view/panel/SpotColorPanelViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.SpotColorPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panel.spotcolorpanel',

    setSpotColorData: function(spotColorData) {
        if (spotColorData.primer == 'user') {
            spotColorData.primer = 'off'

        }
        if (spotColorData.backPrint == 'user') {
            spotColorData.backPrint = 'off'

        }
        if (spotColorData.varnish == 'user') {
            spotColorData.varnish = 'off'

        }
        if (spotColorData.white == 'user') {
            spotColorData.white = 'off'

        }

        this.getViewModel().setData(spotColorData)


        // Update the varnish settings in the canvas.
        var canvas = RolandKioskPrint.AppData.getCanvas()

        canvas.varnish = spotColorData.varnish

        canvas.varnishType = spotColorData.varnishType

    },

    getSpotColorData: function() {
        return this.getViewModel().getData()

    },

    onRadiofieldChange: function(field, newValue, oldValue, eOpts) {
        var varnishFirstUseShown = RolandKioskPrint.app.getVarnishFirstUseShown()


        if (!varnishFirstUseShown && newValue && this.getView().isVisible()) {
            var widget = Ext.widget('productmodeldesignervarnishfirstuse')

            RolandKioskPrint.app.showModalView(widget)

            RolandKioskPrint.app.setVarnishFirstUseShown(true)

        }

        var canvas = RolandKioskPrint.AppData.getCanvas()

        canvas.varnish = newValue ? 'on' : 'off'


        // Redraw the canvas as varnish settings changed.
        canvas.requestRenderAll()


        // Notify varnish settings change.
        var spotColorData = this.getSpotColorData()

        this.fireEvent('varnishSettingsChanged', {
            varnish: newValue ? 'on' : 'off',
            varnishType: spotColorData.varnishType
        })

    },

    onCboVarnishTypesChange: function(field, newValue, oldValue, eOpts) {
        var canvas = RolandKioskPrint.AppData.getCanvas()

        canvas.varnishType = newValue


        // Redraw the canvas as varnish settings changed.
        canvas.requestRenderAll()


        // Notify varnish settings change.
        var spotColorData = this.getSpotColorData()

        this.fireEvent('varnishSettingsChanged', {
            varnish: spotColorData.varnish,
            varnishType: newValue
        })

    },

    onPanelAfterRender: function(component, eOpts) {
        // Populate the varnish type dropdown.
        var varnishTypeData = [
        [RolandKioskPrint.app.constants.GLOSS_VARNISH,
        RolandKioskPrint.app.getString('label.designer.glossVarnishSpotName')],
        [RolandKioskPrint.app.constants.MATTE_VARNISH,
        RolandKioskPrint.app.getString('label.designer.matteVarnishSpotName')]
        ]


        var store = Ext.create('Ext.data.ArrayStore', {
            // store configs
            storeId: 'VarnishTypes',
            // reader configs
            fields: [
            'varnishType',
            'varnishName'
            ],
            data: varnishTypeData
        })


        var cboVarnishTypes = this.getView().down('#cboVarnishTypes')

        cboVarnishTypes.setStore(store)

    }

})

