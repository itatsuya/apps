/*
 * File: app/view/panel/ToolsPanelViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.ToolsPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panel.toolspanel',

    listen: {
        controller: {
            'panel.spotcolorpanel': {
                varnishSettingsChanged: 'onVarnishSettingsChanged'
            }
        }
    },

    addToolPanelToContainer: function(panel) {
        var container = this.getView().down('#toolPanelContainer');
        container.add(panel);
        panel.hide(); // Hidden to start with
    },

    toggleToolPanelVisibility: function(panel) {
        // Hide opened virtual keyboard if there is any.
        document.activeElement.blur();

        if (panel.isVisible()) {
            panel.hide();
        } else {
            this.hideAllToolPanels();
            panel.show();
        }
    },

    hideAllToolPanels: function() {
        if (this.imagePanel && this.imagePanel.isVisible()) {
            this.imagePanel.hide();
        }

        if (this.textPanel && this.textPanel.isVisible()) {
            this.textPanel.hide();
        }

        if (this.clipartPanel && this.clipartPanel.isVisible()) {
            this.clipartPanel.hide();
        }

        if (this.colorPanel && this.colorPanel.isVisible()) {
            this.colorPanel.hide();
        }

        if (this.backgroundPanel && this.backgroundPanel.isVisible()) {
            this.backgroundPanel.hide();
        }

        if (this.foilColorPanel && this.foilColorPanel.isVisible()) {
            this.foilColorPanel.hide();
        }

        if (this.metalColorPanel && this.metalColorPanel.isVisible()) {
            this.metalColorPanel.hide();
        }

        if (this.spotColorPanel && this.spotColorPanel.isVisible()) {
            this.spotColorPanel.hide();
        }

        if (this.cutPanel && this.cutPanel.isVisible()) {
            this.cutPanel.hide();
        }

        if (this.editAreaPanel && this.editAreaPanel.isVisible()) {
            this.editAreaPanel.hide();
        }

        if (this.zoomPanel && this.zoomPanel.isVisible()) {
            this.zoomPanel.hide();
        }
    },

    initialize: function(customSize) {
        var toolbarView = this.getView().down('#toolbarView');

        // Start with tool buttons unpressed, and panels closed.
        var toolButtons = toolbarView.items.items;
        for (var i = 0, length = toolButtons.length; i < length; i++) {
            toolButtons[i].toggle(false); // Unpress all tool buttons.
        }

        this.hideAllToolPanels();

        // Show spot color and cut tools, by default.
        // These are later hidden, if required, based on spot color and cut data.
        var showTools = {
            btnSpotColorTool: true,
            btnCutTool: true
        };

        // Check if the color tool should be hidden.
        var uiSettings = RolandKioskPrint.AppData.getUiSettingsData();
        showTools.btnColorTool = !uiSettings.hideNormalColorPalette;

        var isProductModelDesigner = RolandKioskPrint.AppData.isProductModelDesigner();
        this.customSize = customSize;

        // When custom size product model is being edited, do not allow any content creation.
        // Only the spot color and cut tools are shown.
        var showContentTools = !(isProductModelDesigner && customSize);

        showTools.btnImageTool = showContentTools;
        showTools.btnTextTool = showContentTools;
        showTools.btnClipartTool = showContentTools;
        showTools.btnColorTool = showTools.btnColorTool && showContentTools;
        showTools.btnMetalColorTool = false;
        showTools.btnFoilColorTool = false;

        // Show edit area tool and background tool in product model designer.
        var showProductModelDesignerTools = (isProductModelDesigner && !customSize);

        var productModel = RolandKioskPrint.AppData.productModelData;
        var importedFromSVG =
            (productModel.source == 'SVG');

        showTools.btnBackgroundTool = showProductModelDesignerTools && !importedFromSVG; // No background tool if importing from SVG
        showTools.btnEditAreaTool = showProductModelDesignerTools;

        this.showHideTools(showTools);

        if (showProductModelDesignerTools) {
            if (!this.editAreaPanel) {
                this.editAreaPanel = this.createToolPanel('panel.editareapanel');
            }
            this.editAreaPanel.getController().initialize();
        }

        // Update tools enabled/disabled state, and register for further change notifications.
        this.updateTools();

        var me = this;
        if (!this.onCanvasSelectionChange) {
            this.onCanvasSelectionChange = {
                'selection:created': function() {
                    me.updateTools();
                },
                'selection:updated': function() {
                    me.updateTools();
                },
                'selection:cleared': function() {
                    me.updateTools();
                },
                'canvas:x-ready': function() {
                    me.updateTools(); // Update the tools state once canvas is ready
                },
            };
        }

        var canvas = RolandKioskPrint.AppData.getCanvas();
        canvas.on(this.onCanvasSelectionChange);
    },

    terminate: function() {
        // Unregister for canvas notifications.
        if (this.onCanvasSelectionChange) {
            var canvas = RolandKioskPrint.AppData.getCanvas();
            canvas.off(this.onCanvasSelectionChange);
        }
    },

    setSpotColorData: function(spotColorData) {
        if (!this.spotColorPanel) {
            this.spotColorPanel = this.createToolPanel('panel.spotcolorpanel');
        }

        this.spotColorPanel.getController().setSpotColorData(spotColorData);

        // Hide the spot color tool in product designer.
        var showSpotColorTool = RolandKioskPrint.AppData.isProductDesigner() ? false : true;

        this.showHideTools({
            btnSpotColorTool: showSpotColorTool
        });
    },

    getSpotColorData: function() {
        if (!this.spotColorPanel) {
            return;
        }

        return this.spotColorPanel.getController().getSpotColorData();
    },

    setCutData: function(cutData) {
        if (!this.cutPanel) {
            this.cutPanel = this.createToolPanel('panel.cutpanel');
        }

        this.cutPanel.getController().setCutData(cutData);

        // Hide the cut tool, in case the user is not allowed to create cut paths.
        var showCutTool = (cutData.userCutPathsEditable || cutData.userCutPaths == 'on');

        this.showHideTools({
            btnCutTool: showCutTool
        });
    },

    getCutData: function() {
        if (!this.cutPanel) {
            return;
        }

        return this.cutPanel.getController().getCutData();
    },

    setColorData: function(colorData) {
        if (!this.colorPanel) {
            this.colorPanel = this.createToolPanel('panel.colorpanel');
        }

        this.colorPanel.getController().setColorData(colorData);

        // Update the color tool once data has been set in.
        this.updateTools();
    },

    getColorData: function() {
        if (!this.colorPanel) {
            return;
        }

        return this.colorPanel.getController().getColorData();
    },

    setBackgroundData: function(backgroundData) {
        if (!this.backgroundPanel) {
            this.backgroundPanel = this.createToolPanel('panel.backgroundpanel');
        }

        this.backgroundPanel.getController().setBackgroundData(backgroundData);

        if (RolandKioskPrint.AppData.isProductDesigner()) {
            // Show/hide the background tool, based on whether the user is allowed to add/modify product background.
            var showBackgroundTool = (backgroundData.userBackground == 'on');

            this.showHideTools({
                btnBackgroundTool: showBackgroundTool
            });
        }
    },

    getBackgroundData: function() {
        if (!this.backgroundPanel) {
            return;
        }

        return this.backgroundPanel.getController().getBackgroundData();
    },

    setFoilColorData: function(foilColorData) {
        if (!this.foilColorPanel) {
            this.foilColorPanel = this.createToolPanel('panel.foilcolorpanel');
        }

        this.foilColorPanel.getController().setFoilColorData(foilColorData);
    },

    getFoilColorData: function() {
        if (!this.foilColorPanel) {
            return;
        }

        return this.foilColorPanel.getController().getFoilColorData();
    },

    updateTools: function() {
        var canvas = RolandKioskPrint.AppData.getCanvas();
        var disableImageTool = false,
            disableTextTool = false,
            disableClipartTool = false,
            disableColorTool = false,
            disableMetalColorTool = false,
            disableCutTool = false;

        // For product model designer, if an edit area is selected, we disable all of
        // image, text, clipart, color and cut tools. For product designer, we disable
        // the tools which don't apply to the selected edit area - text tool with image
        // area selected, for example.
        var isProductDesigner =
            (RolandKioskPrint.AppData.appMode == RolandKioskPrint.app.constants.APP_MODE_PRODUCT_DESIGNER);

        var selectedObjects = canvas.getActiveObjects();

        if (isProductDesigner) {
            if (this.hasOneOrMoreEditAreas()) {
                if (this.hasEditAreaSelection(selectedObjects)) {
                    disableImageTool = disableClipartTool = !this.canPlaceImagesOrClipartSelection(selectedObjects);
                    disableTextTool = !this.canPlaceTextSelection(selectedObjects);
                } else {
                    disableImageTool = disableClipartTool = !this.canPlaceImagesOrClipart();
                    disableTextTool = !this.canPlaceText();
                }
            }
        } else {
            if (this.hasEditAreaSelection(selectedObjects)) {
                disableImageTool = disableClipartTool = !this.canPlaceImagesOrClipartSelection(selectedObjects);
                disableTextTool = !this.canPlaceTextSelection(selectedObjects);
                disableMetalColorTool = true;
                disableCutTool = !this.canPlaceCutObjects(selectedObjects);
            }
        }

        if (!this.colorPanel) {
            this.colorPanel = this.createToolPanel('panel.colorpanel');
        }

        var colorPanelController = this.colorPanel.getController();
        disableColorTool = !colorPanelController.canApplyColor() &&
                           !colorPanelController.canApplyVarnish();

        if (!this.metalColorPanel) {
            this.metalColorPanel = this.createToolPanel('panel.metalcolorpanel');
        }

        var metalColorPanelController = this.metalColorPanel.getController();
        disableMetalColorTool = !metalColorPanelController.canApplyColor();

        // Enable/disable the tools.
        this.disableToolButton('btnImageTool', this.imagePanel, disableImageTool);
        this.disableToolButton('btnTextTool', this.textPanel, disableTextTool);
        this.disableToolButton('btnClipartTool', this.clipartPanel, disableClipartTool);
        this.disableToolButton('btnColorTool', this.colorPanel, disableColorTool);
        this.disableToolButton('btnMetalColorTool', this.metalColorPanel, disableMetalColorTool);
        this.disableToolButton('btnCutTool', this.cutPanel, disableCutTool);
    },

    hasOneOrMoreEditAreas: function() {
        var canvas = RolandKioskPrint.AppData.getCanvas();
        return (
            canvas.imageAreaList.length > 0 ||
            canvas.textAreaList.length > 0 ||
            canvas.freeAreaList.length > 0 ||
            canvas.foilAreaList.length > 0 ||
            canvas.metalAreaList.length > 0||
            canvas.cutAreaList.length > 0
        );
    },

    canPlaceImagesOrClipart: function() {
        var canvas = RolandKioskPrint.AppData.getCanvas();
        return (
            canvas.imageAreaList.length > 0 ||
            canvas.freeAreaList.length > 0 ||
            canvas.foilAreaList.length > 0 ||
            canvas.metalAreaList.length > 0||
            canvas.cutAreaList.length > 0
        );
    },

    canPlaceImagesOrClipartSelection: function(selectedObjects) {
        for (var i = 0, length = selectedObjects.length; i < length; i++) {
            var editAreaType = selectedObjects[i].editAreaType;

            if (editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_IMAGE ||
                editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_FREE ||
                editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_FOIL ||
                editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_METAL||
                editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_CUT) {
                return true;
            }
        }
        return false;
    },

    canPlaceCutObjects: function(selectedObjects) {
        for (var i = 0, length = selectedObjects.length; i < length; i++) {
            var editAreaType = selectedObjects[i].editAreaType;

            if (editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_CUT) {
                return true;
            }
        }
        return false;
    },

    canPlaceText: function() {
        var canvas = RolandKioskPrint.AppData.getCanvas();
        return (
            canvas.textAreaList.length > 0 ||
            canvas.freeAreaList.length > 0 ||
            canvas.foilAreaList.length > 0 ||
            canvas.metalAreaList.length > 0||
            canvas.cutAreaList.length > 0
        );
    },

    canPlaceTextSelection: function(selectedObjects) {
        for (var i = 0, length = selectedObjects.length; i < length; i++) {
            var editAreaType = selectedObjects[i].editAreaType;

            if (editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_TEXT ||
                editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_FREE ||
                editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_FOIL ||
                editAreaType == RolandKioskPrint.app.constants.EDIT_AREA_METAL) {
                return true;
            }
        }
        return false;
    },

    hasEditAreaSelection: function(selectedObjects) {
        for (var i = 0, length = selectedObjects.length; i < length; i++) {
            if (selectedObjects[i].editAreaType) {
                return true;
            }
        }
        return false;
    },

    disableToolButton: function(toolButtonId, toolPanel, disableTool) {
        var toolButton = this.getView().down('#' + toolButtonId);

        if (disableTool) {
            // Need to close panel if the corresponding tool is being disabled.
            if (toolPanel && toolPanel.isVisible()) {
                toolButton.toggle(false); // Unpress the tool button

                this.toggleToolPanelVisibility(toolPanel);
            }
        }

        toolButton.setDisabled(disableTool);
    },

    switchToFoilPrintUI: function() {
        var productModelData = RolandKioskPrint.AppData.productModelData;
        var isProductModelDesigner = RolandKioskPrint.AppData.isProductModelDesigner();
        var showContentTools = true;

        // Get the default foil color.
        var defaultFoilColor = RolandKioskPrint.AppData.getDefaultFoilColor();

        var foilColorData = {
            foilColorName: productModelData.foilColorName || defaultFoilColor.name,
            foilColorValue: productModelData.foilColorValue || defaultFoilColor.value,
            userFoilColorSelection: productModelData.userFoilColorSelection || 'off',
            userFoilColorSelectionEditable: isProductModelDesigner
        };

        this.setFoilColorData(foilColorData);

        this.showHideTools({
            btnImageTool: showContentTools,
            btnTextTool: showContentTools,
            btnClipartTool: showContentTools,
            btnColorTool: false,
            btnMetalColorTool: false,
            btnFoilColorTool: isProductModelDesigner || (productModelData.userFoilColorSelection == 'on'),
            btnSpotColorTool: false,
            btnCutTool: false,
            btnEditAreaTool: isProductModelDesigner
        });

        // Create the image panel as it needs to listen to image adjust changes.
        if (!this.imagePanel) {
            this.imagePanel = this.createToolPanel('panel.imagepanel');
        }
    },

    switchToMetalPrintUI: function() {
        var productModelData = RolandKioskPrint.AppData.productModelData;
        var isProductModelDesigner = RolandKioskPrint.AppData.isProductModelDesigner();
        var showContentTools = true;

        this.showHideTools({
            btnImageTool: showContentTools,
            btnTextTool: showContentTools,
            btnClipartTool: showContentTools,
            btnColorTool: false,
            btnMetalColorTool: true,
            btnFoilColorTool: false,
            btnSpotColorTool: false,
            btnCutTool: false,
            btnEditAreaTool: isProductModelDesigner
        });

        // Create the image and clipart panels as they need to listen to background change.
        if (!this.imagePanel) {
            this.imagePanel = this.createToolPanel('panel.imagepanel');
        }
        if (!this.clipartPanel) {
            this.clipartPanel = this.createToolPanel('panel.clipartpanel');
        }
    },

    switchToCutPrintUI: function(customSize) {
        var isProductModelDesigner = RolandKioskPrint.AppData.isProductModelDesigner();
        var showContentTools = !(isProductModelDesigner && customSize);

        this.showHideTools({
            btnImageTool: false,
            btnTextTool: false,
            btnClipartTool: showContentTools,
            btnColorTool: false,
            btnMetalColorTool: false,
            btnFoilColorTool: false,
            btnSpotColorTool: false,
            btnCutTool: showContentTools,
            btnEditAreaTool: (isProductModelDesigner && !customSize)
        });
    },

    showHideTools: function(options) {
        var view = this.getView();
        for (var key in options) {
            view.down('#' + key).setVisible(options[key]);
        }
    },

    onVarnishSettingsChanged: function(varnishData) {
        // For product model designer, update the color panel with current spot panel varnish data.
        var isProductModelDesigner = RolandKioskPrint.AppData.isProductModelDesigner();

        if (isProductModelDesigner && this.colorPanel) {
            var colorData = {
                varnishMaster: {
                    varnish: varnishData.varnish,
                    varnishType: varnishData.varnishType
                }
            };

            var colorPanelController = this.colorPanel.getController();
            colorPanelController.setColorData(colorData);

            // Update the color tool.
            this.updateTools();
        }
    },

    createToolPanel: function(panelType) {
        var toolPanel = Ext.create({
            xtype: panelType,
            clientView: RolandKioskPrint.AppData.isProductDesigner(),
            flex: 1
        });

        this.addToolPanelToContainer(toolPanel);
        return toolPanel;
    },

    onBackgroundToolButtonClick: function(button, e, eOpts) {
        if (!this.backgroundPanel) {
            this.backgroundPanel = this.createToolPanel('panel.backgroundpanel');
        }

        this.toggleToolPanelVisibility(this.backgroundPanel);
    },

    onImageToolButtonClick: function(button, e, eOpts) {
        if (!this.imagePanel) {
            this.imagePanel = this.createToolPanel('panel.imagepanel');
        }

        this.toggleToolPanelVisibility(this.imagePanel);
    },

    onTextToolButtonClick: function(button, e, eOpts) {
        if (!this.textPanel) {
            this.textPanel = this.createToolPanel('panel.textpanel');
        }

        this.toggleToolPanelVisibility(this.textPanel);
    },

    onClipartToolButtonClick: function(button, e, eOpts) {
        if (!this.clipartPanel) {
            this.clipartPanel = this.createToolPanel('panel.clipartpanel');
        }

        this.toggleToolPanelVisibility(this.clipartPanel);
    },

    onColorToolButtonClick: function(button, e, eOpts) {
        if (!this.colorPanel) {
            this.colorPanel = this.createToolPanel('panel.colorpanel');
        }

        this.toggleToolPanelVisibility(this.colorPanel);
    },

    onMetalColorToolButtonClick: function(button, e, eOpts) {
        if (!this.metalColorPanel) {
            this.metalColorPanel = this.createToolPanel('panel.metalcolorpanel');
        }

        this.toggleToolPanelVisibility(this.metalColorPanel);
    },

    onFoilColorToolButtonClick: function(button, e, eOpts) {
        if (!this.foilColorPanel) {
            this.foilColorPanel = this.createToolPanel('panel.foilcolorpanel');
        }

        this.toggleToolPanelVisibility(this.foilColorPanel);
    },

    onSpotColorToolButtonClick: function(button, e, eOpts) {
        if (!this.spotColorPanel) {
            this.spotColorPanel = this.createToolPanel('panel.spotcolorpanel');
        }

        this.toggleToolPanelVisibility(this.spotColorPanel);
    },

    onCutToolButtonClick: function(button, e, eOpts) {
        if (!this.cutPanel) {
            this.cutPanel = this.createToolPanel('panel.cutpanel');
        }

        this.toggleToolPanelVisibility(this.cutPanel);
    },

    onEditAreaToolButtonClick: function(button, e, eOpts) {
        if (!this.editAreaPanel) {
            this.editAreaPanel = this.createToolPanel('panel.editareapanel');
        }

        this.toggleToolPanelVisibility(this.editAreaPanel);
    },

    onZoomToolButtonClick: function(button, e, eOpts) {
        if (!this.zoomPanel) {
            this.zoomPanel = this.createToolPanel('panel.zoompanel');
        }

        this.toggleToolPanelVisibility(this.zoomPanel);
    }

});
