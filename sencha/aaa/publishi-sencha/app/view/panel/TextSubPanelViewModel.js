/*
 * File: app/view/panel/TextSubPanelViewModel.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.TextSubPanelViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.panel.textsubpanel',

    requires: [
        'Ext.app.bind.Formula'
    ],

    formulas: {
        insideCurvedPressed: {
            get: function(get) {
                return (get('placement') == 'inside')

            },
            set: function(value) {
                if (value) {
                    this.set({
                        placement: 'inside'
                    })

                }
            }
        },
        outsideCurvedPressed: {
            get: function(get) {
                return (get('placement') == 'outside')

            },
            set: function(value) {
                if (value) {
                    this.set({
                        placement: 'outside'
                    })

                }
            }
        },
        textAlignLeftPressed: {
            get: function(get) {
                return (get('textAlignment') == 'left')

            },
            set: function(value) {
                if (value) {
                    this.set({
                        textAlignment: 'left'
                    })

                }
            }
        },
        textAlignCenterPressed: {
            get: function(get) {
                return (get('textAlignment') == 'center')

            },
            set: function(value) {
                if (value) {
                    this.set({
                        textAlignment: 'center'
                    })

                }
            }
        },
        textAlignRightPressed: {
            get: function(get) {
                return (get('textAlignment') == 'right')

            },
            set: function(value) {
                if (value) {
                    this.set({
                        textAlignment: 'right'
                    })

                }
            }
        }
    }

})
