/*
 * File: app/view/panel/ProductSizeImagePanelViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.ProductSizeImagePanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panel.productsizeimagepanel',

    updateProductSizeView: function() {
        var view = this.getView().down('#productSizeView');

        var surface = view.getSurface();

        // Set surface size.
        surface.setWidth(view.getWidth());
        surface.setHeight(view.getHeight());

        // Clear all to start with.
        surface.removeAll(true);

        // Background.
        this.drawBackground(surface);

        // Horizontal and vertical bars.
        if (this.shouldDrawAxisBars) {
            this.drawAxisBars(surface);
        }

        // Draw the product size image.
        this.drawProductSizeImage(surface);

        // Finally, render the frame.
        surface.renderFrame();
    },

    drawBackground: function(surface) {
        surface.add({
            type: 'rect',
            x: 0,
            y: 0,
            width: surface.getWidth(),
            height: surface.getHeight(),
            fillStyle: '#E6E7E8',
        });
    },

    drawAxisBars: function(surface) {
        var surfaceWidth = surface.getWidth();
        var surfaceHeight = surface.getHeight();

        var barSize = this.barSize;

        // Corner.
        surface.add({
            type: 'rect',
            x: 0,
            y: 0,
            width: barSize,
            height: barSize,
            fillStyle: '#FFFFFF'
        }).show(true);

        // Horizontal and vertical bars.
        surface.add({
            type: 'rect',
            x: barSize + 1,
            y: 0,
            width: surfaceWidth - barSize - 2,
            height: barSize,
            fillStyle: '#FFFFFF'
        }).show(true);

        surface.add({
            type: 'rect',
            x: 0,
            y: barSize + 1,
            width: barSize,
            height: surfaceHeight - barSize - 1,
            fillStyle: '#FFFFFF'
        }).show(true);

        surface.add({
            type: 'line',
            fromX: 0,
            fromY: barSize + 0.5,
            toX: surfaceWidth - 1,
            toY: barSize + 0.5,
            strokeStyle: '#B5B7BB',
            lineWidth: 1
        });

        surface.add({
            type: 'line',
            fromX: barSize + 0.5,
            fromY: 0,
            toX:  barSize + 0.5,
            toY: surfaceHeight,
            strokeStyle: '#B5B7BB',
            lineWidth: 1
        });

        surface.add({
            type: 'line',
            fromX: surfaceWidth - 0.5,
            fromY: 0,
            toX:  surfaceWidth - 0.5,
            toY: surfaceHeight,
            strokeStyle: '#B5B7BB',
            lineWidth: 1
        });
    },

    drawProductSizeImage: function(surface) {
        var surfaceWidth = surface.getWidth();
        var surfaceHeight = surface.getHeight();

        var gapSize = this.gapSize;
        var barSize = (this.shouldDrawAxisBars) ? this.barSize : 0;

        var imageWidth = this.imageWidth;
        var imageHeight = this.imageHeight;

        var usableWidth = surfaceWidth - barSize - gapSize * 2;
        var usableHeight = surfaceHeight - barSize - gapSize * 2;

        var rx = usableWidth / imageWidth;
        var ry = usableHeight / imageHeight;

        var rr,
            tx,
            ty;

        if (rx < ry) {
            rr = rx;
            tx = 0;
            ty = (usableHeight - imageHeight * rr) / 2;
        } else {
            rr = ry;
            tx = (usableWidth - imageWidth * rr) / 2;
            ty = 0;
        }

        var startX = barSize + gapSize;
        var startY = startX;

        var imageUrl = this.getProductSizeImageUrl();

        // Draw the product size image.
        surface.add({
            type: 'image',
            src: imageUrl,
            x: startX + tx,
            y: startY + ty,
            width: imageWidth * rr,
            height: imageHeight * rr
        }).show(true);
    },

    setDrawAxisBars: function(value) {
        this.shouldDrawAxisBars = value;
    },

    init: function() {
        this.shouldDrawAxisBars = true; // Whether to draw axis bars or not

        this.barSize = 18; // Height/width of axis bars
        this.gapSize = 20; // Minimum gap to leave on all sides

        // HACK: Hardcoded size of ProductCustomSize.png
        this.imageWidth = 634;
        this.imageHeight = 589;
    },

    getProductSizeImageUrl: function() {
        // The product size image is different for different locales.
        // Pick the right image based on the cotodesign UI locale.

        var curPrefLang = 'en';

        if (RolandKioskPrint.AppData.isProductDesigner()) {
            curPrefLang = RolandKioskPrint.app.getPrefClientLanguage();
            if (!RolandKioskPrint.app.isSystemLanguage(curPrefLang)) {
                curPrefLang = 'en';
            }
        } else {
            curPrefLang = RolandKioskPrint.app.getPrefLanguage();
        }

        var imgUrl = 'resources/images/lang-specific/' + curPrefLang + '/ProductCustomSize.png';

        return imgUrl;
    },

    onDrawAfterLayout: function(container, layout, eOpts) {
        this.updateProductSizeView();
    }

});
