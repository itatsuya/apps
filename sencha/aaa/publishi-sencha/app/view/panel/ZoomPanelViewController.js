/*
 * File: app/view/panel/ZoomPanelViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.panel.ZoomPanelViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.panel.zoompanel',

    updatePanel: function() {
        var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel()

        var currentZoom = canvasPanel.getController().getZoom()


        this.suppressEvents = true


        this.setData(
            currentZoom == RolandKioskPrint.app.constants.MAX_ZOOM_LEVEL, // No zoom-in
            currentZoom == RolandKioskPrint.app.constants.MIN_ZOOM_LEVEL, // No zoom-out
            currentZoom <= 1 // No navigator
        )


        var isPreviewCanvasShown = canvasPanel.getController().isPreviewCanvasShown()

        var chkShowHideNavigator = this.getView().down('#chkShowHideNavigator')

        chkShowHideNavigator.setValue(isPreviewCanvasShown)


        this.suppressEvents = false

    },

    getNextZoomLevel: function(zoomLevel) {
        var zoomLevels = RolandKioskPrint.app.constants.ZOOM_LEVELS

        var indexOfZoom = zoomLevels.indexOf(zoomLevel)


        if (indexOfZoom < zoomLevels.length - 1) {
            zoomLevel = zoomLevels[indexOfZoom + 1]

        }
        return zoomLevel

    },

    getPrevZoomLevel: function(zoomLevel) {
        var zoomLevels = RolandKioskPrint.app.constants.ZOOM_LEVELS

        var indexOfZoom = zoomLevels.indexOf(zoomLevel)


        if (indexOfZoom > 0) {
            zoomLevel = zoomLevels[indexOfZoom - 1]

        }
        return zoomLevel

    },

    setData: function(zoomInDisabled, zoomOutDisabled, navigatorDisabled) {
        this.getViewModel().setData({
            zoomInDisabled: zoomInDisabled,
            zoomOutDisabled: zoomOutDisabled,
            navigatorDisabled: navigatorDisabled
        })

    },

    onZoomInButtonClick: function(button, e, eOpts) {
        var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel()

        var currentZoom = canvasPanel.getController().getZoom()


        var maxZoomLevel = RolandKioskPrint.app.constants.MAX_ZOOM_LEVEL

        var newZoomLevel = this.getNextZoomLevel(currentZoom)


        if (newZoomLevel != currentZoom) {
            // Set the new canvas zoom level.
            canvasPanel.getController().setZoom(newZoomLevel)


            this.setData(newZoomLevel == maxZoomLevel, false, newZoomLevel <= 1)

        }
    },

    onZoomOutButtonClick: function(button, e, eOpts) {
        var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel()

        var currentZoom = canvasPanel.getController().getZoom()


        var minZoomLevel = RolandKioskPrint.app.constants.MIN_ZOOM_LEVEL

        var newZoomLevel = this.getPrevZoomLevel(currentZoom)


        if (newZoomLevel != currentZoom) {
            // Set the new canvas zoom level.
            canvasPanel.getController().setZoom(newZoomLevel)


            this.setData(false, newZoomLevel == minZoomLevel, newZoomLevel <= 1)

        }
    },

    onShowHideNavigatorChange: function(field, newValue, oldValue, eOpts) {
        if (this.suppressEvents) {
            return

        }

        var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel()

        canvasPanel.getController().showHidePreviewCanvas(newValue)


        if (newValue) {
            canvasPanel.getController().refreshPreviewPanel()

        }
    },

    onPanelShow: function(component, eOpts) {
        this.updatePanel()

    }

})

