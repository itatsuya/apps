/*
 * File: app/view/ProductDesignerCheckViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ProductDesignerCheckViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.productdesignercheck',

    populateSpecialEffects: function(modelData) {
        var storeData = []


        if (modelData.primer == 'on') {
            storeData.push({
                effectThumbPath: 'resources/images/SpecialEffect_Primer.png',
                effectName: RolandKioskPrint.app.getString('label.designer.primerSpotName')
            })

        }

        if (modelData.white == 'on') {
            storeData.push({
                effectThumbPath: 'resources/images/SpecialEffect_White.png',
                effectName: RolandKioskPrint.app.getString('label.designer.whiteSpotName')
            })

        }

        if (modelData.varnish == 'on') {
            if (modelData.varnishType == RolandKioskPrint.app.constants.GLOSS_VARNISH) {
                storeData.push({
                    effectThumbPath: 'resources/images/SpecialEffect_Gloss.png',
                    effectName: RolandKioskPrint.app.getString('label.designer.varnishTypeGloss')
                })

            } else if (modelData.varnishType == RolandKioskPrint.app.constants.MATTE_VARNISH) {
                storeData.push({
                    effectThumbPath: 'resources/images/SpecialEffect_Matte.png',
                    effectName: RolandKioskPrint.app.getString('label.designer.varnishTypeMatte')
                })

            }
        }

        if (modelData.backPrint == 'on') {
            storeData.push({
                effectThumbPath: 'resources/images/SpecialEffect_ReversePrint.png',
                effectName: RolandKioskPrint.app.getString('label.designer.backPrintSpotName')
            })

        }

        var specialEffectView = this.getView().down('#specialEffectView')

        specialEffectView.getStore().setData(storeData)


        var pnlSpecialEffect = this.getView().down('#pnlSpecialEffect')

        if (storeData.length !== 0) {
            pnlSpecialEffect.show()

        } else {
            pnlSpecialEffect.hide()

        }
    },

    populatePrintTypes: function(modelData) {
        var storeData = []


        if (RolandKioskPrint.app.isColorPrintModel(modelData)) {
            storeData.push({
                printTypeThumbPath: 'resources/images/PrintType_Color.png',
                printTypeName: RolandKioskPrint.app.getString('label.designer.color')
            })

        }

        if (RolandKioskPrint.app.isFoilPrintModel(modelData)) {
            storeData.push({
                printTypeThumbPath: 'resources/images/PrintType_Foil.png',
                printTypeName: RolandKioskPrint.app.getString('label.designer.foil')
            })

        }

        if (RolandKioskPrint.app.isMetalPrintModel(modelData)) {
            storeData.push({
                printTypeThumbPath: 'resources/images/PrintType_Metal.png',
                printTypeName: RolandKioskPrint.app.getString('label.designer.metal')
            })

        }

        if (RolandKioskPrint.app.isCutPrintModel(modelData)) {
            storeData.push({
                printTypeThumbPath: 'resources/images/PrintType_Cut.png',
                printTypeName: RolandKioskPrint.app.getString('label.designer.cut')
            })

        }

        var printTypeView = this.getView().down('#printTypeView')

        printTypeView.getStore().setData(storeData)

    },

    onBackButtonClick: function(button, e, eOpts) {
        this.redirectTo('#client/catalog', true)

    },

    onNextButtonClick: function(button, e, eOpts) {
        // Check for USB dongle.
        var me = this

        var promise = RolandKioskPrint.AppData.isDongleValid()


        promise.then(function() {
            me.redirectTo('#client/editcontent', true)

        }, function(connectionError) {
            var message

            if (connectionError) {
                message = RolandKioskPrint.app.getString('message.pd.openingProductModelFailed')

            } else {
                message = RolandKioskPrint.app.getString('message.generic.clientNotWorking') +
                ' ' +
                Ext.String.format(RolandKioskPrint.app.getString('message.generic.contactStaff'), '0x000001')

            }
            Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'), message)

        })

    },

    onMainViewBeforeShow: function(component, eOpts) {
        var productModelData = RolandKioskPrint.AppData.productModelData


        // Split the product model display name into category/sub-category part names.
        var partNames = productModelData.modelDisplayName.split('.'),
            length = partNames.length


        var categoryName = '',
            subCategory1Name = '',
            subCategory2Name = '',
            productName = ''


        if (length > 1) {
            // Starts with category.
            categoryName = partNames[0]

        }

        if (length >= 1) {
            // Last part is product name.
            productName = partNames[partNames.length - 1]

        }

        if (length >= 3) {
            subCategory1Name = partNames[1]

        }

        if (length == 4) {
            subCategory2Name = partNames[2]

        }

        // Set data on the view model.
        this.getViewModel().setData({
            categoryName: categoryName,
            subCategory1Name: subCategory1Name,
            subCategory2Name: subCategory2Name,
            showSubCategory2: (subCategory2Name !== ''),
            productName: productName,
            productDescription: productModelData.modelDescription
        })


        var imgProductDesign = this.getView().down('#imgProductDesign')

        var url = "url('" + RolandKioskPrint.AppData.getURLWithNonce(productModelData.modelThumbPath) + "')"


        imgProductDesign.setStyle({
            backgroundImage: url,
            backgroundRepeat: 'no-repeat',
            backgroundSize: 'contain',
            backgroundPosition: 'center center'
        })


        // Set the special effects.
        this.populateSpecialEffects(productModelData)


        // Set the print types.
        this.populatePrintTypes(productModelData)

    },

    onMainViewAfterRender: function(component, eOpts) {
        var navPanel = this.getView().down('#navPanel')

        navPanel.getController().setCurrentStep(RolandKioskPrint.app.constants.CHECK_STEP)


        // Reduce font size to prevent truncation on special effects items.
        var curPrefLang = RolandKioskPrint.app.getPrefClientLanguage()

        if (curPrefLang == 'es' || curPrefLang == 'pt') {
            Ext.util.CSS.updateRule('div.check-special-effects-item-wrap span', 'font-size', '8px')

        }

        // Create the print types store.
        var store = Ext.create('Ext.data.ArrayStore', {
            // store configs
            storeId: 'printTypes',
            // reader configs
            fields: [
            {
                type: 'string',
                name: 'printTypeThumbPath'
            },
            {
                type: 'string',
                name: 'printTypeName'
            }
            ],
            data: []
        })


        var printTypeView = this.getView().down('#printTypeView')

        printTypeView.setStore(store)

    }

})

