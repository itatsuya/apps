/*
 * File: app/view/ProductModelDesignerContentViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ProductModelDesignerContentViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.productmodeldesignercontent',

    listen: {
        controller: {
            productmodeldesignersave: {
                productModelSaved: 'onProductModelSaved'
            }
        }
    },

    saveProductModel: function() {
        var modelData = RolandKioskPrint.AppData.productModelData;
        var canvasPanel = this.getView().down('#canvasPanel');
        var canvasPanelController = canvasPanel.getController();

        // Get the spot color data.
        var toolsPanel = this.getView().down('#toolsPanel');
        var toolsPanelController = toolsPanel.getController();

        var spotColorData = toolsPanelController.getSpotColorData();
        var cutData = toolsPanelController.getCutData();
        var foilColorData = toolsPanelController.getFoilColorData();
        var backgroundData = toolsPanelController.getBackgroundData();
        var colorData = toolsPanelController.getColorData();

        var modelTemplateData = {
            version: RolandKioskPrint.app.version,
            source: modelData.source || 'Designer',
            unitsCreated: modelData.unitsCreated,
            productWidth: modelData.productWidth,
            productHeight: modelData.productHeight,
            leftMargin: modelData.leftMargin,
            rightMargin: modelData.rightMargin,
            topMargin: modelData.topMargin,
            bottomMargin: modelData.bottomMargin,
            cornerRadius: modelData.cornerRadius,
            primer: spotColorData.primer,
            white: spotColorData.white,
            varnish: spotColorData.varnish,
            varnishType: spotColorData.varnishType,
            backPrint: spotColorData.backPrint,
            userCutPaths: cutData.userCutPaths,
            userBackground: backgroundData.userBackground,
            goodsCode: modelData.goodsCode, // Updated on the product model save screen
            goodsName: modelData.goodsName,
            pricePerUnit: modelData.pricePerUnit,
            currency: modelData.currency,
            customSize: modelData.customSize,
            printType: modelData.printType,
            varnishSettings: colorData.varnishSettings
        };

        if (modelData.isFoilPrint()) {
            modelTemplateData.foilColorName = foilColorData.foilColorName;
            modelTemplateData.foilColorValue = foilColorData.foilColorValue;
            modelTemplateData.powerValue = modelData.powerValue || RolandKioskPrint.app.constants.FOIL_PRINT_POWER_DEFAULT;
            modelTemplateData.printingMessage = modelData.printingMessage || '';
            modelTemplateData.userFoilColorSelection = foilColorData.userFoilColorSelection;
            modelTemplateData.offsetX = modelData.offsetX;
            modelTemplateData.offsetY = modelData.offsetY;
            modelTemplateData.foilEnableOutline = modelData.foilEnableOutline;
        }

        if (modelData.isMetalPrint()) {
            modelTemplateData.material = modelData.material;
            modelTemplateData.materialColor = modelData.materialColor;
            modelTemplateData.markingMode = modelData.markingMode;
            modelTemplateData.bidiPrint = modelData.bidiPrint;
            modelTemplateData.enableOutline = modelData.enableOutline;
            modelTemplateData.offsetX = modelData.offsetX;
            modelTemplateData.offsetY = modelData.offsetY;
            modelTemplateData.printingMessage = modelData.printingMessage || '';
        }

        if (modelData.isCutPrint()) {
            modelTemplateData.cutMaterial = modelData.cutMaterial;
            modelTemplateData.cutMaterialColorName = modelData.cutMaterialColorName;
            modelTemplateData.cutMaterialColor = modelData.cutMaterialColor;
        }

        // Get the design and thumb data.
        var designJSON = canvasPanelController.getJSON({
            // Keeping includeDefaultValues as true.
            // While this increases the JSON size, this prevents a bug with fabric
            // path groups not able to keep the default fill value on contained paths.
            //includeDefaultValues: false,
            includeDefaultValues: true
        });

        var thumb = canvasPanelController.getThumbnail({
            suppressEditAreas: false
        });

        var productModelData = {
            modelName: modelData.modelName, // Updated on the product model save screen
            modelTemplate: modelTemplateData,
            modelDesign: designJSON,
            modelThumb: thumb,
            modelImport: (RolandKioskPrint.AppData.productModelDesignerMode == RolandKioskPrint.app.constants.PRODUCT_MODEL_IMPORT) &&
            (modelData.modelDesignSVGPath !== '')
        };

        var widget = Ext.widget('productmodeldesignersave');
        widget.getViewModel().setData(productModelData);
        RolandKioskPrint.app.showModalView(widget);
    },

    closeDesigner: function() {
        // Clear the canvas, preparing for the next product model design.
        var canvasPanel = this.getView().down('#canvasPanel');
        canvasPanel.getController().terminate();

        var toolsPanel = this.getView().down('#toolsPanel');
        toolsPanel.getController().terminate();

        this.fireEvent('designerClosed');
    },

    onProductModelSaved: function() {
        this.closeDesigner();
    },

    onSmartGuideChange: function(field, newValue, oldValue, eOpts) {
        RolandKioskPrint.AppData.setSmartGuide(newValue);
    },

    onCancelButtonClick: function(button, e, eOpts) {
        var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel();
        var canvasPanelController = canvasPanel.getController();

        // Exit clip mode if active.
        canvasPanelController.endClipping();

        if (canvasPanelController.isCanvasDirty()) {
            // Confirm with the user.
            Ext.Msg.confirm(RolandKioskPrint.app.getString('message.generic.confirmation'),
            RolandKioskPrint.app.getString('message.designer.closeDesignerWarning'),
            function(btnText) {
                if (btnText == 'yes') {
                    this.redirectTo('#template/main', true);
                    this.closeDesigner();
                }
            }, this);
        } else {
            this.redirectTo('#template/main', true);
            this.closeDesigner();
        }
    },

    onSaveButtonClick: function(button, e, eOpts) {
        var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel();
        var canvasPanelController = canvasPanel.getController();

        // Exit clip mode if active.
        canvasPanelController.endClipping();

        // For foil and metal print, check:
        // 1. If atleast one edit area of the corresponding type has been added.
        // 2. The content does not go beyond the printable area.
        var modelData = RolandKioskPrint.AppData.productModelData;
        if (modelData.isFoilPrint()) {
            var editAreas = canvasPanelController.getEditAreasByType(RolandKioskPrint.app.constants.EDIT_AREA_FOIL);
            if (editAreas.length === 0) {
                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.alert'),
                RolandKioskPrint.app.getString('message.designer.foilNoEditArea'));
                return;
            }

            if (canvasPanelController.contentExceedsPrintableArea(RolandKioskPrint.app.constants.PRINT_TYPE_FOIL)) {
                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.alert'),
                RolandKioskPrint.app.getString('message.designer.foilContentExceedsPrintableArea'));
                return;
            }
        } else if (modelData.isMetalPrint()) {
            var editAreas = canvasPanelController.getEditAreasByType(RolandKioskPrint.app.constants.EDIT_AREA_METAL);
            if (editAreas.length === 0) {
                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.alert'),
                RolandKioskPrint.app.getString('message.designer.foilNoEditArea')); // Reusing this generic message for metal print
                return;
            }

            if (canvasPanelController.contentExceedsPrintableArea(RolandKioskPrint.app.constants.PRINT_TYPE_METAL)) {
                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.alert'),
                RolandKioskPrint.app.getString('message.designer.metalContentExceedsPrintableArea'));
                return;
            }
        } else if (canvasPanelController.cutContentExceedsPrintableArea(false)) { // Check if cut content exceeds printable area.
            Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.alert'),
            RolandKioskPrint.app.getString('message.designer.cutContentExceedsPrintableArea'));
            return;
        }

        var hasLowResImages = canvasPanelController.getHasLowResImages();
        if (hasLowResImages) {
            var me = this;
            Ext.Msg.show({
                title: RolandKioskPrint.app.getString('message.generic.warning'),
                msg: RolandKioskPrint.app.getString('message.designer.lowResolutionWarning'),
                buttonText: {
                    yes: RolandKioskPrint.app.getString('label.button.yes'),
                    no: RolandKioskPrint.app.getString('label.button.no')
                },
                fn: function(buttonValue, inputText, showConfig) {
                    if (buttonValue == 'yes') {
                        me.saveProductModel();
                    }
                },
                icon: Ext.MessageBox.WARNING
            });
            return;
        }

        this.saveProductModel();
    },

    onMainViewBeforeShow: function(component, eOpts) {
        var mode = RolandKioskPrint.AppData.productModelDesignerMode;
        var productModelData = RolandKioskPrint.AppData.productModelData;

        // Set the view model data.
        var viewData = {
            designerMode: mode,
            modelName: productModelData.modelName
        };

        this.getViewModel().setData(viewData);

        // Set the product size data on the canvas.
        var canvasPanel = this.getView().down('#canvasPanel');

        var productSizeData = {
            widthMM: productModelData.productWidth,
            heightMM: productModelData.productHeight,
            leftMarginMM: productModelData.leftMargin,
            rightMarginMM: productModelData.rightMargin,
            topMarginMM: productModelData.topMargin,
            bottomMarginMM: productModelData.bottomMargin,
            cornerRadiusMM: productModelData.cornerRadius
        };

        var canvasPanelController = canvasPanel.getController();
        if (mode == RolandKioskPrint.app.constants.PRODUCT_MODEL_IMPORT) {
            canvasPanelController.initializeWithSVG(this.getView(),
            productSizeData,
            productModelData.modelDesignSVG,
            productModelData.modelDesignSVGPath,
            productModelData.defaultSpecialColor);
        } else {
            canvasPanelController.initialize(this.getView(), productSizeData, productModelData.modelDesignPath);
        }

        // Get the designer canvas, and set as active.
        var canvas = canvasPanel.getController().getCanvas();

        RolandKioskPrint.AppData.setDesignerView(this.getView());
        RolandKioskPrint.AppData.setActiveCanvas(canvas);
        RolandKioskPrint.AppData.setActiveCanvasPanel(canvasPanel);

        var undoRedoPanel = this.getView().down('#undoRedoPanel');
        RolandKioskPrint.AppData.setUndoRedoPanel(undoRedoPanel);

        var miscPanel = this.getView().down('#miscPanel');
        RolandKioskPrint.AppData.setMiscPanel(miscPanel);

        // Initialize the tools panel.
        var toolsPanel = this.getView().down('#toolsPanel');
        toolsPanel.getController().initialize(productModelData.customSize);
        RolandKioskPrint.AppData.setToolsPanel(toolsPanel);

        // Set the spot color data.
        var spotColorData = {
            primer: productModelData.primer || 'off',
            white: productModelData.white || 'off',
            varnish: productModelData.varnish || 'off',
            varnishType: productModelData.varnishType || RolandKioskPrint.app.constants.GLOSS_VARNISH,
            backPrint: productModelData.backPrint || 'off'
        };

        toolsPanel.getController().setSpotColorData(spotColorData);

        // Set the cut data.
        var cutData = {
            userCutPaths: productModelData.userCutPaths || 'off',
            userCutPathsEditable: !productModelData.isCutPrint(),
            customSize: productModelData.customSize
        };

        toolsPanel.getController().setCutData(cutData);

        // Set the color data.
        var colorData = {
            varnishSettings: productModelData.varnishSettings,
            varnishMaster: {
                varnish: productModelData.varnish || 'off',
                varnishType: productModelData.varnishType || RolandKioskPrint.app.constants.GLOSS_VARNISH
            }
        };

        if (!colorData.varnishSettings) {
            colorData.varnishSettings = {
                applyToAll: false,
                varnishStatus: false,
                textureType: ''
            };
        }

        toolsPanel.getController().setColorData(colorData);

        // Set the background data.
        var backgroundData = {
            userBackground: productModelData.userBackground || 'off',
            userBackgroundEditable: true
        };

        toolsPanel.getController().setBackgroundData(backgroundData);

        var printType = productModelData.printType;
        if (Array.isArray(printType)) {
            printType = printType[0];
        }
        RolandKioskPrint.AppData.setActivePrintType(printType);

        if (printType == RolandKioskPrint.app.constants.PRINT_TYPE_FOIL) {
            toolsPanel.getController().switchToFoilPrintUI();

            // Show Alert Message "Non Printable Area".
            RolandKioskPrint.app.displayMessage({
                title: RolandKioskPrint.app.getString('message.generic.alert'),
                msg: RolandKioskPrint.app.getString('message.designer.nonPrintableArea'),
                buttons: Ext.Msg.OK
            });

        } else if (printType == RolandKioskPrint.app.constants.PRINT_TYPE_METAL) {
            toolsPanel.getController().switchToMetalPrintUI();
        } else if (printType == RolandKioskPrint.app.constants.PRINT_TYPE_CUT) {
            toolsPanel.getController().switchToCutPrintUI(productModelData.customSize);
        }

        // Notify before show event.
        var actionPanelContainer = this.getView().down('#actionPanelContainer');
        var actionPanels = actionPanelContainer.items.getRange();

        actionPanels.forEach(function(panel) {
            if (panel.getController().parentBeforeShow) {
                panel.getController().parentBeforeShow();
            }
        });

        // Initialize smart guide
        var chkSmartGuide = this.getView().down('#chkSmartGuide');
        chkSmartGuide.setValue(true);
        RolandKioskPrint.AppData.setSmartGuide(true);
    },

    onMainViewShow: function(component, eOpts) {
        var actionPanelContainer = this.getView().down('#actionPanelContainer');
        var actionPanels = actionPanelContainer.items.getRange();

        actionPanels.forEach(function(panel) {
            if (panel.getController().parentShown) {
                panel.getController().parentShown();
            }
        });

        //activate keymap
        this.keyMap.enable();

        var imagePanel = this.getView().down('panel\\.imagepanel');
        if (imagePanel){
            imagePanel.getController().initialize();
        }

        var clipartPanel = this.getView().down('panel\\.clipartpanel');
        if (clipartPanel) {
            clipartPanel.getController().initialize();
        }
    },

    onMainViewHide: function(component, eOpts) {
        var actionPanelContainer = this.getView().down('#actionPanelContainer');
        var actionPanels = actionPanelContainer.items.getRange();

        actionPanels.forEach(function(panel) {
            if (panel.getController().parentHidden) {
                panel.getController().parentHidden();
            }
        });

        //deactivate keymap
        this.keyMap.disable();

        RolandKioskPrint.view.window.HelpWindowViewController.closeHelp();
    },

    showHelp: function(owner, tool, event) {
        var curPrefLang = RolandKioskPrint.app.getPrefLanguage();
        var helpSrc = 'resources/help/' + curPrefLang + '/cotodesignTemplate/edit_top.html';
        RolandKioskPrint.view.window.HelpWindowViewController.showHelp(
        helpSrc, 'pmd-mld-help-window', 450);
    },

    onPanelAfterRender: function(component, eOpts) {
        // Add handler for Delete key.
        var keyMap = new Ext.util.KeyMap({
            target: document,
            binding: [{
                key: [46],
                fn: function (key, e) {
                    // If a text field/area has the focus, go with the default handling.
                    if (document.activeElement) {
                        var elemType = document.activeElement.type;
                        if (elemType == 'text' || elemType == 'textarea') {
                            return;
                        }
                    }

                    var miscPanel = RolandKioskPrint.AppData.getMiscPanel();
                    miscPanel.getController().onDelete();
                }
            }]
        });
        keyMap.disable();

        this.keyMap = keyMap;
    }

});
