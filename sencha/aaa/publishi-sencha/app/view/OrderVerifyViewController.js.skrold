/*
 * File: app/view/OrderVerifyViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.OrderVerifyViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.orderverify',

    setOrderData: function(orderData) {
        this.orderData = orderData;
    },

    submitOrder: function() {
        var view = this.getView();
        var orderData = this.orderData;

        view.getEl().mask(RolandKioskPrint.app.getString('message.designer.submittingOrder'));


        // For efficiency, change this to a multi-part request, one part order JSON, one part SVG.
        // Currently, we were making SVG data a part of JSON using data URI with base64 encoding.

        var svg = orderData.productDesign;
        delete orderData.productDesign;

        var formData = new FormData();
        formData.append("orderData", new Blob([JSON.stringify(orderData)], {type: 'application/json'}));
        formData.append("productDesign", new Blob([svg], {type: 'image/svg+xml'}));

        // Upload the product design to server.
        Ext.Ajax.request({
            scope: this,
            method: 'POST',
            url: RolandKioskPrint.app.constants.ORDER_DATA_URL,
            rawData: formData,
            headers: {
                'Content-Type': null // To use content type of FormData
            },
            timeout: 240*1000,
            success: function(response, opts) {
                view.getEl().unmask();

                var responseData = Ext.decode(response.responseText);
                if (!responseData || !responseData.success) {
                    var msg = RolandKioskPrint.app.getString('message.designer.orderSubmissionFailed');
                    if (responseData.errorType == 1) {
                        // Notdef glyph found.
                        msg += '<br>' + RolandKioskPrint.app.getString('message.designer.missingGlyphs');
                    }

                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'), msg);
                    return;
                }

                var orderConfData = {
                    orderNumber: responseData.productOrderId
                };

                var orderConfirmationView = Ext.ComponentQuery.query('#orderConfirmationView')[0];
                orderConfirmationView.getViewModel().setData(orderConfData);

                RolandKioskPrint.app.destroyModalView(view);
                this.redirectTo('#order/confirmation', true);
            },
            failure: function() {
                view.getEl().unmask();
                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                              RolandKioskPrint.app.getString('message.designer.orderSubmissionFailed'));
            }
        });
    },

    onCloseButtonClick: function(button, e, eOpts) {
        RolandKioskPrint.app.destroyModalView(this.getView());
    },

    onOrderButtonClick: function(button, e, eOpts) {
        this.submitOrder();

        // Reset image upload disclaimer flags.
        window.isAgreedImageUploadDisclaimer = false;
        window.isAgreedBackgroudImageUploadDisclaimer = false;
    },

    onPanelBeforeShow: function(component, eOpts) {
        var orderVerifyView = this.getView();
        var orderData = this.orderData;

        // Split the product model name into category/sub-category part names.
        var partNames = orderData.modelDisplayName.split('.'),
            length = partNames.length;

        var categoryName = '',
            subCategory1Name = '',
            subCategory2Name = '',
            productName = '';

        if (length > 1) {
            // Starts with category.
            categoryName = partNames[0];
        }

        if (length >= 1) {
            // Last part is product name.
            productName = partNames[partNames.length - 1];
        }

        if (length >= 3) {
            subCategory1Name = partNames[1];
        }

        if (length == 4) {
            subCategory2Name = partNames[2];
        }

        // Set data on the view model.
        this.getViewModel().setData({
            categoryName: categoryName,
            subCategory1Name: subCategory1Name,
            subCategory2Name: subCategory2Name,
            showSubCategory2: (subCategory2Name !== ''),
            productName: productName,
            quantity: orderData.quantity,
            goodsCode: orderData.goodsCode,
            pricePerUnit: orderData.pricePerUnit,
            currency: orderData.currency
        });

        // Hide Price.
        var catalogUISettingsData = RolandKioskPrint.AppData.getCatalogUISettingsData() || {};
        if (catalogUISettingsData.hidePriceOnCatalog) {
            var priceInfoPanel = this.getView().down('#priceInfoPanel');
            priceInfoPanel.hide();
        }

        var imgProductDesign = orderVerifyView.down('#imgProductDesign');
        var url = "url('" + orderData.productDesignThumb + "')";

        imgProductDesign.setStyle({
            backgroundImage: url,
            backgroundRepeat: 'no-repeat',
            backgroundSize: 'contain',
            backgroundPosition: 'center center'
        });
    },

    onPanelAfterRender: function(component, eOpts) {
        RolandKioskPrint.app.setUiSettings(this.getView(), 'panel');
    }

});
