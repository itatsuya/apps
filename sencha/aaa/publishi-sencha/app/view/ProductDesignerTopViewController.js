/*
 * File: app/view/ProductDesignerTopViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ProductDesignerTopViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.productdesignertop',

    setCompBackgroundImage: function(component, imageUrl) {
        var url = "url('" + RolandKioskPrint.AppData.getURLWithNonce(imageUrl) + "')"


        component.setStyle({
            backgroundImage: url,
            backgroundRepeat: 'no-repeat',
            backgroundSize: 'contain',
            backgroundPosition: 'center center'
        })

    },

    setCarouselPanelBackground: function(imageUrl, imageArrangement) {
        var carouselPanel = this.getView().down('#carouselPanel')


        var url = "url('" + imageUrl + "')"

        var bgRepeat = 'no-repeat'

        var bgSize = 'auto'

        var bgPosition = 'center'


        switch (imageArrangement) {
            case 'FIT':
                bgSize = 'contain'

                break

            case 'FILL':
                bgSize = 'cover'

                break

            case 'TILED':
                bgRepeat = 'repeat'

                break

        }

        carouselPanel.setBodyStyle('background-image', url)

        carouselPanel.setBodyStyle('background-repeat', bgRepeat)

        carouselPanel.setBodyStyle('background-size', bgSize)

        carouselPanel.setBodyStyle('background-position', bgPosition)

    },

    getTopScreenConfiguration: function() {
        Ext.Ajax.request({
            scope: this,
            url: 'resources/top-screen/top_config.json',
            async: false,
            success: function(response, opts) {
                var configData = Ext.decode(response.responseText)

                configData.curCarouselIndex = 0

                this.getViewModel().setData(configData)

            },
            failure: function(response, opts) {
                Ext.toast(RolandKioskPrint.app.getString('message.pd.topConfigReadFailed', true))

            }
        })

    },

    setBackgroundImages: function() {
        var softwareLogo = this.getView().down('#softwareLogo')

        this.setCompBackgroundImage(softwareLogo, 'resources/images/RolandBanner.png')


        var configData = this.getViewModel().getData()


        if (configData.companyLogo) {
            var companyLogo = this.getView().down('#companyLogo')

            this.setCompBackgroundImage(companyLogo, configData.companyLogo)

        }

        var opacity = configData.carousel.opacity ? configData.carousel.opacity : 0

        if (opacity > 1) {
            opacity = 1

        } else if (opacity < 0) {
            opacity = 0

        }

        var bgColor = 'rgba(255, 255, 255,' +  (1 - opacity) + ')'


        var leftButtonPanel = this.getView().down('#leftButtonPanel')

        leftButtonPanel.setBodyStyle('background-color', bgColor)


        var centerDummyPanel = this.getView().down('#centerDummyPanel')

        centerDummyPanel.setBodyStyle('background-color', bgColor)


        var rightButtonPanel = this.getView().down('#rightButtonPanel')

        rightButtonPanel.setBodyStyle('background-color', bgColor)


        if (configData.carousel.images) {
            this.setCarouselPanelBackground(configData.carousel.images[configData.curCarouselIndex],
                                            configData.carousel.imageArrangement)

        }
    },

    changeCarouselImage: function(showPrevious) {
        var configData = this.getViewModel().getData()


        if (configData.carousel.images) {
            var numImages = configData.carousel.images.length

            var newCarouselIndex

            if (showPrevious) {
                newCarouselIndex = (configData.curCarouselIndex + numImages - 1) % numImages

            } else {
                newCarouselIndex = (configData.curCarouselIndex + 1) % numImages

            }

            this.setCarouselPanelBackground(configData.carousel.images[newCarouselIndex],
                                            configData.carousel.imageArrangement)

            this.getViewModel().set('curCarouselIndex', newCarouselIndex)

        }
    },

    clearScreenSaverTimeout: function() {
        var timeOutEnabled = this.getViewModel().get('timeOutEnabled')

        if (timeOutEnabled) {
            var timeOutHandle = this.getViewModel().get('timeOutHandle')

            clearTimeout(timeOutHandle)

            this.getViewModel().set('timeOutEnabled', false)

        }
    },

    setScreenSaverTimeout: function(clear) {
        if (clear) {
            this.clearScreenSaverTimeout()

        }

        var component = this.getView()

        var screenSaverView = Ext.ComponentQuery.query('#productDesignerScreenSaverView')[0]

        var screenSaverTimeout = screenSaverView.getController().getScreenSaverTimeout() * 1000


        var timeOutHandle = setTimeout(function() {
            component.getController().redirectTo('#client/screen-saver', true)

        }, screenSaverTimeout)


        this.getViewModel().set('timeOutHandle', timeOutHandle)

        this.getViewModel().set('timeOutEnabled', true)

    },

    setRefreshImageInterval: function() {
        var configData = this.getViewModel().getData()

        var rightCarouselButton = this.getView().down('#rightCarouselButton')


        var intervalHandle = setInterval(function() {
            rightCarouselButton.click()

        }, configData.carousel.interval*1000)


        configData.intervalHandle = intervalHandle

        configData.intervalEnabled = true

    },

    clearRefreshImageInterval: function() {
        var configData = this.getViewModel().getData()

        if (configData.intervalEnabled) {
            clearInterval(configData.intervalHandle)

            configData.intervalEnabled = false

        }
    },

    adjustStartButtonFontSize: function(button) {
        // Compute the available width for text.
        var borderWidth = Ext.util.CSS.getRule('.default-command-button').style.getPropertyValue('border-width')

        var padding1 = Ext.util.CSS.getRule('.x-btn-default-small').style.getPropertyValue('padding')

        var padding2 = Ext.util.CSS.getRule('.carousel-default-command-button .x-btn-inner-default-small').style.getPropertyValue('padding')


        borderWidth = parseInt(borderWidth)

        padding1 = parseInt(padding1)

        padding2 = parseInt(padding2)


        if (isNaN(borderWidth)) {
            borderWidth = 0

        }

        if (isNaN(padding1)) {
            padding1 = 0

        }

        if (isNaN(padding2)) {
            padding2 = 0

        }

        var availableWidth = button.getMaxWidth() - 2 * (borderWidth + padding1 + padding2)


        // Check if the text fits the available width. If not, we reduce the button's
        // font size (upto 13px).
        var text = button.getText()


        var fontSize = Ext.util.CSS.getRule('.top-button-measure').style.getPropertyValue('font-size')

        fontSize = parseInt(fontSize)


        var measureElement = Ext.getBody().createChild()

        measureElement.addCls('top-button-measure')

        var textMetrics = new Ext.util.TextMetrics(measureElement)

        var width = textMetrics.getWidth(text)


        while (width > availableWidth && fontSize > 12) {
            Ext.util.CSS.updateRule('.top-button-measure', 'font-size', --fontSize + 'px')

            textMetrics = new Ext.util.TextMetrics(measureElement)

            width = textMetrics.getWidth(text)

        }
    },

    onLeftCarouselButtonClick: function(button, e, eOpts) {
        this.changeCarouselImage(true)

    },

    onRightCarouselButtonClick: function(button, e, eOpts) {
        this.changeCarouselImage(false)

    },

    onStartButtonClick: function(button, e, eOpts) {
        this.clearScreenSaverTimeout()


        var configData = this.getViewModel().getData()

        if (configData.termsOfService && configData.termsOfService.show) {
            this.redirectTo('#client/service-terms', true)

        } else {
            this.redirectTo('#client/catalog', true)

        }
    },

    onPanelAfterRender: function(component, eOpts) {
        this.getTopScreenConfiguration()

        this.setBackgroundImages()


        component.getEl().on({
            mousedown : {
                fn: this.setScreenSaverTimeout, args:[true], scope: this
            }
        })


        var button = component.down('button\\.defaultcommandbutton')

        this.adjustStartButtonFontSize(button)

    },

    onPanelShow: function(component, eOpts) {
        this.setScreenSaverTimeout(false)

        this.setRefreshImageInterval()


        // Stop tracking user activity.
        RolandKioskPrint.app.stopTrackingActivity()

    },

    onPanelHide: function(component, eOpts) {
        // Close the languages drop down, if open.
        var langPanel = this.getView().down('#langPanel')

        langPanel.getController().closeLanguagesDropDown()


        this.clearRefreshImageInterval()

        this.clearScreenSaverTimeout()

    }

})

