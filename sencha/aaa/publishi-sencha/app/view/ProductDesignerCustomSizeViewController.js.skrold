/*
 * File: app/view/ProductDesignerCustomSizeViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ProductDesignerCustomSizeViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.productdesignercustomsize',

    onBackButtonClick: function(button, e, eOpts) {
        this.redirectTo('#client/catalog', true);
    },

    onNextButtonClick: function(button, e, eOpts) {
        var productSizeInputPanel = this.getView().down('#productSizeInputPanel');
        if (!productSizeInputPanel.getController().validateUserInput()) {
            return;
        }

        var productModelData = RolandKioskPrint.AppData.productModelData;

        // Update the product size in the product model data, and redirect to designer.
        var productSizeData = productSizeInputPanel.getController().getProductSizeData();

        productModelData.unitsCreated = productSizeData.units;
        productModelData.productWidth = productSizeData.widthMM;
        productModelData.productHeight = productSizeData.heightMM;
        productModelData.leftMargin = productSizeData.leftMarginMM;
        productModelData.rightMargin = productSizeData.rightMarginMM;
        productModelData.topMargin = productSizeData.topMarginMM;
        productModelData.bottomMargin = productSizeData.bottomMarginMM;
        productModelData.cornerRadius = productSizeData.cornerRadiusMM;

        // Update the units preference.
        RolandKioskPrint.app.setPrefUnits(productSizeData.units);

        this.redirectTo('#client/editcontent', true);
    },

    onMainViewShow: function(component, eOpts) {
        var productSizeInputPanel = this.getView().down('#productSizeInputPanel');
        productSizeInputPanel.getController().setFocus();
    },

    onMainViewBeforeShow: function(component, eOpts) {
        var productModelData = RolandKioskPrint.AppData.productModelData,
            printType = productModelData.printType;

        if (!printType) {
            printType = RolandKioskPrint.app.constants.PRINT_TYPE_COLOR;
        }

        // Default values.
        var productSizeData = {
            units: RolandKioskPrint.app.getPrefUnits(),
            widthMM: RolandKioskPrint.app.constants.PRODUCT_WIDTH_DEFAULT,
            heightMM: RolandKioskPrint.app.constants.PRODUCT_HEIGHT_DEFAULT,
            leftMarginMM: RolandKioskPrint.app.constants.PRODUCT_MARGIN_DEFAULT,
            rightMarginMM: RolandKioskPrint.app.constants.PRODUCT_MARGIN_DEFAULT,
            topMarginMM: RolandKioskPrint.app.constants.PRODUCT_MARGIN_DEFAULT,
            bottomMarginMM: RolandKioskPrint.app.constants.PRODUCT_MARGIN_DEFAULT,
            cornerRadiusMM: RolandKioskPrint.app.constants.PRODUCT_CORNER_RADIUS_DEFAULT,
            xOffsetMM: RolandKioskPrint.app.constants.PRODUCT_OFFSET_DEFAULT,
            yOffsetMM: RolandKioskPrint.app.constants.PRODUCT_OFFSET_DEFAULT,
            customSize: false,
            customSizeEditable: false,
            customSizeHidden: true,
            printType: printType,
            printTypeEditable: false,
            printTypeHidden: true
        };

        if (printType == RolandKioskPrint.app.constants.PRINT_TYPE_CUT) {
            productSizeData.cutMaterial = productModelData.cutMaterial;
            productSizeData.cutMaterialColorName = productModelData.cutMaterialColorName;
        }

        var productSizeInputPanel = this.getView().down('#productSizeInputPanel');
        productSizeInputPanel.getController().initialize(productSizeData);

        var productSizeImagePanel = this.getView().down('#productSizeImagePanel');
        productSizeImagePanel.getController().setDrawAxisBars(false);
    },

    onMainViewAfterRender: function(component, eOpts) {
        var navPanel = this.getView().down('#navPanel'),
            step = RolandKioskPrint.app.constants.CHECK_STEP;

        var uiSettings = RolandKioskPrint.AppData.getUiSettingsData();
        if (uiSettings.skipCheckScreen) {
            // If the check screen has been skipped, set edit as the current step.
            step = RolandKioskPrint.app.constants.EDIT_STEP;
        }

        navPanel.getController().setCurrentStep(step);
    }

});
