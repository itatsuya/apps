/*
 * File: app/view/DesignerViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.DesignerViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.designer',

    listen: {
        controller: {
            orderconfirmation: {
                orderConfirmationClosed: 'onOrderConfirmationClosed'
            },
            'panel.navpanel': {
                navigateToTop: 'onNavigateToTop'
            }
        }
    },

    closeDesigner: function() {
        // Clear the canvas, preparing for the next product design.
        var canvasPanel = this.getView().down('#canvasPanel');
        canvasPanel.getController().terminate();

        var toolsPanel = this.getView().down('#toolsPanel');
        toolsPanel.getController().terminate();

        this.initialized = false;

        this.fireEvent('designerClosed');
    },

    onOrderConfirmationClosed: function() {
        this.closeDesigner();
    },

    onNavigateToTop: function(panel, step) {
        var initialized = this.initialized || false;

        if (!initialized) {
            this.redirectTo('#client/top', true);
            return;
        }

        // Moving to top view. Close designer.
        var canvasPanel = this.getView().down('#canvasPanel');
        if (step === RolandKioskPrint.app.constants.ORDER_STEP ||
            canvasPanel.getController().isCanvasDirty()) {
            var msg = '';
            if (step === RolandKioskPrint.app.constants.EDIT_STEP) {
                msg = RolandKioskPrint.app.getString('message.designer.closeDesignerWarning');
            } else if (step === RolandKioskPrint.app.constants.ORDER_STEP) {
                msg = RolandKioskPrint.app.getString('message.designer.closeOrderWarning');
            }
            // Confirm with the user.
            Ext.Msg.confirm(RolandKioskPrint.app.getString('message.generic.confirmation'),
                            msg,
                            function(btnText) {
                                if (btnText == 'yes') {
                                    this.redirectTo('#client/top', true);
                                    this.closeDesigner();
                                }
                            }, this);
        } else {
            this.redirectTo('#client/top', true);
            this.closeDesigner();
        }
    },

    createOrder: function() {
        var canvasPanel = this.getView().down('#canvasPanel');
        var canvasPanelController = canvasPanel.getController();

        // Get the spot color data.
        var toolsPanel = this.getView().down('#toolsPanel');
        var spotColorData = toolsPanel.getController().getSpotColorData();
        var modelData = RolandKioskPrint.AppData.productModelData;
        var getIgnoreCase = RolandKioskPrint.app.getIgnoreCase;

        var printType = RolandKioskPrint.AppData.getActivePrintType(),
            box = canvasPanelController.getSVGViewBox(printType);

        var svg = canvasPanelController.getSVG(printType, {
            emitCanvasClip: true,
            useHiResImages: true,
            suppressBgObjects: true,
            generatePrimer: spotColorData.primer,
            generateWhite: spotColorData.white,
            generateVarnish: spotColorData.varnish,
            varnishType: spotColorData.varnishType
        });

        // Debug log.
        //console.log(svg);

        var thumb = canvasPanelController.getThumbnail({
            suppressEditAreas: true
        });

        var designerData = {
            version: RolandKioskPrint.app.version,
            modelName: modelData.modelName,
            modelDisplayName: modelData.modelDisplayName,
            orderWidthMM: modelData.productWidth,
            orderHeightMM: modelData.productHeight,
            primer: modelData.hasPrimerObjects,
            white: modelData.hasWhiteObjects,
            glossVarnish: (spotColorData.varnishType == RolandKioskPrint.app.constants.GLOSS_VARNISH && modelData.hasVarnishObjects),
            matteVarnish: (spotColorData.varnishType == RolandKioskPrint.app.constants.MATTE_VARNISH && modelData.hasVarnishObjects),
            backPrint: (spotColorData.backPrint == 'on'),
            productDesign: svg,
            productDesignThumb: thumb,
            goodsCode: modelData.goodsCode,
            goodsName: modelData.goodsName,
            pricePerUnit: (modelData.pricePerUnit === undefined) ? 0 : modelData.pricePerUnit,
            currency: (modelData.currency === undefined) ? '' : modelData.currency,
            quantity: 1, // Gets updated on the order creation view
            customSize: false,
            printType: modelData.printType,

            // Additional foil properties
            productDesignFoilThumb: undefined,
            foilColorName: undefined,
            foilColorValue: undefined,
            printingMessage: undefined,
            powerValue: undefined,
            contentCenterX: undefined,
            contentCenterY: undefined,
            offsetX: undefined,
            offsetY: undefined,
            foilEnableOutline: undefined,

            // Additional metal properties
            productDesignMetalThumb: undefined,
            material: undefined,
            markingSpeed: undefined,
            maxImpact: undefined,
            minImpact: undefined,
            vectorImpact: undefined,
            materialColor: undefined,
            markingMode: undefined,
            bidiPrint: undefined,
            enableOutline: undefined,

            // Additional cut properties
            cutMaterial: undefined,
            cutForce: undefined,
            cutSpeed: undefined,
            cutOffset: undefined,
            cutQuality: undefined,
            cutMaterialColorName: undefined,
            cutMaterialColor: undefined
        };

        if (modelData.customSize) {
            designerData.goodsCode = RolandKioskPrint.app.getString('label.generic.customName');
            designerData.goodsName = RolandKioskPrint.app.getString('label.generic.customName');
            designerData.customSize = true;
        }

        if (modelData.isFoilPrint()) {
            var foilColorData = toolsPanel.getController().getFoilColorData();
            designerData.foilColorName = foilColorData.foilColorName;
            designerData.foilColorValue = foilColorData.foilColorValue;
            designerData.printingMessage = modelData.printingMessage;
            designerData.powerValue = modelData.powerValue;
            designerData.contentCenterX = box.left + (box.width / 2);
            designerData.contentCenterY = box.top + (box.height / 2);
            designerData.offsetX = modelData.offsetX;
            designerData.offsetY = modelData.offsetY;
            designerData.foilEnableOutline = modelData.foilEnableOutline;

            // For foil print orders, generate alternate thumb with foil imprint area shown.
            designerData.productDesignFoilThumb = canvasPanelController.getThumbnail({
                suppressEditAreas: true,
                printType: RolandKioskPrint.app.constants.PRINT_TYPE_FOIL
            });
        }

        if (modelData.isMetalPrint()) {
            var markingMode = modelData.markingMode;
            if (markingMode == RolandKioskPrint.app.constants.MARKING_MODE_AUTO) {
                markingMode = RolandKioskPrint.app.constants.MARKING_MODE_TEXT; // the default

                var coverage = canvasPanelController.getObjectsCoverage();
                if (coverage.image > coverage.text) {
                    markingMode = RolandKioskPrint.app.constants.MARKING_MODE_PHOTO;
                }
            }

            designerData.printingMessage = modelData.printingMessage;
            designerData.material = modelData.material;

            // Get the marking settings for the material.
            var materialsStore = Ext.StoreManager.lookup('MarkingMaterials');
            var record = getIgnoreCase(materialsStore, 'materialName', modelData.material);
            if (record) {
                var materialSettings = record.data.markingSettings[markingMode];
                designerData.markingSpeed = materialSettings.markingSpeed;
                designerData.maxImpact = materialSettings.maxImpact;
                designerData.minImpact = materialSettings.minImpact;
                designerData.vectorImpact = materialSettings.vectorImpact;
            }

            designerData.materialColor = modelData.materialColor;
            designerData.markingMode = markingMode;
            designerData.bidiPrint = modelData.bidiPrint;
            designerData.enableOutline = modelData.enableOutline;
            designerData.contentCenterX = box.left + (box.width / 2);
            designerData.contentCenterY = box.top + (box.height / 2);
            designerData.offsetX = modelData.offsetX;
            designerData.offsetY = modelData.offsetY;

            // For foil print orders, generate alternate thumb with foil imprint area shown.
            designerData.productDesignMetalThumb = canvasPanelController.getThumbnail({
                suppressEditAreas: true,
                printType: RolandKioskPrint.app.constants.PRINT_TYPE_METAL
            });
        }

        if (modelData.isCutPrint()) {
            designerData.cutMaterial = modelData.cutMaterial;

            // Get the cut settings for the material.
            var cutMaterialsStore = Ext.StoreManager.lookup('CuttingMaterials');
            var record = getIgnoreCase(cutMaterialsStore, 'materialName', modelData.cutMaterial);
            if (record) {
                var cutSettings = record.data.cutSettings;
                designerData.cutForce = cutSettings.cutForce;
                designerData.cutSpeed = cutSettings.cutSpeed;
                designerData.cutOffset = cutSettings.cutOffset;
                designerData.cutQuality = cutSettings.cutQuality;
                designerData.cutMaterialColorName = modelData.cutMaterialColorName;
                designerData.cutMaterialColor = modelData.cutMaterialColor;
            }
        }

        // Debug log.
        //console.log(designerData);

        var uiSettings = RolandKioskPrint.AppData.getUiSettingsData() || {};
        if (uiSettings.skipOrderCreateScreen) {
            var printOrderData = designerData;

            if (printOrderData.customSize) {
                printOrderData.totalPrice = RolandKioskPrint.app.getString('label.generic.customPrice');
            } else {
                var totalPrice = printOrderData.quantity * printOrderData.pricePerUnit;
                printOrderData.totalPrice = printOrderData.currency + ' ' + totalPrice.toFixed(2);
            }

            var widget = Ext.widget({
                xtype: 'orderverify',
                clientView: true
            });

            widget.getController().setOrderData(printOrderData);
            RolandKioskPrint.app.showModalView(widget);
        } else {
            var orderCreateView = Ext.ComponentQuery.query('#orderCreateView')[0];
            orderCreateView.getViewModel().setData(designerData);

            this.redirectTo('#order/create', true);
        }
    },

    onSmartGuideChange: function(field, newValue, oldValue, eOpts) {
        RolandKioskPrint.AppData.setSmartGuide(newValue);
    },

    onBackButtonClick: function(button, e, eOpts) {
        var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel();
        var canvasPanelController = canvasPanel.getController();

        // Exit clip mode if active.
        canvasPanelController.endClipping();

        if (canvasPanelController.isCanvasDirty()) {
            // Confirm with the user.
            Ext.Msg.confirm(RolandKioskPrint.app.getString('message.generic.confirmation'),
            RolandKioskPrint.app.getString('message.designer.closeDesignerWarning'),
            function(btnText) {
                if (btnText == 'yes') {
                    this.redirectTo('#client/catalog', true);
                    this.closeDesigner();
                }
            }, this);
        } else {
            this.redirectTo('#client/catalog', true);
            this.closeDesigner();
        }
    },

    onNextButtonClick: function(button, e, eOpts) {
        // Check if the cut content exceeds printable area.
        // Since RVWD/H-RIP can't clip cut paths to the PDF media box, which would
        // result in protuding cut paths of one order to cut into another, we
        // stop the user right here from creating such orders.

        var canvasPanel = RolandKioskPrint.AppData.getCanvasPanel();
        var canvasPanelController = canvasPanel.getController();

        // Exit clip mode if active.
        canvasPanelController.endClipping();

        var modelData = RolandKioskPrint.AppData.productModelData;
        if (!modelData.isFoilPrint() && !modelData.isMetalPrint()) {
            if (canvasPanelController.cutContentExceedsPrintableArea(true)) {
                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.alert'),
                RolandKioskPrint.app.getString('message.designer.cutContentExceedsPrintableArea'));
                return;
            }
        }

        var me = this;

        function deferredCreateOrderData() {
            var view = me.getView();
            view.getEl().mask(RolandKioskPrint.app.getString('message.designer.creatingOrderData'));

            setTimeout(function() {
                me.createOrder();
                view.getEl().unmask();
            }, 10);
        }

        var hasLowResImages = canvasPanelController.getHasLowResImages();
        if (hasLowResImages) {
            Ext.Msg.show({
                title: RolandKioskPrint.app.getString('message.generic.warning'),
                msg: RolandKioskPrint.app.getString('message.designer.lowResolutionWarning'),
                buttonText: {
                    yes: RolandKioskPrint.app.getString('label.button.yes'),
                    no: RolandKioskPrint.app.getString('label.button.no')
                },
                fn: function(buttonValue, inputText, showConfig) {
                    if (buttonValue == 'yes') {
                        deferredCreateOrderData();
                    }
                },
                icon: Ext.MessageBox.WARNING
            });
            return;
        }

        deferredCreateOrderData();
    },

    onMainViewBeforeShow: function(component, eOpts) {
        // Initialize smart guide
        var chkSmartGuide = this.getView().down('#chkSmartGuide');
        chkSmartGuide.setValue(true);

        if (this.initialized) {
            return;
        }

        // Set the product size data on the canvas.
        var canvasPanel = this.getView().down('#canvasPanel');
        var productModelData = RolandKioskPrint.AppData.productModelData;

        var productSizeData = {
            widthMM: productModelData.productWidth,
            heightMM: productModelData.productHeight,
            leftMarginMM: productModelData.leftMargin,
            rightMarginMM: productModelData.rightMargin,
            topMarginMM: productModelData.topMargin,
            bottomMarginMM: productModelData.bottomMargin,
            cornerRadiusMM: productModelData.cornerRadius
        };

        canvasPanel.getController().initialize(this.getView(), productSizeData, productModelData.modelDesignPath);

        // Get the designer canvas, and set as active.
        var canvas = canvasPanel.getController().getCanvas();

        RolandKioskPrint.AppData.setDesignerView(this.getView());
        RolandKioskPrint.AppData.setActiveCanvas(canvas);
        RolandKioskPrint.AppData.setActiveCanvasPanel(canvasPanel);

        var undoRedoPanel = this.getView().down('#undoRedoPanel');
        RolandKioskPrint.AppData.setUndoRedoPanel(undoRedoPanel);

        var miscPanel = this.getView().down('#miscPanel');
        RolandKioskPrint.AppData.setMiscPanel(miscPanel);

        // Initialize the tools panel.
        var toolsPanel = this.getView().down('#toolsPanel');
        toolsPanel.getController().initialize();
        RolandKioskPrint.AppData.setToolsPanel(toolsPanel);

        // Set the spot color data.
        var spotColorData = {
            primer: productModelData.primer || 'off',
            white: productModelData.white || 'off',
            varnish: productModelData.varnish || 'off',
            varnishType: productModelData.varnishType || RolandKioskPrint.app.constants.GLOSS_VARNISH,
            backPrint: productModelData.backPrint || 'off'
        };

        toolsPanel.getController().setSpotColorData(spotColorData);

        // Set the cut data.
        var cutData = {
            userCutPaths: productModelData.userCutPaths || 'off',
            userCutPathsEditable: false
        };

        toolsPanel.getController().setCutData(cutData);

        // Set the color data.
        var colorData = {
            varnishSettings: productModelData.varnishSettings,
            varnishMaster: {
                varnish: productModelData.varnish || 'off',
                varnishType: productModelData.varnishType || RolandKioskPrint.app.constants.GLOSS_VARNISH
            }
        };

        if (!colorData.varnishSettings) {
            colorData.varnishSettings = {
                applyToAll: false,
                varnishStatus: false,
                textureType: ''
            };
        }
        colorData.templateApplyToAll = colorData.varnishSettings.applyToAll;

        toolsPanel.getController().setColorData(colorData);

        // Set the background data.
        var backgroundData = {
            userBackground: productModelData.userBackground || 'off',
            userBackgroundEditable: false
        };

        toolsPanel.getController().setBackgroundData(backgroundData);

        var printType = productModelData.printType;
        if (Array.isArray(printType)) {
            printType = printType[0];
        }

        RolandKioskPrint.AppData.setActivePrintType(printType);
        if (printType == RolandKioskPrint.app.constants.PRINT_TYPE_FOIL) {
            toolsPanel.getController().switchToFoilPrintUI();
        } else if (printType == RolandKioskPrint.app.constants.PRINT_TYPE_METAL) {
            toolsPanel.getController().switchToMetalPrintUI();
        } else if (printType == RolandKioskPrint.app.constants.PRINT_TYPE_CUT) {
            toolsPanel.getController().switchToCutPrintUI();
        }

        // Notify before show event.
        var actionPanelContainer = this.getView().down('#actionPanelContainer');
        var actionPanels = actionPanelContainer.items.getRange();

        actionPanels.forEach(function(panel) {
            if (panel.getController().parentBeforeShow) {
                panel.getController().parentBeforeShow();
            }
        });

        RolandKioskPrint.AppData.setSmartGuide(true);

        this.initialized = true;
    },

    onMainViewAfterRender: function(component, eOpts) {
        var navPanel = this.getView().down('#navPanel');
        navPanel.getController().setCurrentStep(RolandKioskPrint.app.constants.EDIT_STEP);

        // Add handler for Delete key.
        var keyMap = new Ext.util.KeyMap({
            target: document,
            binding: [{
                key: [46],
                fn: function (key, e) {
                    // If a text field/area has the focus, go with the default handling.
                    if (document.activeElement) {
                        var elemType = document.activeElement.type;
                        if (elemType == 'text' || elemType == 'textarea') {
                            return;
                        }
                    }

                    var miscPanel = RolandKioskPrint.AppData.getMiscPanel();
                    miscPanel.getController().onDelete();
                }
            }]
        });
        keyMap.disable();

        this.keyMap = keyMap;
    },

    onMainViewShow: function(component, eOpts) {
        var actionPanelContainer = this.getView().down('#actionPanelContainer');
        var actionPanels = actionPanelContainer.items.getRange();

        actionPanels.forEach(function(panel) {
            if (panel.getController().parentShown) {
                panel.getController().parentShown();
            }
        });

        var imagePanel = this.getView().down('panel\\.imagepanel');
        if (imagePanel) {
            imagePanel.getController().initialize();
        }

        var clipartPanel = this.getView().down('panel\\.clipartpanel');
        if (clipartPanel) {
            clipartPanel.getController().initialize();
        }

        // Enable keymap.
        this.keyMap.enable();
    },

    onMainViewHide: function(component, eOpts) {
        var actionPanelContainer = this.getView().down('#actionPanelContainer');
        var actionPanels = actionPanelContainer.items.getRange();

        actionPanels.forEach(function(panel) {
            if (panel.getController().parentHidden) {
                panel.getController().parentHidden();
            }
        });

        // Deactivate keymap.
        this.keyMap.disable();

        RolandKioskPrint.view.window.HelpWindowViewController.closeHelp();
    }

});
