/*
 * File: app/view/ModelLayoutDesignerViewModel.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ModelLayoutDesignerViewModel', {
    extend: 'Ext.app.ViewModel',
    alias: 'viewmodel.modellayoutdesigner',

    requires: [
        'Ext.app.bind.Formula'
    ],

    formulas: {
        isPreviewMode: function(get) {
            return (get('designerMode') == RolandKioskPrint.app.constants.MODEL_LAYOUT_PREVIEW)

        },
        panelTitle: function(get) {
            var designerMode = get('designerMode')

            var layoutName = get('layoutName')


            if (designerMode == RolandKioskPrint.app.constants.MODEL_LAYOUT_EDIT) {
                return this.formatTitle(
                RolandKioskPrint.app.getString('label.pmd_mld.mldEditTitle'),
                layoutName
                )

            } else if (designerMode == RolandKioskPrint.app.constants.MODEL_LAYOUT_IMPORT) {
                return RolandKioskPrint.app.getString('label.pmd_mld.mldImportTitle')

            } else if (designerMode == RolandKioskPrint.app.constants.MODEL_LAYOUT_PREVIEW) {
                return this.formatTitle(
                RolandKioskPrint.app.getString('label.pmd_mld.mldPreviewTitle'),
                layoutName
                )

            } else {
                return RolandKioskPrint.app.getString('label.pmd_mld.mldNewTitle')

            }
        },
        isSourceSVG: function(get) {
            return (get('source') == 'SVG')

        },
        maxLayoutHeightUnit: {
            get: function(get) {
                var maxLayoutHeightMM = get('maxLayoutHeightMM')

                if (maxLayoutHeightMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), maxLayoutHeightMM)

            },
            set: function(value) {
                this.set({
                    maxLayoutHeightMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        maxLayoutWidthUnit: {
            get: function(get) {
                var maxLayoutWidthMM = get('maxLayoutWidthMM')

                if (maxLayoutWidthMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), maxLayoutWidthMM)

            },
            set: function(value) {
                this.set({
                    maxLayoutWidthMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        slotHeightUnit: {
            get: function(get) {
                var slotHeightMM = get('slotHeightMM')

                if (slotHeightMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), slotHeightMM)

            },
            set: function(value) {
                this.set({
                    slotHeightMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        slotWidthUnit: {
            get: function(get) {
                var slotWidthMM = get('slotWidthMM')

                if (slotWidthMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), slotWidthMM)

            },
            set: function(value) {
                this.set({
                    slotWidthMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        marginTopUnit: {
            get: function(get) {
                var topMarginMM = get('topMarginMM')

                if (topMarginMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), topMarginMM)

            },
            set: function(value) {
                this.set({
                    topMarginMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        marginBottomUnit: {
            get: function(get) {
                var bottomMarginMM = get('bottomMarginMM')

                if (bottomMarginMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), bottomMarginMM)

            },
            set: function(value) {
                this.set({
                    bottomMarginMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        marginLeftUnit: {
            get: function(get) {
                var leftMarginMM = get('leftMarginMM')

                if (leftMarginMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), leftMarginMM)

            },
            set: function(value) {
                this.set({
                    leftMarginMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        marginRightUnit: {
            get: function(get) {
                var rightMarginMM = get('rightMarginMM')

                if (rightMarginMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), rightMarginMM)

            },
            set: function(value) {
                this.set({
                    rightMarginMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        printOffsetYUnit: {
            get: function(get) {
                var yPrintOffsetMM = get('yPrintOffsetMM')

                if (yPrintOffsetMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), yPrintOffsetMM)

            },
            set: function(value) {
                this.set({
                    yPrintOffsetMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        printOffsetXUnit: {
            get: function(get) {
                var xPrintOffsetMM = get('xPrintOffsetMM')

                if (xPrintOffsetMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), xPrintOffsetMM)

            },
            set: function(value) {
                this.set({
                    xPrintOffsetMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        vertSpacingUnit: {
            get: function(get) {
                var vertSpacingMM = get('vertSpacingMM')

                if (vertSpacingMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), vertSpacingMM)

            },
            set: function(value) {
                this.set({
                    vertSpacingMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        horzSpacingUnit: {
            get: function(get) {
                var horzSpacingMM = get('horzSpacingMM')

                if (horzSpacingMM === null) {
                    return

                }
                return this.convertMMToUnit(get('units'), horzSpacingMM)

            },
            set: function(value) {
                this.set({
                    horzSpacingMM: this.convertUnitToMM(this.get('units'), value)
                })

            }
        },
        rotateNonePressed: {
            get: function(get) {
                return get('rotationAngle') === 0

            },
            set: function(value) {
                if (value) {
                    this.set({
                        rotationAngle: 0
                    })

                }
            }
        },
        rotateLeft90Pressed: {
            get: function(get) {
                return get('rotationAngle') == 90

            },
            set: function(value) {
                if (value) {
                    this.set({
                        rotationAngle: 90
                    })

                }
            }
        },
        rotate180Pressed: {
            get: function(get) {
                return get('rotationAngle') == 180

            },
            set: function(value) {
                if (value) {
                    this.set({
                        rotationAngle: 180
                    })

                }
            }
        },
        rotateRight90Pressed: {
            get: function(get) {
                return get('rotationAngle') == 270

            },
            set: function(value) {
                if (value) {
                    this.set({
                        rotationAngle: 270
                    })

                }
            }
        }
    },

    convertMMToUnit: function(units, mmValue) {
        var result = mmValue


        if (units == 'inch') {
            result = mmValue / 25.4

        }
        return result

    },

    convertUnitToMM: function(units, unitValue) {
        var result = unitValue


        if (units == 'inch') {
            result = unitValue * 25.4

        }
        return result

    },

    formatTitle: function(panelTitle, layoutName) {
        return panelTitle + ' - ' + layoutName

    }

})
