/*
 * File: app/view/ProductModelDesignerSaveViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ProductModelDesignerSaveViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.productmodeldesignersave',

    disableFilters: function(disable) {
        var store = this.productModelsStore;

        if (disable) {
            store.clearFilter();
        } else {
            if (store.printTypeFilter) {
                store.getFilters().add(store.printTypeFilter);
            }
            if (store.modelNameFilter) {
                store.getFilters().add(store.modelNameFilter);
            }
        }
    },

    saveProductModel: function(productModelName, overwriting) {
        var productModelData = this.getViewModel().getData();

        // Keep the existing lang data when overwriting.
        var updateLangData = !overwriting;

        // Remove mappings when overwriting to a different name.
        var deleteMapping = (overwriting && productModelData.modelName != productModelName);

        productModelData.modelName = productModelName;
        productModelData.deleteMapping = deleteMapping;

        if (typeof productModelData.modelDesign !== 'string') {
            // When importing, update the image urls from temporary paths to
            // the new model name.
            var json = productModelData.modelDesign;
            if (productModelData.modelImport) {
                this.updateImageURLs(json.objects);
            }

            var jsonStr = Ext.util.JSON.encode(json);
            productModelData.modelDesign = 'data:application/json;base64,' + Ext.util.Base64.encode(jsonStr); // Data URI format
        }

        // Add the default language data.
        if (updateLangData) {
            productModelData.modelLangData = this.createLanguageData(productModelName);
        }

        // Debug log.
        //var s = Ext.util.JSON.encode(productModelData);
        //console.log(s);

        var productModelSaveView = this.getView();
        productModelSaveView.getEl().mask(RolandKioskPrint.app.getString('message.pmd_mld.savingPM'));

        // Upload the product model template to server.
        Ext.Ajax.request({
            scope: this,
            method: 'POST',
            url: RolandKioskPrint.app.constants.PRODUCT_MODEL_URL,
            jsonData: productModelData,
            success: function(response, opts) {
                productModelSaveView.getEl().unmask();

                var responseData = Ext.decode(response.responseText);
                if (!responseData || !responseData.success) {
                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                                  RolandKioskPrint.app.getString('message.pmd_mld.pmSaveFailed'));
                    return;
                }

                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.success'),
                              RolandKioskPrint.app.getString('message.pmd_mld.pmSaved'));
                this.fireEvent('productModelSaved', productModelName);

                RolandKioskPrint.app.destroyModalView(productModelSaveView);
                this.redirectTo('template/main');
            },
            failure: function() {
                productModelSaveView.getEl().unmask();
                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                              RolandKioskPrint.app.getString('message.pmd_mld.pmSaveFailed'));
            }
        });
    },

    updateImageURLs: function(objects) {
        var productModelData = this.getViewModel().getData();
        var me = this;

        objects.forEach(function(o) {
            if (o.type == 'image') {
                var s = o.src;
                o.src = s.replace(/temp_import_(.*?)\//, productModelData.modelName + '/');
            } else if (o.type == 'group') {
                me.updateImageURLs(o.objects);
            }
        });
    },

    createLanguageData: function(modelName) {
        var categoryKeys = [
            'category_1',
            'category_2',
            'category_3',
            'category_4'
        ];

        var partNames = modelName.split('.');
        var i, length = partNames.length;

        // Create default images data.
        var imagesData = {};
        for (i = 0; i < length; i++) {
            imagesData[categoryKeys[i]] = '';
        }

        // Create default names and descriptions data for the supported languages.
        // By default, the same data is created for all languages.
        var nameData = {};
        var descriptionData = {};
        for (i = 0; i < length; i++) {
            var categoryKey = categoryKeys[i];
            nameData[categoryKey] = partNames[i];
            descriptionData[categoryKey] = '';
        }

        var namesData = {};
        var descriptionsData = {};

        var languages = [];
        var languagesStore = Ext.StoreManager.lookup('Languages');
        var me = this;
        languagesStore.each(function(record, idx) {
            var langCode = record.data.langCode;
            languages.push(langCode);

            // We make a copy of the object per language, as it may be modified
            // differently for each language.
            namesData[langCode] = me.shallowCopyObject(nameData);
            descriptionsData[langCode] = me.shallowCopyObject(descriptionData);
        });

        // We now copy any category images, names and descriptions customization in
        // a matching product model.
        var match = this.getMatchingProductModel(modelName);
        if (match) {
            var productModel = match.productModel;
            var matchLength = match.matchLength;

            var langData = productModel.modelLangData;
            if (langData) {
                for (i = 0; i < matchLength; i++) {
                    // Copy the category customization data from the matching product model.
                    var categoryKey = categoryKeys[i];
                    this.addImageData(imagesData, categoryKey, langData.images);
                    this.addLangData(namesData, categoryKey, langData.names, languages);
                    this.addLangData(descriptionsData, categoryKey, langData.descriptions, languages);
                }
            }
        }

        return {
            images: imagesData,
            names: namesData,
            descriptions: descriptionsData
        };
    },

    addLangData: function(target, categoryKey, source, languages) {
        if (!source) {
            return;
        }

        // Copy language data for category.
        languages.forEach(function(language) {
            var langData = source[language];
            if (langData && langData[categoryKey]) {
                target[language][categoryKey] = langData[categoryKey];
            }
        });
    },

    addImageData: function(target, categoryKey, source) {
        if (!source) {
            return;
        }

        // Copy image data for category.
        var imageData = source[categoryKey];
        if (imageData) {
            target[categoryKey] = imageData;
        }
    },

    populateSpecialEffects: function(modelData) {
        var storeData = [];

        if (modelData.primer == 'on') {
            storeData.push({
                effectThumbPath: 'resources/images/SpecialEffect_Primer.png',
                effectName: RolandKioskPrint.app.getString('label.designer.primerSpotName')
            });
        }

        if (modelData.white == 'on') {
            storeData.push({
                effectThumbPath: 'resources/images/SpecialEffect_White.png',
                effectName: RolandKioskPrint.app.getString('label.designer.whiteSpotName')
            });
        }

        if (modelData.varnish == 'on') {
            if (modelData.varnishType == RolandKioskPrint.app.constants.GLOSS_VARNISH) {
                storeData.push({
                    effectThumbPath: 'resources/images/SpecialEffect_Gloss.png',
                    effectName: RolandKioskPrint.app.getString('label.designer.varnishTypeGloss')
                });
            } else if (modelData.varnishType == RolandKioskPrint.app.constants.MATTE_VARNISH) {
                storeData.push({
                    effectThumbPath: 'resources/images/SpecialEffect_Matte.png',
                    effectName: RolandKioskPrint.app.getString('label.designer.varnishTypeMatte')
                });
            }
        }

        if (modelData.backPrint == 'on') {
            storeData.push({
                effectThumbPath: 'resources/images/SpecialEffect_ReversePrint.png',
                effectName: RolandKioskPrint.app.getString('label.designer.backPrintSpotName')
            });
        }

        var specialEffectView = this.getView().down('#specialEffectView');
        specialEffectView.getStore().setData(storeData);

        return storeData.length;
    },

    containsIgnoreCase: function(store, column, value) {
        // Do a full case insensitive match.
        return store.find(column, value, 0, false, false, true) >= 0;
    },

    getMatchingProductModel: function(modelName) {
        var partNames = modelName.toLowerCase().split('.');
        var i, length = partNames.length - 1;

        if (length === 0) {
            return;
        }

        var maxMatchLength = length;
        var bestMatchLength = 0;
        var bestMatch;

        var productModels = this.productModels;
        productModels.some(function (productModel) {
            var matchModelName = productModel.modelName;
            var matchPartNames = matchModelName.toLowerCase().split('.');
            var matchLength = matchPartNames.length - 1;
            if (matchLength <= bestMatchLength) {
                return; // Continue with next
            }

            for (i = 0; i < length && i < matchLength; i++) {
                if (partNames[i] != matchPartNames[i]) {
                    break;
                }
            }

            if (i > bestMatchLength) {
                // We have found a better match, with more part names matching.
                bestMatchLength = i;
                bestMatch = productModel;

                if (i == maxMatchLength) {
                    // Done.
                    return true;
                }
            }
        });

        if (bestMatch) {
            return {
                productModel: bestMatch,
                matchLength: bestMatchLength
            };
        }
    },

    shallowCopyObject: function(object) {
        var copy = {};

        for (var property in object) {
            if (object.hasOwnProperty(property)) {
                copy[property] = object[property];
            }
        }
        return copy;
    },

    onProductModelListSelect: function(rowmodel, record, index, eOpts) {
        var txtProductModelName = this.getView().down('#txtProductModelName');
        txtProductModelName.setValue(record.data.modelName);
    },

    onCancelButtonClick: function(button, e, eOpts) {
        // Re-enable the filters.
        this.disableFilters(false);

        RolandKioskPrint.app.destroyModalView(this.getView());
    },

    onSaveButtonClick: function(button, e, eOpts) {
        var productModelSaveView = this.getView();

        // Validate user input.
        var txtProductModelName = productModelSaveView.down('#txtProductModelName');
        if (!txtProductModelName.isValid()) {
            txtProductModelName.focus();
            return;
        }

        var productModelData = this.getViewModel().getData();
        var modelTemplateData = productModelData.modelTemplate;

        if (!modelTemplateData.customSize) {
            var txtGoodsCode = productModelSaveView.down('#txtGoodsCode');
            if (!txtGoodsCode.isValid()) {
                txtGoodsCode.focus();
                return;
            }

            var txtGoodsName = productModelSaveView.down('#txtGoodsName');
            if (!txtGoodsName.isValid()) {
                txtGoodsName.focus();
                return;
            }

            var txtPricePerUnit = productModelSaveView.down('#txtPricePerUnit');
            if (!txtPricePerUnit.isValid()) {
                txtPricePerUnit.focus();
                return;
            }

            var txtCurrency = productModelSaveView.down('#txtCurrency');
            if (!txtCurrency.isValid()) {
                txtCurrency.focus();
                return;
            }

            // Set the data fields.
            modelTemplateData.goodsCode = txtGoodsCode.getValue().trim();
            modelTemplateData.goodsName = txtGoodsName.getValue().trim();
            modelTemplateData.pricePerUnit = txtPricePerUnit.getValue();
            modelTemplateData.currency = txtCurrency.getValue().trim();
        }

        if (RolandKioskPrint.app.isFoilPrintModel(modelTemplateData)) {
            var txtPrintMessage = productModelSaveView.down('#txtPrintMessage');
            var txtFoilPowerValue = productModelSaveView.down('#txtFoilPowerValue');

            if (!txtPrintMessage.isValid()) {
                txtPrintMessage.focus();
                return;
            }

            if (!txtFoilPowerValue.isValid()) {
                txtFoilPowerValue.focus();
                return;
            }

            modelTemplateData.printingMessage = txtPrintMessage.getValue().trim();
            modelTemplateData.powerValue = txtFoilPowerValue.getValue();
        } else if (RolandKioskPrint.app.isMetalPrintModel(modelTemplateData)) {
            var txtPrintMessage = productModelSaveView.down('#txtPrintMessage');

            if (!txtPrintMessage.isValid()) {
                txtPrintMessage.focus();
                return;
            }

            modelTemplateData.printingMessage = txtPrintMessage.getValue().trim();
        }

        // Save the currency preference.
        RolandKioskPrint.app.setPrefCurrency(modelTemplateData.currency);

        // Check if a product model by this name already exists.
        // If yes, we ask the user for overwrite confirmation.
        var productModelName = txtProductModelName.getValue().trim();

        // Create the product model name back with the part names trimmed.
        var partNames = productModelName.split('.').map(function(partName) {
            return partName.trim();
        });

        if (partNames.length > 1) {
            productModelName = partNames.join('.');
        }

        var store = this.productModelsStore;
        var exists = this.containsIgnoreCase(store, 'modelName', productModelName);

        // Re-enable the filters.
        this.disableFilters(false);

        if (exists) {
            // Get overwrite confirmation from user.
            var msg = Ext.String.format(
            RolandKioskPrint.app.getString('message.pmd_mld.pmSaveComfirmation'),
            productModelName);
            Ext.Msg.confirm(RolandKioskPrint.app.getString('message.generic.confirmation'),
            msg, function(btnText) {
                if (btnText == 'yes') {
                    this.saveProductModel(productModelName, true);
                }
            }, this);
            return false;
        }

        this.saveProductModel(productModelName, false);
    },

    onPanelShow: function(component, eOpts) {
        var view = this.getView();
        var productModelData = this.getViewModel().getData();
        var template = productModelData.modelTemplate;

        var effectsCount = this.populateSpecialEffects(template);
        if (effectsCount === 0) {
            this.getView().down('#pnlSpecialEffect').hide();
        }

        var productModelList = view.down('#productModelList');
        if (RolandKioskPrint.app.isFoilPrintModel(template)) {
            productModelList.setHeight(235);
        } else if (RolandKioskPrint.app.isMetalPrintModel(template)) {
            productModelList.setHeight(278);
        } else {
            var height = (effectsCount > 3) ? 195 : ((effectsCount > 0) ? 245 : 320);
            productModelList.setHeight(height);
        }

        // Clear any filters to list all the product models.
        this.productModelsStore = productModelList.getStore();
        this.disableFilters(true);

        // Initialize the data fields.
        var txtProductModelName = view.down('#txtProductModelName');
        txtProductModelName.setValue(productModelData.modelName);
        txtProductModelName.maxLength = RolandKioskPrint.app.constants.MAX_PRODUCT_MODEL_NAME_LEN;

        if (!template.customSize) {
            var txtGoodsCode = view.down('#txtGoodsCode');
            txtGoodsCode.setValue(productModelData.modelTemplate.goodsCode);
            txtGoodsCode.maxLength = RolandKioskPrint.app.constants.MAX_GOODS_CODE_LEN;

            var txtGoodsName = view.down('#txtGoodsName');
            txtGoodsName.setValue(productModelData.modelTemplate.goodsName);
            txtGoodsName.maxLength = RolandKioskPrint.app.constants.MAX_GOODS_NAME_LEN;

            var txtPricePerUnit = view.down('#txtPricePerUnit');
            txtPricePerUnit.setValue(productModelData.modelTemplate.pricePerUnit);

            var txtCurrency = view.down('#txtCurrency');
            if (productModelData.modelTemplate.currency) {
                txtCurrency.setValue(productModelData.modelTemplate.currency);
            } else {
                txtCurrency.setValue(RolandKioskPrint.app.getPrefCurrency());
            }
            txtCurrency.maxLength = RolandKioskPrint.app.constants.MAX_CURRENCY_LEN;
        }

        if (RolandKioskPrint.app.isFoilPrintModel(template)) {
            var txtPrintMessage = view.down('#txtPrintMessage');
            txtPrintMessage.setValue(template.printingMessage);
            txtPrintMessage.maxLength = RolandKioskPrint.app.constants.MAX_PRINT_MESSAGE_LEN;

            var txtFoilPowerValue = view.down('#txtFoilPowerValue');
            txtFoilPowerValue.minValue = RolandKioskPrint.app.constants.FOIL_PRINT_POWER_MIN;
            txtFoilPowerValue.maxValue = RolandKioskPrint.app.constants.FOIL_PRINT_POWER_MAX;
            txtFoilPowerValue.setValue(template.powerValue);
        } else if (RolandKioskPrint.app.isMetalPrintModel(template)) {
            var txtPrintMessage = view.down('#txtPrintMessage');
            txtPrintMessage.setValue(template.printingMessage);
            txtPrintMessage.maxLength = RolandKioskPrint.app.constants.MAX_PRINT_MESSAGE_LEN;
        }

        // Set focus to product model name field.
        txtProductModelName.focus();

        // Get the details for existing product models.
        // We use this information to derive custom image, localized name and description
        // for the product model being saved.
        this.productModels = [];

        Ext.Ajax.request({
            scope: this,
            url: RolandKioskPrint.app.constants.PRODUCT_MODEL_DETAILS_ALL_URL,
            success: function(response, opts) {
                var data = Ext.decode(response.responseText);
                if (data && data.success) {
                    var productModels = data.productModels;
                    var features = RolandKioskPrint.AppData.getFeatures();
                    if (!features.allowFoilPrint) {
                        // Remove non foil templates.
                        productModels = productModels.filter(function(productModel) {
                            return !RolandKioskPrint.app.isFoilPrintModel(productModel);
                        });
                    }

                    if (!features.allowMetalPrint) {
                        productModels = productModels.filter(function(productModel) {
                            return !RolandKioskPrint.app.isMetalPrintModel(productModel);
                        });
                    }
                    this.productModels = productModels;
                }
            },
            failure: function(response, opts) {
            }
        });
    }

});
