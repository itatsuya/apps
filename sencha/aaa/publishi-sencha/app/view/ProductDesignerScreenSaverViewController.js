/*
 * File: app/view/ProductDesignerScreenSaverViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ProductDesignerScreenSaverViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.productdesignerscreensaver',

    getScreenSaverConfiguration: function() {
        Ext.Ajax.request({
            scope: this,
            url: 'resources/screen-saver/screen_saver_config.json',
            async: false,
            success: function(response, opts){
                var configData = Ext.decode(response.responseText)

                this.getViewModel().setData(configData)

            },
            failure: function(response, opts) {
                Ext.toast(RolandKioskPrint.app.getString('message.pd.screenSaverConfigReadFailed', true))

            }
        })

    },

    setBackgroundImage: function() {
        var component = this.getView()

        var configData = this.getViewModel().getData()


        var nextBGImageIndex = 0

        if (configData.curBGImageIndex >= 0)
        {
            var numImages = configData.screen_saver.images.length

            nextBGImageIndex = (configData.curBGImageIndex + 1) % numImages

        }

        configData.curBGImageIndex = nextBGImageIndex


        var screenSaverImageUrl = configData.screen_saver.images[nextBGImageIndex]

        var url = "url('" + screenSaverImageUrl + "')"

        var bgRepeat = 'no-repeat'

        var bgSize = 'auto'

        var bgPosition = 'center'


        switch (configData.screen_saver.imageArrangement) {
            case 'FIT':
                bgSize = 'contain'

                break

            case 'FILL':
                bgSize = 'cover'

                break

            case 'TILED':
                bgRepeat = 'repeat'

                break

        }

        component.setBodyStyle('background-image', url)

        component.setBodyStyle('background-repeat', bgRepeat)

        component.setBodyStyle('background-size', bgSize)

        component.setBodyStyle('background-position', bgPosition)


        var opacity = configData.screen_saver.opacity ? configData.screen_saver.opacity : 0

        if (opacity > 1) {
            opacity = 1

        } else if(opacity < 0) {
            opacity = 0

        }

        var bgColor = 'rgba(255, 255, 255,' +  (1 - opacity) + ')'


        var coverPanel = this.getView().down('#coverPanel')

        coverPanel.setBodyStyle('background-color', bgColor)

    },

    getScreenSaverTimeout: function() {
        var configData = this.getViewModel().getData()

        return configData.screen_saver.timeout

    },

    showTopScreen: function() {
        if (this.getView().isVisible()) {
            this.redirectTo('#client/top', true)

        }
    },

    setRefreshImageInterval: function() {
        var configData = this.getViewModel().getData()


        var controller = this

        var intervalHandle = setInterval(function() {
            controller.setBackgroundImage()

        }, configData.screen_saver.interval * 1000)


        configData.intervalHandle = intervalHandle

        configData.intervalEnabled = true

    },

    clearRefreshImageInterval: function() {
        var configData = this.getViewModel().getData()

        if (configData.intervalEnabled) {
            clearInterval(configData.intervalHandle)

            configData.intervalEnabled = false

        }
    },

    onPanelAfterRender: function(component, eOpts) {
        this.getScreenSaverConfiguration()

        this.setBackgroundImage()


        component.getEl().on({
            mousedown : {fn: this.showTopScreen, scope: this}
        })


        new Ext.util.KeyMap({
            target: Ext.getBody(),
            binding: [{
                key: [13, 27, 32], //Ext.event.Event.ENTER,ESC,SPACE
                fn: this.showTopScreen,
                scope: this
            }]
        })

    },

    onPanelShow: function(component, eOpts) {
        this.setRefreshImageInterval()

    },

    onPanelHide: function(component, eOpts) {
        this.clearRefreshImageInterval()

    }

})

