/*
 * File: app/view/LoginForm.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.LoginForm', {
    extend: 'Ext.panel.Panel',
    alias: 'widget.loginform',

    requires: [
        'RolandKioskPrint.view.LoginFormViewModel',
        'RolandKioskPrint.view.LoginFormViewController',
        'RolandKioskPrint.view.panel.LangPanel',
        'Ext.form.Panel',
        'Ext.form.field.Text',
        'Ext.form.field.Display',
        'Ext.button.Button',
        'Ext.form.Label',
        'Ext.Img'
    ],

    controller: 'loginform',
    viewModel: {
        type: 'loginform'
    },
    cls: 'pmd-mld-form',
    bodyStyle: 'background-color: rgb(206, 207, 209);',

    layout: {
        type: 'vbox',
        align: 'stretch',
        pack: 'center'
    },
    bind: {
        title: '{loginFormTitle}'
    },
    dockedItems: [
        {
            xtype: 'panel',
            cls: 'separator-bar',
            dock: 'top',
            height: 10,
            header: false
        }
    ],
    items: [
        {
            xtype: 'panel',
            flex: 1,
            cls: 'pmd-mld-form-content-panel',
            header: false,
            layout: {
                type: 'vbox',
                align: 'stretch',
                pack: 'center'
            },
            dockedItems: [
                {
                    xtype: 'panel.langpanel',
                    dock: 'top'
                },
                {
                    xtype: 'panel',
                    dock: 'bottom',
                    height: 40,
                    header: false,
                    layout: {
                        type: 'hbox',
                        align: 'stretch',
                        pack: 'end'
                    },
                    items: [
                        {
                            xtype: 'label',
                            localized: {
                                text: 'label.generic.poweredBy'
                            },
                            cls: 'login-form-label',
                            padding: '10 0 0 0',
                            width: 150,
                            text: 'Powered by'
                        },
                        {
                            xtype: 'image',
                            margin: '0 10 0 10',
                            maxHeight: 28,
                            maxWidth: 125,
                            minHeight: 28,
                            minWidth: 125,
                            src: 'resources/images/RolandWhiteLogo.jpg'
                        }
                    ]
                }
            ],
            items: [
                {
                    xtype: 'form',
                    flex: 1,
                    header: false,
                    layout: {
                        type: 'vbox',
                        align: 'center',
                        pack: 'center'
                    },
                    items: [
                        {
                            xtype: 'textfield',
                            localized: {
                                fieldLabel: 'label.login.userNameLabel'
                            },
                            flex: 0.25,
                            itemId: 'txtUserName',
                            maxHeight: 50,
                            padding: '-50 0 10 0',
                            width: 240,
                            fieldLabel: 'USER NAME',
                            labelAlign: 'top',
                            labelPad: 1,
                            labelSeparator: null,
                            labelStyle: 'text-align: center; font-weight: normal;',
                            msgTarget: 'none',
                            name: 'user-name',
                            fieldStyle: 'background-color: rgb(230, 231, 232); text-align: left; font-weight: normal;',
                            allowBlank: false
                        },
                        {
                            xtype: 'textfield',
                            localized: {
                                fieldLabel: 'label.login.passwordLabel'
                            },
                            flex: 0.25,
                            itemId: 'txtPassword',
                            maxHeight: 50,
                            width: 240,
                            fieldLabel: 'PASSWORD',
                            labelAlign: 'top',
                            labelPad: 1,
                            labelSeparator: null,
                            labelStyle: 'text-align: center; font-weight: normal;',
                            msgTarget: 'none',
                            name: 'password',
                            fieldStyle: 'background-color: rgb(230, 231, 232); text-align: left; font-weight: normal;',
                            inputType: 'password',
                            allowBlank: false,
                            enableKeyEvents: true,
                            listeners: {
                                keydown: 'onPasswordFieldKeydown'
                            }
                        },
                        {
                            xtype: 'displayfield',
                            flex: 0.25,
                            itemId: 'lblErrorMsg',
                            maxHeight: 30,
                            minHeight: 30,
                            width: 400,
                            fieldLabel: 'Label',
                            hideLabel: true,
                            value: ' ',
                            fieldCls: 'login-form-error-msg-label'
                        },
                        {
                            xtype: 'button',
                            handler: function(button, e) {
                                var form = this.up('form').getForm();

                                if (form.isValid()) {
                                    Ext.getBody().mask(RolandKioskPrint.app.getString('message.login.loggingIn'));
                                    form.submit({

                                        url: RolandKioskPrint.app.constants.USER_LOGIN_URL,
                                        scope: this,

                                        success: function(form, action) {
                                            Ext.getBody().unmask();

                                            var formPanel = this.up('form');
                                            formPanel.down('#txtUserName').reset();
                                            formPanel.down('#txtPassword').reset();
                                            formPanel.down('#lblErrorMsg').setValue(' ');

                                            var loginform = this.up('loginform');
                                            var viewModelData = loginform.getViewModel().getData();
                                            loginform.getController().redirectTo(viewModelData.nextView, true);

                                            // Reset the first use flags.
                                            RolandKioskPrint.app.setVarnishFirstUseShown(false);
                                            RolandKioskPrint.app.setBackgroundFirstUseShown(false, false);
                                            RolandKioskPrint.app.setNotPrintColorFirstUseShown(false, false);
                                        },

                                        failure: function(form, action) {
                                            Ext.getBody().unmask();
                                            var errorMsg = '';

                                            if (action.failureType == Ext.form.action.Action.CONNECT_FAILURE) {
                                                errorMsg = RolandKioskPrint.app.getString('message.login.serverUnreachable');
                                            } else {
                                                errorMsg = RolandKioskPrint.app.getString('message.login.incorrectCredential');

                                                if (action.result) {
                                                    switch (action.result.msg) {
                                                        case 2: case 3 :
                                                        errorMsg = RolandKioskPrint.app.getString('message.login.incorrectCredential');
                                                        break;
                                                        case 4:
                                                        errorMsg = RolandKioskPrint.app.getString('message.generic.dongleInvalid');
                                                        break;
                                                    }
                                                }
                                            }

                                            var formPanel = this.up('form');
                                            formPanel.down('#lblErrorMsg').setValue(errorMsg);
                                        }
                                    });
                                }
                            },
                            localized: {
                                text: 'label.login.loginButtonText'
                            },
                            flex: 0.25,
                            focusCls: 'login-button-focus',
                            cls: 'login-button',
                            maxHeight: 30,
                            minHeight: 30,
                            overCls: 'login-button-over',
                            width: 240,
                            text: 'LOGIN'
                        }
                    ]
                }
            ]
        }
    ],
    listeners: {
        show: 'onLoginPanelShow',
        afterrender: 'onLoginPanelAfterRender',
        hide: 'onLoginPanelHide'
    }

});