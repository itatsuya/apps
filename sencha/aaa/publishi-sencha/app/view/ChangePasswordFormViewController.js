/*
 * File: app/view/ChangePasswordFormViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ChangePasswordFormViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.changepasswordform',

    onEnter: function() {
        this.getView().down('#btnChangePassword').click()

    },

    onKeydown: function(event, field) {
        if (!this.showCapsLockWarning) {
            return

        }

        var capsLockOn = event.getModifierState && event.getModifierState('CapsLock')

        var lblErrorMsg = this.getView().down('#lblErrorMsg')


        if (field) {
            if (capsLockOn) {
                lblErrorMsg.setValue(RolandKioskPrint.app.getString('message.generic.capsLockON'))

            } else {
                lblErrorMsg.reset()

            }
            return

        }

        // Clear the caps lock ON warning if caps lock is turned OFF.
        if (event.keyCode === 20 && !capsLockOn &&
            lblErrorMsg.getValue() === RolandKioskPrint.app.getString('message.generic.capsLockON')) {
            lblErrorMsg.reset()

        }
    },

    onCurrentPassKeydown: function(textfield, e, eOpts) {
        this.onKeydown(e.event, textfield)

    },

    onNewPassKeydown: function(textfield, e, eOpts) {
        this.onKeydown(e.event, textfield)

    },

    onConfimPassKeydown: function(textfield, e, eOpts) {
        if (e.getKey() == e.ENTER) {
            this.onEnter()

            return

        }

        this.onKeydown(e.event, textfield)

    },

    onCancelButtonClick: function(button, e, eOpts) {
        this.redirectTo('#template/main', true)

    },

    onChangeButtonClick: function(button, e, eOpts) {
        var view = this.getView()


        var lblErrorMsg = view.down('#lblErrorMsg')

        lblErrorMsg.reset()


        var form = view.down('form').getForm()

        if (!form.isValid()) {
            return

        }

        var txtNewPassword = view.down('#txtNewPassword')

        var txtConfirmNewPassword = view.down('#txtConfirmNewPassword')


        if (txtNewPassword.getValue() != txtConfirmNewPassword.getValue()) {
            lblErrorMsg.setValue(RolandKioskPrint.app.getString('message.passwordChange.confirmPasswordDifferent'))

            return

        }

        Ext.getBody().mask('Wait...')


        var me = this

        form.submit({
            url: RolandKioskPrint.app.constants.PASSWORD_CHANGE_URL,
            scope: this,
            success: function(form, action) {
                Ext.getBody().unmask()

                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.success'),
                RolandKioskPrint.app.getString('message.passwordChange.passwordChangeSuccess'),
                function() {
                    me.redirectTo('#template/main', true)

                })

            },
            failure: function(form, action) {
                Ext.getBody().unmask()

                var errorMsg = ''


                switch (action.failureType) {
                    case Ext.form.action.Action.CONNECT_FAILURE:
                    errorMsg = RolandKioskPrint.app.getString('message.login.serverUnreachable')

                    break

                    case Ext.form.action.Action.SERVER_INVALID:
                    errorMsg = RolandKioskPrint.app.getString('message.passwordChange.incorrectPassword')

                }
                lblErrorMsg.setValue(errorMsg)

            }
        })

    },

    onPanelShow: function(component, eOpts) {
        var txtCurrentPassword = this.getView().down('#txtCurrentPassword')

        txtCurrentPassword.focus()


        if (this.showCapsLockWarning) {
            document.addEventListener('keydown', this.keyDownHandler)

        }
    },

    onPanelBeforeShow: function(component, eOpts) {
        var view = this.getView()


        // Set max length limit on the password fields.
        var txtNewPassword = view.down('#txtNewPassword')

        txtNewPassword.maxLength = RolandKioskPrint.app.constants.MAX_USER_PASSWD_LEN


        var txtConfirmNewPassword = view.down('#txtConfirmNewPassword')

        txtConfirmNewPassword.maxLength = RolandKioskPrint.app.constants.MAX_USER_PASSWD_LEN


        // Reset the password fields and the error message label.
        var txtCurrentPassword = view.down('#txtCurrentPassword')

        txtCurrentPassword.reset()

        txtNewPassword.reset()

        txtConfirmNewPassword.reset()


        var lblErrorMsg = view.down('#lblErrorMsg')

        lblErrorMsg.reset()

    },

    onPanelAfterRender: function(component, eOpts) {
        this.showCapsLockWarning = (Ext.os.deviceType != 'Tablet' && Ext.os.deviceType != 'Phone')

        var me = this

        this.keyDownHandler = function(event) {
            me.onKeydown(event)

        }

    },

    onPanelHide: function(component, eOpts) {
        if (this.showCapsLockWarning) {
            document.removeEventListener('keydown', this.keyDownHandler)

        }
    }

})

