/*
 * File: app/view/ProductDesignerServiceTermsViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ProductDesignerServiceTermsViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.productdesignerserviceterms',

    getTopScreenConfiguration: function() {
        Ext.Ajax.request({
            scope: this,
            url: 'resources/top-screen/top_config.json',
            async: false,
            success: function(response, opts) {
                var configData = Ext.decode(response.responseText);

                if (configData) {
                    this.getViewModel().setData(configData);
                }
            },
            failure: function(response, opts) {
                Ext.toast(RolandKioskPrint.app.getString('message.pd.topConfigReadFailed', true));
            }
        });
    },

    setCompBackgroundImage: function(component, imageUrl) {
        var url = "url('" + RolandKioskPrint.AppData.getURLWithNonce(imageUrl) + "')";

        component.setStyle({
            backgroundImage: url,
            backgroundRepeat: 'no-repeat',
            backgroundSize: 'contain',
            backgroundPosition: 'center center'
        });
    },

    setBackgroundImages: function() {
        var configData = this.getViewModel().getData();

        if (configData.companyLogo) {
            var companyLogo = this.getView().down('#companyLogo');
            this.setCompBackgroundImage(companyLogo, configData.companyLogo);
        }
    },

    setScreenText: function() {
        var configData = this.getViewModel().getData() || {};
        var termsOfService = configData.termsOfService || {};

        var language = RolandKioskPrint.app.getPrefClientLanguage();

        var title = 'Terms of Services',
            description = '',
            acceptanceText = 'I agree.';

        // Get the strings for the current language.
        if (termsOfService[language]) {
            title = termsOfService[language].title || 'Terms of Services';
            description = termsOfService[language].description || '';
            acceptanceText = termsOfService[language].acceptance || 'I agree.';
        }

        // Remove newlines with <br>.
        description = description.replace(/(?:\r\n|\r|\n)/g, '<br>');

        this.getViewModel().set({
            termsOfServiceTitle: title,
            termsOfServiceDesc: description,
            acceptanceText: acceptanceText
        });

        // Automatic sizing is not working for the checkbox label.
        // So setting it explicitly.
        var measureElement = Ext.getBody().createChild();
        measureElement.addCls('acceptance-button-measure');

        var textMetrics = new Ext.util.TextMetrics(measureElement);
        var width = textMetrics.getWidth(acceptanceText);

        var chkAccept = this.getView().down('#chkAccept');
        chkAccept.setWidth(width + 40); // Add 40px for checkbox and gap.
    },

    onBackButtonClick: function(button, e, eOpts) {
        this.redirectTo('#client/top', true);
    },

    onOKButtonClick: function(button, e, eOpts) {
        this.redirectTo('#client/catalog', true);
    },

    onPanelAfterRender: function(component, eOpts) {
        this.getTopScreenConfiguration();
        this.setBackgroundImages();
        this.setScreenText();
    },

    onPanelHide: function(component, eOpts) {
        // Close the languages drop down, if open.
        var langPanel = this.getView().down('#langPanel');
        langPanel.getController().closeLanguagesDropDown();
    },

    onPanelShow: function(component, eOpts) {
        // Turn off the accept checkbox.
        var chkAccept = this.getView().down('#chkAccept');
        chkAccept.setValue(false);

        // Start tracking user activity.
        RolandKioskPrint.app.startTrackingActivity();
    }

});
