/*
 * File: app/view/ModelLayoutDesignerSaveViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ModelLayoutDesignerSaveViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.modellayoutdesignersave',

    saveModelLayout: function(modelLayoutName, overwriting) {
        var modelLayoutData = this.getViewModel().getData()


        // Remove mappings when overwriting to a different name.
        var updateMapping = (overwriting && modelLayoutData.layoutName != modelLayoutName)


        modelLayoutData.layoutName = modelLayoutName

        modelLayoutData.updateMapping = updateMapping


        // Debug log.
        //var s = Ext.util.JSON.encode(modelLayoutData)

        //console.log(s)


        var modelLayoutSaveView = this.getView()

        modelLayoutSaveView.getEl().mask(RolandKioskPrint.app.getString('message.pmd_mld.savingML'))


        // Upload the template to server.
        Ext.Ajax.request({
            scope: this,
            method: 'POST',
            url: RolandKioskPrint.app.constants.MODEL_LAYOUT_URL,
            jsonData: modelLayoutData,
            success: function(response, opts) {
                modelLayoutSaveView.getEl().unmask()


                var responseData = Ext.decode(response.responseText)

                if (!responseData || !responseData.success) {
                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                                  RolandKioskPrint.app.getString('message.pmd_mld.mlSaveFailed'))

                    return

                }

                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.success'),
                              RolandKioskPrint.app.getString('message.pmd_mld.mlSaved'))


                this.fireEvent('modelLayoutSaved', {
                    layoutName: modelLayoutName,
                    updateMapping: updateMapping
                })


                RolandKioskPrint.app.destroyModalView(modelLayoutSaveView)

                this.redirectTo('template/main')

            },
            failure: function() {
                modelLayoutSaveView.getEl().unmask()

                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed'),
                              RolandKioskPrint.app.getString('message.pmd_mld.mlSaveFailed'))

            }
        })

    },

    containsIgnoreCase: function(store, column, value) {
        // Do a full case insensitive match.
        return store.find(column, value, 0, false, false, true) >= 0

    },

    disableFilters: function(disable) {
        var store = this.modelLayoutsStore


        if (disable) {
            store.clearFilter()

        } else {
            if (store.printTypeFilter) {
                store.getFilters().add(store.printTypeFilter)

            }
        }
    },

    onModelLayoutListSelect: function(rowmodel, record, index, eOpts) {
        var txtModelLayoutName = this.getView().down('#txtModelLayoutName')

        txtModelLayoutName.setValue(record.data.layoutName)

    },

    onCancelButtonClick: function(button, e, eOpts) {
        // Re-enable the filters.
        this.disableFilters(false)


        RolandKioskPrint.app.destroyModalView(this.getView())

    },

    onSaveButtonClick: function(button, e, eOpts) {
        var txtModelLayoutName = this.getView().down('#txtModelLayoutName')

        if (!txtModelLayoutName.isValid()) {
            txtModelLayoutName.focus()

            return

        }

        // Check if a model layout by this name already exists.
        // If yes, we ask the user for overwrite confirmation.
        var modelLayoutName = txtModelLayoutName.getValue()


        var store = this.modelLayoutsStore

        var exists = this.containsIgnoreCase(store, 'layoutName', modelLayoutName)


        // Re-enable the filters.
        this.disableFilters(false)


        if (exists) {
            // Get overwrite confirmation from user.
            var msg = Ext.String.format(
            RolandKioskPrint.app.getString('message.pmd_mld.mlSaveComfirmation'),
            modelLayoutName)

            Ext.Msg.confirm(RolandKioskPrint.app.getString('message.generic.confirmation'),
            msg, function(btnText) {
                if (btnText == 'yes') {
                    this.saveModelLayout(modelLayoutName, true)

                }
            }, this)

            return false

        }

        this.saveModelLayout(modelLayoutName, false)

    },

    onPanelShow: function(component, eOpts) {
        var txtModelLayoutName = this.getView().down('#txtModelLayoutName')


        var modelLayoutData = this.getViewModel().getData()

        txtModelLayoutName.setValue(modelLayoutData.layoutName)

        txtModelLayoutName.maxLength = RolandKioskPrint.app.constants.MAX_MODEL_LAYOUT_NAME_LEN


        txtModelLayoutName.focus()


        // Clear any filters to list all the model layouts.
        this.modelLayoutsStore = this.getView().down('#modelLayoutList').getStore()

        this.disableFilters(true)

    }

})

