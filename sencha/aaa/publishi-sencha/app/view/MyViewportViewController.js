/*
 * File: app/view/MyViewportViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.MyViewportViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.myviewport',

    requires: [
        'Ext.route.Route'
    ],

    routes: {
        'template/main': 'onPMDMLDMain',
        'print-layout/new': 'onModelLayoutDesignerNew',
        'print-layout/edit': 'onModelLayoutDesignerEdit',
        'print-layout/import': 'onModelLayoutDesignerImport',
        'print-layout/preview': 'onModelLayoutDesignerPreview',
        'template/new': 'onProductModelDesignerNew',
        'template/edit': 'onProductModelDesignerEdit',
        'template/import': 'onProductModelDesignerImport',
        'template/preview': 'onProductModelDesignerPreview',
        'template/content': 'onProductModelDesignerContent',
        'client/catalog': 'onProductDesignerCatalog',
        'client/check': 'onProductDesignerCheck',
        'client/custom': 'onProductDesignerCustomSize',
        'client/editcontent': 'onProductDesignerEditContent',
        'order/create': 'onOrderCreate',
        'order/confirmation': 'onOrderConfirmation',
        'order-viewer': 'onOrderViewer',
        'login': 'onLoginForm',
        'change-password': 'onChangePassword',
        'client/top': 'onProductDesignerTop',
        'client/screen-saver': 'onProductDesignerScreenSaver',
        'client/service-terms': 'onProductDesignerServiceTerms'
    },

    onPMDMLDMain: function() {
        this.redirectViaLoginForm('#pmdMldMainView', '#template/main')

    },

    onModelLayoutDesignerNew: function() {
        this.ensureActiveModelLayout('#modelLayoutDesignerView', '#template/main')

    },

    onModelLayoutDesignerEdit: function() {
        this.ensureActiveModelLayout('#modelLayoutDesignerView', '#template/main')

    },

    onModelLayoutDesignerImport: function() {
        this.ensureActiveModelLayout('#modelLayoutDesignerView', '#template/main')

    },

    onModelLayoutDesignerPreview: function() {
        this.ensureActiveModelLayout('#modelLayoutDesignerView', '#template/main')

    },

    onProductModelDesignerNew: function() {
         this.ensureActiveProductModel('#productModelDesignerSizeView', '#template/main')

    },

    onProductModelDesignerEdit: function() {
        this.ensureActiveProductModel('#productModelDesignerSizeView', '#template/main')

    },

    onProductModelDesignerImport: function() {
        var productModelData = RolandKioskPrint.AppData.productModelData

        if (productModelData && (productModelData.isFoilPrint() || productModelData.isMetalPrint() || productModelData.isCutPrint())) {
            // Need to specify the material settings.
            this.ensureActiveProductModel('#productModelDesignerSizeView', '#template/main')

        } else {
            this.ensureActiveProductModel('#productModelDesignerContentView', '#template/main')

        }
    },

    onProductModelDesignerPreview: function() {
        this.ensureActiveProductModel('#productModelDesignerPreviewView', '#template/main')

    },

    onProductModelDesignerContent: function() {
        this.ensureActiveProductModel('#productModelDesignerContentView', '#template/main')

    },

    onProductDesignerCatalog: function() {
        RolandKioskPrint.AppData.appMode = RolandKioskPrint.app.constants.APP_MODE_PRODUCT_DESIGNER

        this.showView('#catalogView')

    },

    onProductDesignerCheck: function() {
        this.ensureActiveProductModel('#productDesignerCheckView', '#client/top')

    },

    onProductDesignerCustomSize: function() {
        this.ensureActiveProductModel('#productDesignerCustomSizeView', '#client/top')

    },

    onProductDesignerEditContent: function() {
        this.ensureActiveProductModel('#designerView', '#client/top')

    },

    onOrderCreate: function() {
        this.ensureActiveProductModel('#orderCreateView', '#client/top')

    },

    onOrderConfirmation: function() {
        this.ensureActiveProductModel('#orderConfirmationView', '#client/top')

    },

    onOrderViewer: function() {
        RolandKioskPrint.AppData.appMode = RolandKioskPrint.app.constants.APP_MODE_ORDER_VIEWER

        this.redirectViaLoginForm('#orderViewerView', '#order-viewer')

    },

    hideAllViews: function(excludeBackgroundView) {
        var views = this.getView().items

        for (var i = (excludeBackgroundView ? 1 : 0)
 i < views.getCount(); i++) {
            var view = views.get(i)

            view.hide()

        }
    },

    onLoginForm: function() {
        var loginFormView = this.getView().child('#loginFormView')

        var viewModelData = loginFormView.getViewModel().getData()

        if (!viewModelData || !viewModelData.nextView)
        {
            // Login form opened directly. Check if already logged in
            Ext.getBody().mask(RolandKioskPrint.app.getString('message.generic.loading', false))

            Ext.Ajax.request({
                scope: this,
                url: RolandKioskPrint.app.constants.USER_PROFILE_URL,
                cors: true,
                success: function(response, opts){
                    var userProfile = Ext.decode(response.responseText)


                    Ext.getBody().unmask()

                    if (userProfile.userName) {
                        this.redirectTo('#template/main', true)

                    } else {
                        this.showView('#loginFormView')

                    }
                },
                failure: function(response, opts) {
                    Ext.getBody().unmask()

                    Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed', false),
                                  RolandKioskPrint.app.getString('message.login.serverUnreachable', false))

                }
            })

        }
        else {
            // Redirected from another view.
            this.showView('#loginFormView')

        }
    },

    redirectViaLoginForm: function(nextViewItemId, nextViewToken) {
        Ext.getBody().mask(RolandKioskPrint.app.getString('message.generic.loading', false))

        Ext.Ajax.request({
            scope: this,
            url: RolandKioskPrint.app.constants.USER_PROFILE_URL,
            cors: true,
            success: function(response, opts){
                var userProfile = Ext.decode(response.responseText)


                Ext.getBody().unmask()

                if (userProfile.userName) {
                    this.showView(nextViewItemId)

                } else {
                    var loginFormView = this.getView().child('#loginFormView')

                    loginFormView.getViewModel().setData({
                        nextView : nextViewToken
                    })

                    this.redirectTo('#login', true)

                }
            },
            failure: function(response, opts) {
                Ext.getBody().unmask()

                Ext.Msg.alert(RolandKioskPrint.app.getString('message.generic.failed', false),
                              RolandKioskPrint.app.getString('message.login.serverUnreachable', false))

            }
        })

    },

    onChangePassword: function() {
        this.redirectViaLoginForm('#changePasswordFormView', '#change-password')

    },

    onProductDesignerTop: function() {
        RolandKioskPrint.AppData.appMode = RolandKioskPrint.app.constants.APP_MODE_PRODUCT_DESIGNER


        var catalog = this.getView().child('#catalogView')

        catalog.getController().resetCatalogView()


        this.showView('#productDesignerTopView')

    },

    onProductDesignerScreenSaver: function() {
        RolandKioskPrint.AppData.appMode = RolandKioskPrint.app.constants.APP_MODE_PRODUCT_DESIGNER

        this.showView('#productDesignerScreenSaverView')

    },

    onProductDesignerServiceTerms: function() {
        RolandKioskPrint.AppData.appMode = RolandKioskPrint.app.constants.APP_MODE_PRODUCT_DESIGNER

        this.showView('#productDesignerServiceTermsView')

    },

    ensureActiveModelLayout: function(nextViewItemId, fallbackViewToken) {
        var modelLayoutData = RolandKioskPrint.AppData.modelLayoutData

        if (!modelLayoutData) {
            this.redirectTo(fallbackViewToken, true)

        } else {
            RolandKioskPrint.AppData.appMode = RolandKioskPrint.app.constants.APP_MODE_MODEL_LAYOUT_DESIGNER

            this.showView(nextViewItemId)

        }
    },

    ensureActiveProductModel: function(nextViewItemId, fallbackViewToken) {
        var productModelData = RolandKioskPrint.AppData.productModelData

        if (!productModelData) {
            this.redirectTo(fallbackViewToken, true)

        } else {
            if (fallbackViewToken == '#template/main') {
                RolandKioskPrint.AppData.appMode = RolandKioskPrint.app.constants.APP_MODE_PRODUCT_MODEL_DESIGNER

            } else {
                RolandKioskPrint.AppData.appMode = RolandKioskPrint.app.constants.APP_MODE_PRODUCT_DESIGNER

            }
            this.showView(nextViewItemId)

        }
    },

    localizeMessageBoxLabels: function(isClient) {
        Ext.apply(Ext.Msg.buttonText, {
            ok: RolandKioskPrint.app.getString('label.button.ok', isClient),
            cancel: RolandKioskPrint.app.getString('label.button.cancel', isClient),
            yes: RolandKioskPrint.app.getString('label.button.yes', isClient),
            no: RolandKioskPrint.app.getString('label.button.no', isClient)
        })

    },

    showView: function(viewItemId) {
        var view = this.getView().child(viewItemId)

        var isProductDesigner = RolandKioskPrint.AppData.isProductDesigner()


        // Show the background view when running product designer.
        if (isProductDesigner) {
            this.hideAllViews(true)


            var backgroundView = this.getView().child('#backgroundView')

            backgroundView.show()


            // Absolute position the view so that it overlaps the background.
            view.setStyle({
                position: 'absolute',
                left: '0px',
                top: '0px'
            })

            view.show()

        } else {
            this.hideAllViews()

            view.show()

        }

        // Localize the message box labels.
        this.localizeMessageBoxLabels(isProductDesigner)

    },

    onMyViewportAfterRender: function(component, eOpts) {
        // Suppress the MS IE and Edge browsers caps lock warning overlay.
        document.msCapsLockWarningOff = true


        RolandKioskPrint.app.setUiSettings(this.getView().child('#backgroundView'), 'viewport')

        RolandKioskPrint.app.setFontSettings()

        RolandKioskPrint.app.setCatalogUISettings()

    }

})

