/*
 * File: app/view/ProductModelDesignerSizeViewController.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

Ext.define('RolandKioskPrint.view.ProductModelDesignerSizeViewController', {
    extend: 'Ext.app.ViewController',
    alias: 'controller.productmodeldesignersize',

    onCancelButtonClick: function(button, e, eOpts) {
        this.redirectTo('#template/main', true)

    },

    onNextButtonClick: function(button, e, eOpts) {
        var productSizeInputPanel = this.getView().down('#productSizeInputPanel')

        if (!productSizeInputPanel.getController().validateUserInput()) {
            return

        }

        // Set the new/updated size data, and redirect to designer.
        var productModelData = RolandKioskPrint.AppData.productModelData

        var productSizeData = productSizeInputPanel.getController().getProductSizeData()


        if (productSizeData.customSize) {
            // Plug in dummy values.
            productModelData.unitsCreated = 'mm'

            productModelData.productWidth = 100

            productModelData.productHeight = 100

            productModelData.leftMargin = 0

            productModelData.rightMargin = 0

            productModelData.topMargin = 0

            productModelData.bottomMargin = 0

            productModelData.cornerRadius = 0

            productModelData.offsetX = 0

            productModelData.offsetY = 0

        } else {
            productModelData.unitsCreated = productSizeData.units

            productModelData.productWidth = productSizeData.widthMM

            productModelData.productHeight = productSizeData.heightMM

            productModelData.leftMargin = productSizeData.leftMarginMM

            productModelData.rightMargin = productSizeData.rightMarginMM

            productModelData.topMargin = productSizeData.topMarginMM

            productModelData.bottomMargin = productSizeData.bottomMarginMM

            productModelData.cornerRadius = productSizeData.cornerRadiusMM

            productModelData.offsetX = productSizeData.xOffsetMM

            productModelData.offsetY = productSizeData.yOffsetMM


            // Update the units preference.
            RolandKioskPrint.app.setPrefUnits(productSizeData.units)

        }

        productModelData.customSize = productSizeData.customSize

        productModelData.printType = productSizeData.printType


        if (productModelData.isMetalPrint()) {
            productModelData.oldMaterial = productModelData.material

            productModelData.oldMaterialColor = productModelData.materialColor

            productModelData.material = productSizeData.material

            productModelData.materialColor = productSizeData.materialColor

            productModelData.markingMode = productSizeData.markingMode

            productModelData.bidiPrint = productSizeData.bidiPrint

            productModelData.enableOutline = productSizeData.enableOutline

        }

        if (productModelData.isCutPrint()) {
            productModelData.cutMaterial = productSizeData.cutMaterial

            productModelData.cutMaterialColorName = productSizeData.cutMaterialColorName

            productModelData.cutMaterialColor = productSizeData.cutMaterialColor

        }

        if (productModelData.isFoilPrint()) {
            productModelData.foilEnableOutline = productSizeData.foilEnableOutline

        }

        this.redirectTo('#template/content', true)

    },

    onMainViewShow: function(component, eOpts) {
        var productSizeInputPanel = this.getView().down('#productSizeInputPanel')

        productSizeInputPanel.getController().setFocus()

    },

    onMainViewBeforeShow: function(component, eOpts) {
        // Get features.
        var features = RolandKioskPrint.AppData.getFeatures()

        var printTypeHidden = !features.allowFoilPrint && !features.allowMetalPrint


        // Get the materials stores.
        var materialsStore = Ext.StoreManager.lookup('MarkingMaterials')

        var cutMaterialsStore = Ext.StoreManager.lookup('CuttingMaterials')


        // Initialize as per the mode.
        var mode = RolandKioskPrint.AppData.productModelDesignerMode

        if (mode == RolandKioskPrint.app.constants.PRODUCT_MODEL_EDIT) {
            var productModelData = RolandKioskPrint.AppData.productModelData


            var viewData = {
                designerMode: mode,
                modelName: productModelData.modelName
            }


            this.getViewModel().setData(viewData)
 // Set the view model data.

            // Check if the material exists.
            var getIgnoreCase = RolandKioskPrint.app.getIgnoreCase,
                material = getIgnoreCase(materialsStore, 'materialName', productModelData.material),
                cutMaterial = getIgnoreCase(cutMaterialsStore, 'materialName', productModelData.cutMaterial)


            // Check if the cut material color exists.
            var cutMaterialColorName = productModelData.cutMaterialColorName

            if (cutMaterial) {
                var materialColors = cutMaterial.data.materialColors,
                    cutMaterialColorNameLower = cutMaterialColorName.toLowerCase(),
                    matchFound = false

                for (var i = 0, length = materialColors.length
 i < length; i++) {
                    if (cutMaterialColorNameLower == materialColors[i].colorName.toLowerCase()) {
                        matchFound = true

                        break

                    }
                }

                if (!matchFound) {
                    cutMaterialColorName = null

                }
            } else {
                cutMaterialColorName = null

            }

            // Set values from product model being edited.
            var productSizeData = {
                units: productModelData.unitsCreated,
                widthMM: productModelData.productWidth,
                heightMM: productModelData.productHeight,
                leftMarginMM: productModelData.leftMargin,
                rightMarginMM: productModelData.rightMargin,
                topMarginMM: productModelData.topMargin,
                bottomMarginMM: productModelData.bottomMargin,
                cornerRadiusMM: productModelData.cornerRadius,
                customSize: (productModelData.customSize === undefined) ? false : productModelData.customSize,
                customSizeEditable: false, // Don't allow 'custom size' to be changed
                customSizeHidden: false,
                printType: productModelData.printType,
                printTypeEditable: false,
                editable: (productModelData.source != 'SVG'),
                printTypeHidden: printTypeHidden,
                markingMode: productModelData.markingMode || RolandKioskPrint.app.constants.MARKING_MODE_DEFAULT,
                material: (material !== null) ? material.data.materialName : null,
                materialColor: (material !== null) ? material.data.materialColor : null,
                bidiPrint: productModelData.bidiPrint || false,
                enableOutline: productModelData.enableOutline || false,
                cutMaterial: (cutMaterial !== null) ? cutMaterial.data.materialName : null,
                cutMaterialColorName: cutMaterialColorName,
                xOffsetMM: productModelData.offsetX || RolandKioskPrint.app.constants.PRODUCT_OFFSET_DEFAULT,
                yOffsetMM: productModelData.offsetY || RolandKioskPrint.app.constants.PRODUCT_OFFSET_DEFAULT,
                foilEnableOutline: productModelData.foilEnableOutline || false
            }


            var productSizeInputPanel = this.getView().down('#productSizeInputPanel')

            productSizeInputPanel.getController().initialize(productSizeData)


        } else if (mode == RolandKioskPrint.app.constants.PRODUCT_MODEL_IMPORT) {
            var productModelData = RolandKioskPrint.AppData.productModelData


            var viewData = {
                designerMode: mode,
                modelName: productModelData.modelName
            }


            this.getViewModel().setData(viewData)
 // Set the view model data.

            // Set the default materials.
            var defaultMaterial = materialsStore.getAt(0)

            var defaultCutMaterial = cutMaterialsStore.getAt(0)


            // Set values from product model being edited.
            var productSizeData = {
                units: RolandKioskPrint.app.getPrefUnits(),
                widthMM: productModelData.productWidth,
                heightMM: productModelData.productHeight,
                leftMarginMM: productModelData.leftMargin,
                rightMarginMM: productModelData.rightMargin,
                topMarginMM: productModelData.topMargin,
                bottomMarginMM: productModelData.bottomMargin,
                cornerRadiusMM: productModelData.cornerRadius,
                customSize: false,
                customSizeEditable: false, // Don't allow 'custom size' to be changed
                customSizeHidden: false,
                printType: productModelData.printType,
                printTypeEditable: false,
                editable: false,
                printTypeHidden: printTypeHidden,
                markingMode: RolandKioskPrint.app.constants.MARKING_MODE_DEFAULT,
                material: (defaultMaterial !== null) ? defaultMaterial.data.materialName : null,
                materialColor: (defaultMaterial !== null) ? defaultMaterial.data.materialColor : null,
                bidiPrint: false,
                enableOutline: false,
                cutMaterial: (defaultCutMaterial !== null) ? defaultCutMaterial.data.materialName : null,
                cutMaterialColorName: (defaultCutMaterial !== null) ? defaultCutMaterial.data.materialColors[0].colorName : null,
                foilEnableOutline: false
            }


            var productSizeInputPanel = this.getView().down('#productSizeInputPanel')

            productSizeInputPanel.getController().initialize(productSizeData)


        } else {
            // mode == RolandKioskPrint.app.constants.PRODUCT_MODEL_NEW
            var viewData = {
                designerMode: mode,
                modelName: ''
            }


            this.getViewModel().setData(viewData)
 // Set the view model data.

            // Set the default materials.
            var defaultMaterial = materialsStore.getAt(0)

            var defaultCutMaterial = cutMaterialsStore.getAt(0)


            // Set default values.
            var productSizeData = {
                units: RolandKioskPrint.app.getPrefUnits(),
                widthMM: RolandKioskPrint.app.constants.PRODUCT_WIDTH_DEFAULT,
                heightMM: RolandKioskPrint.app.constants.PRODUCT_HEIGHT_DEFAULT,
                leftMarginMM: RolandKioskPrint.app.constants.PRODUCT_MARGIN_DEFAULT,
                rightMarginMM: RolandKioskPrint.app.constants.PRODUCT_MARGIN_DEFAULT,
                topMarginMM: RolandKioskPrint.app.constants.PRODUCT_MARGIN_DEFAULT,
                bottomMarginMM: RolandKioskPrint.app.constants.PRODUCT_MARGIN_DEFAULT,
                cornerRadiusMM: RolandKioskPrint.app.constants.PRODUCT_CORNER_RADIUS_DEFAULT,
                customSize: false,
                customSizeEditable: true,
                customSizeHidden: false,
                editable: true,
                printType: RolandKioskPrint.app.constants.PRINT_TYPE_COLOR,
                printTypeEditable: true,
                markingMode: RolandKioskPrint.app.constants.MARKING_MODE_DEFAULT,
                material: (defaultMaterial !== null) ? defaultMaterial.data.materialName : null,
                materialColor: (defaultMaterial !== null) ? defaultMaterial.data.materialColor : null,
                bidiPrint: false,
                enableOutline: false,
                cutMaterial: (defaultCutMaterial !== null) ? defaultCutMaterial.data.materialName : null,
                cutMaterialColorName: (defaultCutMaterial !== null) ? defaultCutMaterial.data.materialColors[0].colorName : null,
                printTypeHidden: printTypeHidden,
                xOffsetMM: RolandKioskPrint.app.constants.PRODUCT_OFFSET_DEFAULT,
                yOffsetMM: RolandKioskPrint.app.constants.PRODUCT_OFFSET_DEFAULT,
                foilEnableOutline: false
            }


            var productSizeInputPanel = this.getView().down('#productSizeInputPanel')

            productSizeInputPanel.getController().initialize(productSizeData)

        }
    }

})

