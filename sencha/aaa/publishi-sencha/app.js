/*
 * File: app.js
 *
 * This file was generated by Sencha Architect version 4.2.4.
 * http://www.sencha.com/products/architect/
 *
 * This file requires use of the Ext JS 6.6.x Classic library, under independent license.
 * License of Sencha Architect does not include license for Ext JS 6.6.x Classic. For more
 * details see http://www.sencha.com/license or contact license@sencha.com.
 *
 * This file will be auto-generated each and everytime you save your project.
 *
 * Do NOT hand edit this file.
 */

// @require @packageOverrides
Ext.Loader.setConfig({

});


Ext.application({
    constants: {
        // Server urls
        PRODUCT_MODEL_IMAGE_UPLOAD_URL: '/cotodesign/image/upload?type=product-model',
        PRODUCT_MODEL_IMAGE_LIST_URL: '/cotodesign/image/list?type=product-model',
        PRODUCT_MODEL_BG_IMAGE_UPLOAD_URL: '/cotodesign/image/upload?type=product-model-background',
        PRODUCT_MODEL_BG_IMAGE_LIST_URL: '/cotodesign/image/list?type=product-model-background',
        END_USER_IMAGE_UPLOAD_URL: '/cotodesign/image/upload?type=end-user',
        END_USER_IMAGE_LIST_URL: '/cotodesign/image/list?type=end-user',
        END_USER_BG_IMAGE_UPLOAD_URL: '/cotodesign/image/upload?type=end-user-background',
        END_USER_BG_IMAGE_LIST_URL: '/cotodesign/image/list?type=end-user-background',
        END_USER_TRANSFER_IMAGE_URL: '/cotodesign/image/transfer?type=end-user',
        PRODUCT_MODEL_TRANSFER_IMAGE_URL: '/cotodesign/image/transfer?type=product-model',
        QRCODE_GENERATE_URL: '/cotodesign/image/qrcode?type={0}&lang={1}',
        NETWORK_SETTINGS_QRCODE_GENERATE_URL: '/cotodesign/image/qrcode?type=network-settings',
        END_USER_IMAGE_DELETE_URL: '/cotodesign/image/delete?type=end-user',
        MODEL_LAYOUT_URL: '/cotodesign/model-layout',
        PRODUCT_MODEL_URL: '/cotodesign/product-model',
        PRODUCT_MODEL_DETAILS_URL: '/cotodesign/product-model?details=true&lang={0}',
        PRODUCT_MODEL_DETAILS_ALL_URL: '/cotodesign/product-model?details=true',
        MODEL_LAYOUT_MAPPING: '/cotodesign/product-model/layout-mapping',
        IMPORT_PRODUCT_MODEL_URL: '/cotodesign/import-product-model',
        ORDER_DATA_URL: '/cotodesign/order',
        ALL_ORDERS_URL: '/cotodesign/order/all-orders',
        UNPAID_ORDERS_URL: '/cotodesign/order/unpaid-orders',
        ORDERS_PAYMENT_URL: '/cotodesign/order/order-payment',
        ORDERS_DELIVERY_URL: '/cotodesign/order/order-delivery',
        USER_LOGIN_URL: '/cotodesign/user/login',
        USER_LOGOUT_URL: '/cotodesign/user/logout',
        USER_PROFILE_URL: '/cotodesign/user/profile',
        PASSWORD_CHANGE_URL: '/cotodesign/user/password-change',
        LANGUAGE_LIST_URL: 'resources/system/languages/langList.json',
        CLIENT_LANGUAGE_LIST_URL: 'resources/user/client-languages/langList.json',
        LANGUAGE_STRINGS_URL: 'resources/system/languages/{0}.json',
        CLIENT_LANGUAGE_STRINGS_URL: 'resources/user/client-languages/{0}.json',
        UI_SETTINGS_URL: 'resources/ui-settings/settings.json',
        COLOR_SETTINGS_URL: '/cotodesign/resources/colors',
        FOILCOLOR_SETTINGS_URL: '/cotodesign/resources/foil-colors',
        CATALOG_UI_SETTINGS_URL: 'resources/catalog-settings/settings.json',
        FEATURES_URL: '/cotodesign/features',
        VERIFY_DONGLE_URL: '/cotodesign/verify-dongle',
        IMAGE_OUTLINE_URL: '/cotodesign/image/outline',
        // Application modes
        APP_MODE_MODEL_LAYOUT_DESIGNER: 0,
        APP_MODE_PRODUCT_MODEL_DESIGNER: 1,
        APP_MODE_PRODUCT_DESIGNER: 2,
        APP_MODE_ORDER_VIEWER: 3,
        // Catalog Grid settings
        CATALOG_GRID_ROW_ITEMS_MAX: 3,
        CATALOG_GRID_ITEM_WIDTH_MIN: 300,
        CATALOG_GRID_ITEM_HEIGHT_MIN: 176,
        // Model Layout Designer modes
        MODEL_LAYOUT_NEW: 0,
        MODEL_LAYOUT_EDIT: 1,
        MODEL_LAYOUT_IMPORT: 2,
        MODEL_LAYOUT_PREVIEW: 3,
        // Product Model Designer modes
        PRODUCT_MODEL_NEW: 0,
        PRODUCT_MODEL_EDIT: 1,
        PRODUCT_MODEL_IMPORT: 2,
        PRODUCT_MODEL_PREVIEW: 3,
        // Varnish types
        GLOSS_VARNISH: 'gloss',
        MATTE_VARNISH: 'matte',
        // Default cut path attributes
        CUT_LINE_SIZE_FACTOR: 0.75,
        // as a factor of product size
        CUT_LINE_STROKE_WIDTH: 2,
        // in px
        CUT_LINE_HIT_TOLERANCE: 10,
        // in px
        CUT_TEXT_STROKE_WIDTH: 0.352778,
        CUT_MINIMAL_STROKE_WIDTH: 0.001,
        // 1pt in mms
        CUT_PATH_STROKE_COLOR: '#F00',
        // Shapes for cut lines and edit areas.
        SHAPE_TYPE_RECTANGLE: 1,
        SHAPE_TYPE_CIRCLE: 2,
        SHAPE_TYPE_TRIANGLE: 3,
        SHAPE_TYPE_PENTAGON: 4,
        SHAPE_TYPE_HEXAGON: 5,
        SHAPE_TYPE_HEART: 6,
        SHAPE_TYPE_ROUNDEDRECT: 7,
        SHAPE_TYPE_SPEECHBUBBLE: 8,
        SHAPE_TYPE_TRAPEZIUM: 9,
        SHAPE_TYPE_STAR: 10,
        SHAPE_TYPE_DIAMOND: 11,
        // Default edit area attributes
        EDIT_AREA_SIZE_FACTOR: 0.5,
        // as a factor of product size
        EDIT_AREA_STROKE_WIDTH: 2,
        // in px
        EDIT_AREA_HIT_TOLERANCE: 10,
        // in px
        IMAGE_AREA_STROKE_COLOR: '#404040',
        TEXT_AREA_STROKE_COLOR: '#3A75E5',
        FREE_AREA_STROKE_COLOR: '#59AC35',
        FOIL_AREA_STROKE_COLOR: '#EFCE0A',
        METAL_AREA_STROKE_COLOR: '#C8CACA',
        CUT_AREA_STROKE_COLOR: '#F00',
        // Edit area types
        EDIT_AREA_IMAGE: 'imagearea',
        EDIT_AREA_TEXT: 'textarea',
        EDIT_AREA_FREE: 'freearea',
        EDIT_AREA_FOIL: 'foilarea',
        EDIT_AREA_METAL: 'metalarea',
        EDIT_AREA_CUT: 'cutarea',
        // Default stroke width (when applying stroke color)
        DEFAULT_STROKE_WIDTH: 0.352778,
        // 1pt in mms
        // Product designer steps
        ITEM_LIST_STEP: 0,
        CHECK_STEP: 1,
        EDIT_STEP: 2,
        ORDER_STEP: 3,
        // Max undo steps
        MAX_UNDO_STEP_COUNT: 5,
        UNDO_TEXT_BLOCK_LENGTH: 5,
        // Canvas object rotation in degrees
        OBJECT_ROTATION_DEGREES: 45,
        // Name length limits
        MAX_MODEL_LAYOUT_NAME_LEN: 255,
        MAX_PRODUCT_MODEL_NAME_LEN: 255,
        MAX_GOODS_CODE_LEN: 255,
        MAX_GOODS_NAME_LEN: 255,
        MAX_CURRENCY_LEN: 10,
        MAX_PRINT_MESSAGE_LEN: 255,
        MAX_USER_NAME_LEN: 50,
        MAX_USER_PASSWD_LEN: 50,
        // Product size limits (in mm)
        PRODUCT_HEIGHT_MIN: 1,
        PRODUCT_HEIGHT_MAX: 3200,
        PRODUCT_WIDTH_MIN: 1,
        PRODUCT_WIDTH_MAX: 1625,
        PRODUCT_MARGIN_MIN: -5,
        PRODUCT_CORNER_RADIUS_MIN: 0,
        PRODUCT_OFFSET_MIN: -40,
        PRODUCT_OFFSET_MAX: 40,
        // Defaults
        PRODUCT_HEIGHT_DEFAULT: 200,
        PRODUCT_WIDTH_DEFAULT: 100,
        PRODUCT_MARGIN_DEFAULT: 3,
        PRODUCT_CORNER_RADIUS_DEFAULT: 0,
        PRODUCT_OFFSET_DEFAULT: 0,
        // Model layout limits (in mm)
        SLOT_HEIGHT_MIN: 1,
        SLOT_HEIGHT_MAX: 3200,
        SLOT_WIDTH_MIN: 1,
        SLOT_WIDTH_MAX: 1625,
        ORIGIN_POSITION_MIN: 0,
        ORIGIN_POSITION_MAX: 1000,
        PRINTING_POSITION_MIN: -1000,
        PRINTING_POSITION_MAX: 1000,
        NUM_ROWS_MIN: 1,
        NUM_COLUMNS_MIN: 1,
        SPACING_MIN: 0,
        SPACING_MAX: 100,
        FOIL_PRINT_TRAY_SIZE: 80,
        FOIL_PRINT_PRINTABLE_SIZE: 80,
        FOIL_PRINT_AREA_SIZE_DEFAULT: 50,
        FOIL_PRINT_POWER_MIN: 0,
        FOIL_PRINT_POWER_MAX: 100,
        FOIL_PRINT_POWER_DEFAULT: 55,
        FOIL_NON_PRINTABLE_X: 15,
        FOIL_NON_PRINTABLE_Y: 15,
        FOIL_PRINT_TRAY_GRID_SIZE: 5,
        PRINT_TYPE_FOIL: 'foil',
        PRINT_TYPE_METAL: 'metal',
        PRINT_TYPE_COLOR: 'color',
        PRINT_TYPE_CUT: 'cut',
        // Foil imprint area fill and stroke color.
        FOIL_PRINTABLE_AREA_BACK_COLOR: '#F0F0F0',
        FOIL_NON_PRINTABLE_AREA_COLOR: '#4D4D4D',
        FOIL_NON_PRINTABLE_AREA_GRID_COLOR: '#FD3925',
        FOIL_PRINTABLE_AREA_GRID_COLOR: '#FFFFFF',
        FOIL_PRINTABLE_AREA_GRID_CENTER_LINES_COLOR: '#BFBFBF',
        // Defaults
        SLOT_HEIGHT_DEFAULT: 200,
        SLOT_WIDTH_DEFAULT: 100,
        ORIGIN_POSITION_DEFAULT: 10,
        PRINTING_POSITION_DEFAULT: 0,
        NUM_ROWS_DEFAULT: 2,
        NUM_COLUMNS_DEFAULT: 3,
        SPACING_DEFAULT: 10,
        // Maximum number of slots
        MAX_SLOT_COUNT: 1000,
        // Maximum number of input characters - on text/cut panels
        MAX_INPUT_CHARS: 256,
        // Maximum order quantity
        MAX_ORDER_QUANTITY: 100,
        // Maximum number of objects per design which can be added
        // from product model designer and product designer.
        MAX_OBJECT_COUNT: 30,
        // Object source
        OBJECT_SOURCE_SVG: 'SVG',
        OBJECT_SOURCE_PMD: 'PMD',
        OBJECT_SOURCE_PD: 'PD',
        // Image adjust crop rect.
        CROP_RECT_STROKE_COLOR: '#0099D9',
        CROP_RECT_STROKE_WIDTH: 2,
        // in px
        CROP_RECT_STROKE_DASH: [
            12,
            12
        ],
        // Allowed zoom levels.
        ZOOM_LEVELS: [
            1,
            1.5,
            2,
            3,
            4,
            5
        ],
        MIN_ZOOM_LEVEL: 1,
        MAX_ZOOM_LEVEL: 5,
        INITIAL_ZOOM_LEVEL: 1,
        // Preview canvas size as a factor of main canvas.
        PREVIEW_CANVAS_SIZE_FACTOR: 0.25,
        // Padding for the preview canvas from corner.
        PREVIEW_CANVAS_PADDING: 20,
        // in px
        // Label height for the preview canvas.
        PREVIEW_CANVAS_LABEL_HEIGHT: 20,
        // in px
        CURVED_TEXT_RADIUS_MAX: 150,
        CURVED_TEXT_RADIUS_MIN: 25,
        CURVED_TEXT_RADIUS_DEFAULT: 50,
        // Client inactivity tracking.
        INACTIVITY_TIMEOUT: 5*60*1000,
        // in ms
        INACTIVITY_CHECK_INTERVAL: 15*1000,
        // in ms
        INACTIVITY_CONFIRMATION_AUTO_DISMISS_TIMEOUT: 30*1000,
        // in ms
        MIN_IMAGE_DPI: 200,
        LOW_RES_BADGE_SIZE: 40,
        EDIT_AREA_BADGE_ICON_SIZE_FRACTION: 0.15,
        EDIT_AREA_BADGE_TEXT_SIZE_FRACTION: 0.15,
        EDIT_AREA_BADGE_FONT_SIZE_MIN: 13,
        EDIT_AREA_BADGE_FONT_SIZE_MAX: 15,
        EDIT_AREA_BADGE_ICON_SIZE_MIN: 20,
        EDIT_AREA_BADGE_ICON_SIZE_MAX: 24,
        EDIT_AREA_BADGE_TEXT_COLOR: '#A0A0A0',
        // Metal print marking modes.
        MARKING_MODE_TEXT: 'text',
        MARKING_MODE_PHOTO: 'photo',
        MARKING_MODE_HI_DENSITY: 'high-density',
        MARKING_MODE_AUTO: 'auto',
        MARKING_MODE_DEFAULT: 'photo',
        METAL_PRINT_TRAY_SIZE: 80,
        METAL_PRINT_PRINTABLE_SIZE: 80,
        METAL_PRINTABLE_AREA_BACK_COLOR: '#000000',
        METAL_PRINTABLE_AREA_GRID_COLOR: '#FFFFFF',
        METAL_PRINTABLE_AREA_GRID_CENTER_LINES_COLOR: '#FFFFFF',
        METAL_PRINT_AREA_SIZE_DEFAULT: 50,
        METAL_PRINT_TRAY_GRID_SIZE: 5,
        // Fill sharpness values.
        METAL_FILL_SHARPNESS_0: 0,
        METAL_FILL_SHARPNESS_70: 178,
        // 0.7 * 255
        METAL_FILL_SHARPNESS_85: 217,
        // 0.85 * 255
        METAL_FILL_SHARPNESS_100: 255,
        METAL_FILL_SHARPNESS_DEFAULT: 255,
        METAL_FILL_COLOR_DEFAULT: '#FFFFFF',
        // Outline
        METAL_OUTLINE_COLOR_DEFAULT: '#FFFFFF',
        METAL_OUTLINE_STROKE_WIDTH: 2,
        // in px
        // Brightness, contrast and gamma filter range.
        BRIGHTNESS_RANGE_MIN: -50,
        BRIGHTNESS_RANGE_MAX: 50,
        CONTRAST_RANGE_MIN: -50,
        CONTRAST_RANGE_MAX: 50,
        GAMMA_RANGE_MIN: -900,
        GAMMA_RANGE_MAX: 899,
        DEFAULT_BRIGHTNESS: 0,
        DEFAULT_CONTRAST: 0,
        DEFAULT_GAMMA: 0,
        // Image outline.
        IMAGE_OUTLINE_LINE_COLOR: '#0000FF',
        IMAGE_OUTLINE_PREVIEW_COLOR: '#808080',
        // Server request timeout.
        SERVER_REQUEST_TIMEOUT: 120*1000,
        // in ms
        //Smart guide
        SMART_GUIDE_LINE_COLOR: '#FF79FB'
    },
    version: '2.7',
    models: [
        'Font',
        'Image',
        'ClipartItem',
        'ClipartCategory',
        'ProductModel',
        'Color',
        'ModelLayout',
        'UnpaidOrder',
        'CatalogItem',
        'Language',
        'Shape',
        'SpecialEffect',
        'Texture',
        'MarkingMaterial',
        'FoilColor'
    ],
    stores: [
        'Fonts',
        'Images',
        'ClipartItems',
        'ClipartCategories',
        'ProductModels',
        'Colors',
        'ModelLayouts',
        'UnpaidOrders',
        'Languages',
        'PrintingWaitingOrders',
        'ReceivingPossiblityOrders',
        'DeliveredOrders',
        'ImageCategories',
        'BackgroundImages',
        'ClientLanguages',
        'BackgroundColors',
        'Shapes',
        'SpecialEffects',
        'Textures',
        'MarkingMaterials',
        'CuttingMaterials',
        'FoilColors'
    ],
    views: [
        'MyViewport',
        'button.ToolbarButton',
        'panel.GroupPanel',
        'panel.AlignPanel',
        'panel.FlipRotatePanel',
        'panel.LayerPanel',
        'panel.TextPanel',
        'panel.ImagePanel',
        'panel.ColorPanel',
        'panel.ClipartPanel',
        'Designer',
        'button.ActionButton',
        'ModelLayoutDesigner',
        'ProductDesignerCustomSize',
        'Catalog',
        'button.PanelButton',
        'panel.MiscPanel',
        'panel.UndoRedoPanel',
        'button.ToolPanelButton',
        'panel.NavPanel',
        'OrderCreate',
        'button.DefaultCommandButton',
        'button.CommandButton',
        'panel.SpotColorPanel',
        'OrderVerify',
        'OrderConfirmation',
        'ModelLayoutDesignerSave',
        'field.NumberField',
        'PMDMLDMain',
        'button.GridPanelToolButton',
        'ProductDesignerImageUpload',
        'ProductModelDesignerSize',
        'panel.ProductSizeInputPanel',
        'panel.ProductSizeImagePanel',
        'ProductModelDesignerSave',
        'panel.ToolsPanel',
        'ProductModelDesignerContent',
        'ProductModelDesignerPreview',
        'panel.CanvasPanel',
        'UnpaidMain',
        'field.SpotColorOption',
        'panel.CutPanel',
        'ProductModelDesignerImageUpload',
        'LoginForm',
        'ChangePasswordForm',
        'field.StepLabel',
        'ProductDesignerCheck',
        'panel.LangPanel',
        'panel.EditAreaPanel',
        'ProductDesignerTop',
        'button.CarouselButton',
        'ProductDesignerScreenSaver',
        'button.UnpaidToolbarButton',
        'window.HelpWindow',
        'panel.ImageUploadPanel',
        'field.BreadCrumbSpacer',
        'panel.CatalogGrid',
        'button.BreadCrumbButton',
        'panel.FoilColorPanel',
        'panel.ImageAdjustPanel',
        'ProductDesignerImageAdjust',
        'button.ToggleButton',
        'ProductModelDesignerImageAdjust',
        'ProductDesignerServiceTerms',
        'panel.ZoomPanel',
        'panel.TextSubPanel',
        'ProductModelDesignerVarnishFirstUse',
        'field.ColorPicker',
        'panel.ImageOutlinePanel',
        'ProductDesignerImageOutline',
        'panel.MetalColorPanel',
        'ProductModelDesignerImageOutline',
        'panel.BackgroundPanel',
        'button.OpenCloseButton',
        'ProductDesignerNotPrintColorFirstUse',
        'ProductModelDesignerNotPrintColorFirstUse',
        'panel.GapAdjustmentPanel'
    ],
    defaultToken: 'template/main',
    name: 'RolandKioskPrint',
    'favIcon - url': 'resources/images/coto_white_16x16.png',
    title: 'cotodesign',

    requires: [
        'Ext.window.Toast',
        'RolandKioskPrint.override.Component'
    ],

    getPrefLanguage: function() {
        var curPrefLang = localStorage.getItem('RolandKioskPrint.PrefLanguage');

        if (!curPrefLang) {
            curPrefLang = 'en'; // Default lang: English
        }
        return curPrefLang;
    },

    setPrefLanguage: function(prefLanguage) {
        localStorage.setItem('RolandKioskPrint.PrefLanguage', prefLanguage);
    },

    getPrefClientLanguage: function() {
        var curPrefLang = localStorage.getItem('RolandKioskPrint.PrefClientLanguage');

        if (!curPrefLang) {
            return this.getPrefLanguage();
        }
        return curPrefLang;
    },

    setPrefClientLanguage: function(prefLanguage) {
        localStorage.setItem('RolandKioskPrint.PrefClientLanguage', prefLanguage);
    },

    getString: function(key, isClient) {
        if (isClient === undefined) {
            isClient = RolandKioskPrint.AppData.isProductDesigner();
        }

        var locStrings =
            (isClient ? this.clientLocStrings : this.locStrings);

        var value = this.getStringProperty(locStrings, key);
        if (isClient && !value) {
            value = this.getStringProperty(this.clientMasterLocStrings, key);
        }

        return value;
    },

    getStringProperty: function(object, key) {
        // Takes key in dot notation style, and finds the nested object property.
        var parts = key.split('.');

        for (var i = 0, length = parts.length; i < length && object; i++) {
            object = object[parts[i]];
        }

        if (typeof object == 'string') {
            return object;
        }
    },

    isSystemLanguage: function(langCode) {
        var languagesStore = Ext.StoreManager.lookup('Languages');
        return this.containsIgnoreCase(languagesStore, 'langCode', langCode);
    },

    init: function(application) {
        // Extend Array to support 'includes'.
        // Not available on IE and Edge below version 14.
        if (!Array.prototype.includes) {
            Array.prototype.includes = function(item, start) {
                return this.indexOf(item, start) != -1;
            };
        }

        // Extend String to support 'startsWith'.
        // Not available on IE.
        if (!String.prototype.startsWith) {
            String.prototype.startsWith = function(search, pos) {
                return this.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
            };
        }

        // Extend Array to support 'some'.
        if (!Array.prototype.some) {
            Array.prototype.some = function(func, thisArg) {
                var t = Object(this);
                for (var i = 0, len = t.length; i < len; i++) {
                    if (func.call(thisArg, t[i], i, t)) {
                        return true;
                    }
                }
                return false;
            };
        }

        // Application strings.
        application.locStrings = {};
        application.clientLocStrings = {};
        application.clientMasterLocStrings = {};

        // Go get the strings.
        var curPrefLang = application.getPrefLanguage();

        var languageStringsURL = Ext.String.format(
            application.constants.LANGUAGE_STRINGS_URL, curPrefLang);

        Ext.Ajax.request({
            url: languageStringsURL,
            async: false,

            success: function(response, opts) {
                var localizedStrings = Ext.decode(response.responseText);

                application.locStrings = localizedStrings;
            },

            failure: function(response, opts) {
                Ext.toast("Couldn't get localized strings.");
            }
        });

        // Get the available client languages.
        var languagesData = [];

        Ext.Ajax.request({
            url: application.constants.CLIENT_LANGUAGE_LIST_URL,
            async: false,

            success: function(response, opts) {
                var responseData = Ext.decode(response.responseText);
                if (responseData && responseData.languages) {
                    languagesData = responseData.languages;

                    // Populate the client languages store.
                    var languagesStore = Ext.StoreManager.lookup('ClientLanguages');
                    languagesStore.loadData(languagesData);
                    languagesStore.fireEvent('loadrecords', languagesStore.getRange());
                }
            },

            failure: function(response, opts) {
                Ext.toast("Couldn't get languages list.");
            }
        });

        // Now get the client strings.
        var curPrefClientLang = application.getPrefClientLanguage();
        var langCopiedFrom = curPrefClientLang;

        // First check if the preferred client language exists.
        var langExists = false;
        for (var i = 0, length = languagesData.length; i < length; i++) {
            if (languagesData[i].langCode == curPrefClientLang) {
                langExists = true;
                if (languagesData[i].langCopiedFrom) {
                    langCopiedFrom = languagesData[i].langCopiedFrom;
                }
                break;
            }
        }

        // If not, use the first one as default.
        if (!langExists && languagesData.length !== 0) {
            var fallbackLang = languagesData[0];

            curPrefClientLang = fallbackLang.langCode;
            langCopiedFrom = (fallbackLang.langCopiedFrom ? fallbackLang.langCopiedFrom : curPrefClientLang);
            application.setPrefClientLanguage(curPrefClientLang);
        }

        languageStringsURL = Ext.String.format(
            application.constants.CLIENT_LANGUAGE_STRINGS_URL, curPrefClientLang);

        Ext.Ajax.request({
            url: languageStringsURL,
            async: false,

            success: function(response, opts) {
                var localizedStrings = Ext.decode(response.responseText);

                application.clientLocStrings = localizedStrings;
            },

            failure: function(response, opts) {
                Ext.toast("Couldn't get localized strings.");
            }
        });

        // Get the client master strings.
        if (langCopiedFrom != curPrefLang) {
            languageStringsURL = Ext.String.format(
                application.constants.LANGUAGE_STRINGS_URL, langCopiedFrom);

            Ext.Ajax.request({
                url: languageStringsURL,
                async: false,

                success: function(response, opts) {
                    var localizedStrings = Ext.decode(response.responseText);

                    application.clientMasterLocStrings = localizedStrings;
                },

                failure: function(response, opts) {
                    Ext.toast("Couldn't get localized strings.");
                }
            });
        } else {
            application.clientMasterLocStrings = application.locStrings;
        }

        // Get the UI settings.
        Ext.Ajax.request({
            url: application.constants.UI_SETTINGS_URL,
            async: false,

            success: function(response, opts) {
                var settingsData = Ext.decode(response.responseText);
                RolandKioskPrint.AppData.uiSettingsData = settingsData;
            },

            failure: function(response, opts) {
                Ext.toast("Couldn't get product designer UI settings data.");
            }
        });

        // Get the default color setting.
        Ext.Ajax.request({
            url: application.constants.COLOR_SETTINGS_URL,
            async: false,

            success: function(response, opts) {
                var settingsData = Ext.decode(response.responseText);
                RolandKioskPrint.AppData.setDefaultColor(settingsData.defaultColor);
            },

            failure: function(response, opts) {
                Ext.toast("Couldn't get product designer color settings data.");
            }
        });

        // Get the dafault foil color.
        Ext.Ajax.request({
            url: application.constants.FOILCOLOR_SETTINGS_URL,
            async: false,

            success: function(response, opts) {
                var settingsData = Ext.decode(response.responseText),
                    foilColors = settingsData.foilColors;

                // Find the first enabled foil color and set as default.
                var i = 0;
                while (!foilColors[i].enabled) {
                    i++;
                }
                RolandKioskPrint.AppData.setDefaultFoilColor(foilColors[i]);
            },

            failure: function(response, opts) {
                Ext.toast("Couldn't get product designer color settings data.");
            }
        });

        Ext.Ajax.request({
            url: application.constants.CATALOG_UI_SETTINGS_URL,
            async: false,

            success: function(response, opts) {
                var settingsData = Ext.decode(response.responseText);
                RolandKioskPrint.AppData.catalogUISettingsData = settingsData;
            },

            failure: function(response, opts) {
                Ext.toast("Couldn't get CatalogUI settings data.");
            }
        });

        Ext.Ajax.request({
            url: application.constants.FEATURES_URL,
            async: false,

            success: function(response, opts) {
                var data = Ext.decode(response.responseText);
                RolandKioskPrint.AppData.features = {
                    allowRVWDPrint: data.allowRVWDPrint || false,
                    allowFoilPrint: data.allowFoilPrint || false,
                    allowTShirtPrint: data.allowTShirtPrint || false,
                    allowMetalPrint: data.allowMetalPrint || false,
                    allowCutPrint: data.allowCutPrint || false
                };
            },

            failure: function(response, opts) {
                Ext.toast("Couldn't get Printer's features data.");
            }
        });

        // Initialize the activity monitor.
        RolandKioskPrint.ActivityMonitor.init({
            interval: RolandKioskPrint.app.constants.INACTIVITY_CHECK_INTERVAL,
            maxInactive: RolandKioskPrint.app.constants.INACTIVITY_TIMEOUT,
            isInactive: this.inactiveCallback.bind(this),
            verbose: false // for debugging
        });

        // Define application level classes.
        this.defineClasses(application);

        // Create the message box queue.
        this.createMessageBoxQueue();
    },

    setUiSettings: function(view, viewType) {
        var uiSettingsData = RolandKioskPrint.AppData.getUiSettingsData();
        if (uiSettingsData.backgroundType == 'SINGLE_COLOR') {
            if (viewType == 'viewport') {
                view.setStyle({
                    backgroundColor: uiSettingsData.backgroundColor
                });
            }
            else if (viewType == 'panel') {
                view.setBodyStyle({
                    backgroundColor: uiSettingsData.backgroundColor
                });
            }
        } else if (uiSettingsData.backgroundType == 'IMAGE') {
            var url = "url('" + uiSettingsData.backgroundImage.path + "')";
            var bgRepeat = 'no-repeat';
            var bgSize = 'auto';
            var bgPosition = 'center';

            switch (uiSettingsData.backgroundImage.arrangement) {
                case 'FIT':
                    bgSize = 'contain';
                    break;
                case 'FILL':
                    bgSize = 'cover';
                    break;
                case 'TILED':
                    bgRepeat = 'repeat';
                    break;
            }

            if (viewType == 'viewport') {
                view.setStyle({
                    backgroundImage: url,
                    backgroundRepeat: bgRepeat,
                    backgroundSize: bgSize,
                    backgroundPosition: bgPosition
                });
            } else if (viewType == 'panel') {
                view.setBodyStyle({
                    backgroundImage: url,
                    backgroundRepeat: bgRepeat,
                    backgroundSize: bgSize,
                    backgroundPosition: bgPosition
                });
            }
        }
        else if (uiSettingsData.backgroundType == 'GRADIENT') {
            var color1 = uiSettingsData.backgroundGradient.stop1Color;
            var color2 = uiSettingsData.backgroundGradient.stop2Color;

            var bgGradientSafari; /* For Safari 5.1 to 6.0 */
            var bgGradientOpera; /* For Opera 11.1 to 12.0 */
            var bgGradientMoz; /* For Firefox 3.6 to 15 */
            var bgGradientStd;
            switch (uiSettingsData.backgroundGradient.direction) {
                case 'TO_OUTSIDE': // From the center to the outside
                    bgGradientSafari = "-webkit-radial-gradient(circle," + color1 + "," + color2 + ")";
                    bgGradientOpera = "-o-radial-gradient(circle," + color1 + "," + color2 + ")";
                    bgGradientMoz = "-moz-radial-gradient(circle," + color1 + "," + color2 + ")";
                    bgGradientStd = "radial-gradient(circle," + color1 + "," + color2 + ")";
                    break;
                case 'TO_BOTTOM': // From top to bottom
                    bgGradientSafari = "-webkit-linear-gradient(top," + color1 + "," + color2 + ")";
                    bgGradientOpera = "-o-linear-gradient(top," + color1 + "," + color2 + ")";
                    bgGradientMoz = "-moz-linear-gradient(top," + color1 + "," + color2 + ")";
                    bgGradientStd = "linear-gradient(to bottom," + color1 + "," + color2 + ")";
                    break;
                case 'TO_TOP': // From bottom to top
                    bgGradientSafari = "-webkit-linear-gradient(bottom," + color1 + "," + color2 + ")";
                    bgGradientOpera = "-o-linear-gradient(bottom," + color1 + "," + color2 + ")";
                    bgGradientMoz = "-moz-linear-gradient(bottom," + color1 + "," + color2 + ")";
                    bgGradientStd = "linear-gradient(to top," + color1 + "," + color2 + ")";
                    break;
                case 'TO_LEFT': // From right to left
                    bgGradientSafari = "-webkit-linear-gradient(right," + color1 + "," + color2 + ")";
                    bgGradientOpera = "-o-linear-gradient(left," + color1 + "," + color2 + ")";
                    bgGradientMoz = "-moz-linear-gradient(left," + color1 + "," + color2 + ")";
                    bgGradientStd = "linear-gradient(to left," + color1 + "," + color2 + ")";
                    break;
                case 'TO_RIGHT': // From left to right
                    bgGradientSafari = "-webkit-linear-gradient(left," + color1 + "," + color2 + ")";
                    bgGradientOpera = "-o-linear-gradient(right," + color1 + "," + color2 + ")";
                    bgGradientMoz = "-moz-linear-gradient(right," + color1 + "," + color2 + ")";
                    bgGradientStd = "linear-gradient(to right," + color1 + "," + color2 + ")";
                    break;
                case 'TO_TOP_LEFT': // From the lower right to the upper left
                    bgGradientSafari = "-webkit-linear-gradient(bottom right," + color1 + "," + color2 + ")";
                    bgGradientOpera = "-o-linear-gradient(top left," + color1 + "," + color2 + ")";
                    bgGradientMoz = "-moz-linear-gradient(top left," + color1 + "," + color2 + ")";
                    bgGradientStd = "linear-gradient(to top left," + color1 + "," + color2 + ")";
                    break;
                case 'TO_TOP_RIGHT': // From the lower left to the upper right
                    bgGradientSafari = "-webkit-linear-gradient(left bottom," + color1 + "," + color2 + ")";
                    bgGradientOpera = "-o-linear-gradient(top right," + color1 + "," + color2 + ")";
                    bgGradientMoz = "-moz-linear-gradient(top right," + color1 + "," + color2 + ")";
                    bgGradientStd = "linear-gradient(to top right," + color1 + "," + color2 + ")";
                    break;
                case 'TO_BOTTOM_LEFT': // From the upper right to the lower left
                    bgGradientSafari = "-webkit-linear-gradient(right top," + color1 + "," + color2 + ")";
                    bgGradientOpera = "-o-linear-gradient(bottom left," + color1 + "," + color2 + ")";
                    bgGradientMoz = "-moz-linear-gradient(bottom left," + color1 + "," + color2 + ")";
                    bgGradientStd = "linear-gradient(to bottom left," + color1 + "," + color2 + ")";
                    break;
                case 'TO_BOTTOM_RIGHT': // From the upper left to the lower right
                    bgGradientSafari = "-webkit-linear-gradient(left top," + color1 + "," + color2 + ")";
                    bgGradientOpera = "-o-linear-gradient(bottom right," + color1 + "," + color2 + ")";
                    bgGradientMoz = "-moz-linear-gradient(bottom right," + color1 + "," + color2 + ")";
                    bgGradientStd = "linear-gradient(to bottom right," + color1 + "," + color2 + ")";
                    break;
            }

            if (viewType == 'viewport') {
                view.setStyle({
                    background: bgGradientSafari
                });

                view.setStyle({
                    background: bgGradientOpera
                });

                view.setStyle({
                    background: bgGradientMoz
                });

                view.setStyle({
                    background: bgGradientStd
                });
            }
            else if (viewType == 'panel') {
                view.setBodyStyle({
                    background: bgGradientSafari
                });

                view.setBodyStyle({
                    background: bgGradientOpera
                });

                view.setBodyStyle({
                    background: bgGradientMoz
                });

                view.setBodyStyle({
                    background: bgGradientStd
                });
            }
        }

        // Set the command buttons background color.
        // Carousel start button.
        var backgroundColor = uiSettingsData.startButtonBGColor;
        Ext.util.CSS.updateRule('.carousel-default-command-button', 'background-color', backgroundColor);
        Ext.util.CSS.updateRule('.carousel-default-command-button', 'border-color', backgroundColor);
        Ext.util.CSS.updateRule('.carousel-default-command-button-over', 'background-color', backgroundColor);
        Ext.util.CSS.updateRule('.carousel-default-command-button-focus', 'background-color', backgroundColor);

        backgroundColor = uiSettingsData.startButtonPressedBGColor;
        Ext.util.CSS.updateRule('.carousel-default-command-button.x-btn.x-btn-pressed.x-btn-default-small', 'background-color', backgroundColor);
        Ext.util.CSS.updateRule('.carousel-default-command-button.x-btn.x-btn-pressed.x-btn-default-small', 'border-color', backgroundColor);

        // Default command button.
        backgroundColor = uiSettingsData.defaultCommandButtonBGColor;
        Ext.util.CSS.updateRule('.default-command-button', 'background-color', backgroundColor);
        Ext.util.CSS.updateRule('.default-command-button', 'border-color', backgroundColor);
        Ext.util.CSS.updateRule('.default-command-button-over', 'background-color', backgroundColor);
        Ext.util.CSS.updateRule('.default-command-button-focus', 'background-color', backgroundColor);

        backgroundColor = uiSettingsData.defaultCommandButtonPressedBGColor;
        Ext.util.CSS.updateRule('.default-command-button.x-btn.x-btn-pressed.x-btn-default-small', 'background-color', backgroundColor);
        Ext.util.CSS.updateRule('.default-command-button.x-btn.x-btn-pressed.x-btn-default-small', 'border-color', backgroundColor);

        // Command button.
        backgroundColor = uiSettingsData.commandButtonBGColor;
        Ext.util.CSS.updateRule('.command-button', 'background-color', backgroundColor);
        Ext.util.CSS.updateRule('.command-button', 'border-color', backgroundColor);
        Ext.util.CSS.updateRule('.command-button-over', 'background-color', backgroundColor);
        Ext.util.CSS.updateRule('.command-button-focus', 'background-color', backgroundColor);

        backgroundColor = uiSettingsData.commandButtonPressedBGColor;
        Ext.util.CSS.updateRule('.command-button.x-btn.x-btn-pressed.x-btn-default-small', 'background-color', backgroundColor);
        Ext.util.CSS.updateRule('.command-button.x-btn.x-btn-pressed.x-btn-default-small', 'border-color', backgroundColor);
    },

    setFontSettings: function() {
        var uiSettingsData = RolandKioskPrint.AppData.getUiSettingsData();
        var textColor = uiSettingsData.textColor;

        Ext.util.CSS.updateRule('.command-button .x-btn-inner-default-small', 'color', textColor);
        Ext.util.CSS.updateRule('.default-command-button .x-btn-inner-default-small', 'color', textColor);
        Ext.util.CSS.updateRule('.carousel-default-command-button .x-btn-inner-default-small', 'color', textColor);
        Ext.util.CSS.updateRule('.step-label', 'color', textColor);
        Ext.util.CSS.updateRule('.step-label.done-step', 'color', this.getColorWithAlpha(textColor, 0.3));
        Ext.util.CSS.updateRule('.order-form-top-label', 'color', textColor);
        Ext.util.CSS.updateRule('.nav-panel .login-form-lang-label', 'color', textColor);
        Ext.util.CSS.updateRule('.nav-panel .lang-combo-box', 'color', textColor);
        Ext.util.CSS.updateRule('.breadcrumb-button .x-btn-inner', 'color', textColor);
        Ext.util.CSS.updateRule('.serviceterms-accept-checkbox .x-form-cb-label-default', 'color', textColor);
        Ext.util.CSS.updateRule('.order-form-regular-labels', 'color', textColor);
        Ext.util.CSS.updateRule('div.check-special-effects-item-wrap span', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel .toolbar-button .x-btn-inner', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-action-panel-container .action-panel .x-panel-header-title-default', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel .toolpanel-combo-box', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel .toolpanel-text-area', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel .toolpanel-label', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel .toolpanel-checkbox .x-form-cb-label', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel .toolpanel-button .x-btn-inner', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel .tab-panel .x-tab-inner-default', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel .tab-panel .x-tab.x-tab-active.x-tab-default .x-tab-inner-default', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel div.image-item-text-wrap', 'color', textColor);
        Ext.util.CSS.updateRule('.pd-toolspanel div.foil-color-item-thumb-wrap span.foil-color-item-name', 'color', textColor);

        // Increase the font size on tools panel and action panels
        // for CJK languages.
        var curPrefLang = this.getPrefLanguage();
        var isCJK = RolandKioskPrint.AppData.isCJK(curPrefLang);
        if (isCJK) {
            Ext.util.CSS.updateRule('.action-panel .x-panel-header-title-default', 'font-size', '12px');
            Ext.util.CSS.updateRule('.toolbar-button .x-btn-inner', 'font-size', '12px');
        }
    },

    setCatalogUISettings: function() {
        var catalogUISettingsData = RolandKioskPrint.AppData.getCatalogUISettingsData();

        var headerAreaTextColor = catalogUISettingsData.headerAreaTextColor;
        var headerAreaBGColor = catalogUISettingsData.headerAreaBGColor;

        var pageDescAreaTextColor = catalogUISettingsData.pageDescAreaTextColor;
        var pageDescAreaBGColor = catalogUISettingsData.pageDescAreaBGColor;

        Ext.util.CSS.updateRule('.order-form-top-label', 'color', pageDescAreaTextColor);
        Ext.util.CSS.updateRule('.order-form-top-label', 'background-color', pageDescAreaBGColor);

        Ext.util.CSS.updateRule('.step-label', 'color', headerAreaTextColor);
        Ext.util.CSS.updateRule('.step-label.done-step', 'color', this.getColorWithAlpha(headerAreaTextColor, 0.3));

        Ext.util.CSS.updateRule('.nav-panel .login-form-lang-label', 'color', headerAreaTextColor);
        Ext.util.CSS.updateRule('.nav-panel .lang-combo-box', 'color', headerAreaTextColor);
        Ext.util.CSS.updateRule('.nav-panel', 'background-color', headerAreaBGColor);

        if (catalogUISettingsData.viewType == 'grid') {
            // Set CatalogUISettings to the view
            var gridUISettings = catalogUISettingsData.grid;

            var breadcrumbBGColor = gridUISettings.breadcrumbBGColor;
            var breadcrumbTextColor = gridUISettings.breadcrumbTextColor;

            Ext.util.CSS.updateRule('.catalog-grid-breadcrumb', 'background-color', breadcrumbBGColor);
            Ext.util.CSS.updateRule('.breadcrumb-button .x-btn-inner', 'color', breadcrumbTextColor);

            var item = {
                BGColor: gridUISettings.itemBGColor,
                textColor: gridUISettings.itemTextColor,
                imageBGColor: gridUISettings.itemImageBGColor,
                fontFamily: gridUISettings.itemFontFamily,
                fontSize: gridUISettings.itemFontSize,
                fontStyle: gridUISettings.itemFontStyle,
                fontWeight: gridUISettings.itemFontWeight
            };

            Ext.util.CSS.updateRule('div.catalog-grid-item-wrap', 'background-color', item.BGColor);
            Ext.util.CSS.updateRule('div.catalog-grid-item-wrap .catalog-grid-item-text', 'color', item.textColor);
            Ext.util.CSS.updateRule('div.catalog-grid-item-wrap div.catalog-grid-thumb', 'background-color', item.imageBGColor);
            Ext.util.CSS.updateRule('div.catalog-grid-item-wrap .catalog-grid-item-text', 'font-family', item.fontFamily);
            Ext.util.CSS.updateRule('div.catalog-grid-item-wrap .catalog-grid-item-text', 'font-size', item.fontSize);
            Ext.util.CSS.updateRule('div.catalog-grid-item-wrap .catalog-grid-item-text', 'font-style', item.fontStyle);
            Ext.util.CSS.updateRule('div.catalog-grid-item-wrap .catalog-grid-item-text', 'font-weight', item.fontWeight);
        }
    },

    getColorWithAlpha: function(color, alpha) {
        // Create a dummy div and add to document body (required for getComputedStyle to work).
        var elem = document.createElement('div'), m;
        document.body.appendChild(elem);

        elem.style.color = color;
        m = window.getComputedStyle(elem).color.match(/^rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)$/i);

        document.body.removeChild(elem);

        return 'rgba(' + m[1] + ',' + m[2] + ',' + m[3] + ',' + alpha + ')';
    },

    getPrefUnits: function() {
        var prefUnits = localStorage.getItem('RolandKioskPrint.PrefUnits');

        if (!prefUnits) {
            prefUnits = 'mm'; // Default units: mm
        }

        return prefUnits;
    },

    setPrefUnits: function(prefUnits) {
        if (!prefUnits) {
            return;
        }

        localStorage.setItem('RolandKioskPrint.PrefUnits', prefUnits);
    },

    getPrefCurrency: function() {
        var prefCurrency = localStorage.getItem('RolandKioskPrint.PrefCurrency');

        if (!prefCurrency) {
            prefCurrency = '';
        }

        return prefCurrency;
    },

    setPrefCurrency: function(prefCurrency) {
        if (!prefCurrency) {
            return;
        }

        localStorage.setItem('RolandKioskPrint.PrefCurrency', prefCurrency);
    },

    getVarnishFirstUseShown: function() {
        var varnishFirstUseShown = localStorage.getItem('RolandKioskPrint.VarnishFirstUseShown');

        return (varnishFirstUseShown == 'true') ? true : false;
    },

    setVarnishFirstUseShown: function(varnishFirstUseShown) {
        localStorage.setItem('RolandKioskPrint.VarnishFirstUseShown', varnishFirstUseShown.toString());
    },

    getBackgroundFirstUseShown: function(isClient) {
        if (isClient === undefined) {
            isClient = RolandKioskPrint.AppData.isProductDesigner();
        }

        var key = isClient ? 'RolandKioskPrint.ClientBackgroundFirstUseShown' : 'RolandKioskPrint.BackgroundFirstUseShown';

        var backgroundFirstUseShown = localStorage.getItem(key);

        return (backgroundFirstUseShown == 'true') ? true : false;
    },

    setBackgroundFirstUseShown: function(backgroundFirstUseShown, isClient) {
        if (isClient === undefined) {
            isClient = RolandKioskPrint.AppData.isProductDesigner();
        }

        var key = isClient ? 'RolandKioskPrint.ClientBackgroundFirstUseShown' : 'RolandKioskPrint.BackgroundFirstUseShown';

        localStorage.setItem(key, backgroundFirstUseShown.toString());
    },

    containsIgnoreCase: function(store, column, value) {
        // Do a full case insensitive match.
        return store.find(column, value, 0, false, false, true) >= 0;
    },

    startTrackingActivity: function() {
        if (!RolandKioskPrint.ActivityMonitor.isRunning()) {
            RolandKioskPrint.ActivityMonitor.start();
        }
    },

    stopTrackingActivity: function() {
        if (RolandKioskPrint.ActivityMonitor.isRunning()) {
            RolandKioskPrint.ActivityMonitor.stop();
        }
    },

    inactiveCallback: function() {
        if (!RolandKioskPrint.AppData.isProductDesigner()) {
            return;
        }

        var now = new Date();

        // On devices, we do not get the inactive callback on background tabs in the browser.
        // Here, we compute when the callback should have fired, and when it actually fired to
        // compute the duration for which the confirmation dialog should be put up.
        var idealInactiveTime = RolandKioskPrint.ActivityMonitor.getLastActiveTime() +
            RolandKioskPrint.app.constants.INACTIVITY_TIMEOUT;

        var diffTime = now.getTime() - idealInactiveTime;
        var dialogTimeout =
            RolandKioskPrint.app.constants.INACTIVITY_CONFIRMATION_AUTO_DISMISS_TIMEOUT;

        if (diffTime > 0) {
            dialogTimeout -= diffTime;
        }

        if (dialogTimeout <= 0) {
            this.navigateToTop();
            return;
        }

        var me = this;
        var timeout = setTimeout(function() {
            // Auto dismiss the confirmation.
            Ext.Msg.hide();
            me.navigateToTop();
        }, dialogTimeout);

        // Alert the user that he has been inactive, and his work session would be closed.
        Ext.Msg.confirm(RolandKioskPrint.app.getString('message.generic.confirmation'),
                        RolandKioskPrint.app.getString('message.designer.inactivityConfirmation'),
                        function(btnText) {
                            if (btnText == 'yes') {
                                RolandKioskPrint.ActivityMonitor.start();
                            } else {
                                me.navigateToTop();
                            }
                            clearTimeout(timeout);
                        }, this);
    },

    navigateToTop: function() {
        var designerView = RolandKioskPrint.AppData.getDesignerView();
        this.redirectTo('#client/top', true);
        if (designerView) {
            designerView.getController().closeDesigner();
            this.destroyModalView();
        }
    },

    fetchProductModelImages: function(printType) {
        var serverUrl = RolandKioskPrint.app.constants.PRODUCT_MODEL_IMAGE_LIST_URL;
        if (printType == RolandKioskPrint.app.constants.PRINT_TYPE_FOIL ||
            printType == RolandKioskPrint.app.constants.PRINT_TYPE_METAL) {
            serverUrl += '&filtered=true&print-type=' + printType;
        }

        var deferred = new Ext.Deferred();
        var me = this;
        Ext.Ajax.request({
            url: serverUrl,
            cors: true,
            success: function(response, opts) {
                var productModelImages = Ext.decode(response.responseText);
                if (!me.productModelImages) {
                     me.productModelImages = {};
                }
                me.productModelImages[printType] = productModelImages;
                deferred.resolve(response);
            },

            failure: function(response, opts) {
                deferred.reject(response);
            }
        });
        return deferred.promise;
    },

    fetchUserImages: function(printType) {
        var serverUrl = RolandKioskPrint.app.constants.END_USER_IMAGE_LIST_URL;
        if (printType == RolandKioskPrint.app.constants.PRINT_TYPE_FOIL ||
            printType == RolandKioskPrint.app.constants.PRINT_TYPE_METAL) {
            serverUrl += '&filtered=true&print-type=' + printType;
        }

        var deferred = new Ext.Deferred();
        var me = this;
        Ext.Ajax.request({
            url: serverUrl,
            cors: true,
            success: function(response, opts) {
                deferred.resolve(response);
            },

            failure: function(response, opts) {
                deferred.reject(response);
            }
        });
        return deferred.promise;
    },

    fetchBundledImages: function() {
        var deferred = new Ext.Deferred();
        var me = this;
        Ext.Ajax.request({
            url: '/cotodesign/resources/bundled-images',
            success: function(response, opts) {
                me.categoriesData = Ext.decode(response.responseText);
                deferred.resolve(response);
            },

            failure: function(response, opts) {
                deferred.reject(response);
            }
        });
        return deferred.promise;
    },

    getProductModelImages: function(printType) {
        if (this.productModelImages) {
            return this.productModelImages[printType];
        }
        return false;
    },

    getBundledImages: function() {
        return this.categoriesData;
    },

    showModalView: function(view) {
        view.show();

        // Remember the active view.
        this.activeModalView = view;
    },

    destroyModalView: function(view) {
        if (!view) {
            view = this.activeModalView;
        }

        if (view) {
            view.destroy();
            this.activeModalView = null;
        }
    },

    isColorPrintModel: function(model) {
        var printType = model.printType;

        if (Array.isArray(printType)) {
            return (printType.indexOf(RolandKioskPrint.app.constants.PRINT_TYPE_COLOR) != -1);
        } else {
            return (printType == RolandKioskPrint.app.constants.PRINT_TYPE_COLOR);
        }
    },

    isColorPrintLayout: function(layout) {
        return (layout.printType == RolandKioskPrint.app.constants.PRINT_TYPE_COLOR);
    },

    isFoilPrintModel: function(model) {
        var printType = model.printType;

        if (Array.isArray(printType)) {
            return (printType.indexOf(RolandKioskPrint.app.constants.PRINT_TYPE_FOIL) != -1);
        } else {
            return (printType == RolandKioskPrint.app.constants.PRINT_TYPE_FOIL);
        }
    },

    isFoilPrintLayout: function(layout) {
        return (layout.printType == RolandKioskPrint.app.constants.PRINT_TYPE_FOIL);
    },

    isMetalPrintModel: function(model) {
        var printType = model.printType;
        if (Array.isArray(printType)) {
            return (printType.indexOf(RolandKioskPrint.app.constants.PRINT_TYPE_METAL) != -1);
        } else {
            return (printType == RolandKioskPrint.app.constants.PRINT_TYPE_METAL);
        }
    },

    isMetalPrintLayout: function(layout) {
        return (layout.printType == RolandKioskPrint.app.constants.PRINT_TYPE_METAL);
    },

    isCutPrintModel: function(model) {
        var printType = model.printType;
        if (Array.isArray(printType)) {
            return (printType.indexOf(RolandKioskPrint.app.constants.PRINT_TYPE_CUT) != -1);
        } else {
            return (printType == RolandKioskPrint.app.constants.PRINT_TYPE_CUT);
        }
    },

    isCutPrintLayout: function(layout) {
        return (layout.printType == RolandKioskPrint.app.constants.PRINT_TYPE_CUT);
    },

    getIgnoreCase: function(store, column, value) {
        // Do a full case insensitive match.
        return store.findRecord(column, value, 0, false, false, true);
    },

    defineClasses: function(application) {
        // Define the ProductModel and ModelLayout classes.
        application.ProductModel = function(options) {
            options = options || {};
            for (var key in options) {
                this[key] = options[key];
            }
        };

        var me = this;

        application.ProductModel.prototype.isColorPrint = function() {
            return me.isColorPrintModel(this);
        };

        application.ProductModel.prototype.isFoilPrint = function() {
            return me.isFoilPrintModel(this);
        };

        application.ProductModel.prototype.isMetalPrint = function() {
            return me.isMetalPrintModel(this);
        };

        application.ProductModel.prototype.isCutPrint = function() {
            return me.isCutPrintModel(this);
        };

        application.ModelLayout = function(options) {
            options = options || {};
            for (var key in options) {
                this[key] = options[key];
            }
        };

        application.ModelLayout.prototype.isColorPrint = function() {
            return me.isColorPrintLayout(this);
        };

        application.ModelLayout.prototype.isFoilPrint = function() {
            return me.isFoilPrintLayout(this);
        };

        application.ModelLayout.prototype.isMetalPrint = function() {
            return me.isMetalPrintLayout(this);
        };

        application.ModelLayout.prototype.isCutPrint = function() {
            return me.isCutPrintLayout(this);
        };
    },

    getCutViewingColor: function(color) {
        // If the cut material color is too light, we show 240 gray level instead.
        // Compute the lightness of the color. Uses the standard grayscale conversion.

        var source = new fabric.Color(color).getSource(),
            grayness = 0.3 * source[0] + 0.59 * source[1] + 0.11 * source[2];

        if (grayness > 240) {
            // Too light a color. Use gray 240.
            color = '#F0F0F0';
        }
        return color;
    },

    getNotPrintColorFirstUseShown: function(isClient) {
        if (isClient === undefined) {
            isClient = RolandKioskPrint.AppData.isProductDesigner();
        }

        var key = isClient ? 'RolandKioskPrint.ClientNotPrintColorFirstUseShown' : 'RolandKioskPrint.NotPrintColorFirstUseShown';

        var notPrintColorFirstUseShown = localStorage.getItem(key);

        return (notPrintColorFirstUseShown == 'true') ? true : false;
    },

    setNotPrintColorFirstUseShown: function(notPrintColorFirstUseShown, isClient) {
        if (isClient === undefined) {
            isClient = RolandKioskPrint.AppData.isProductDesigner();
        }

        var key = isClient ? 'RolandKioskPrint.ClientNotPrintColorFirstUseShown' : 'RolandKioskPrint.NotPrintColorFirstUseShown';

        localStorage.setItem(key, notPrintColorFirstUseShown.toString());
    },

    showImageUploadDisclaimer: function() {
        var deferred = new Ext.Deferred(),
            isProducModelDesigner = RolandKioskPrint.AppData.isProductModelDesigner(),
            dontShowAgain = false;

        var disclaimerWindow = new Ext.Window({
            border: false,
            closable: false,
            frame: false,
            frameHeader: true,
            header: true,
            resizable: false,
            closeAction: 'close',
            height: 335,
            width: 700,
            title: RolandKioskPrint.app.getString('message.designer.imgUploadDisclaimerHeader'),
            bodyPadding: 20,
            modal: true,

            items: [{
                xtype: 'label',
                text: RolandKioskPrint.app.getString('message.designer.imgUploadDisclaimerStr1'),
                margin: 20
            }, {
                xtype: 'panel',
                border: false,
                dock: 'bottom',
                height: 50,
                frameHeader: false,
                header: false,
                dockedItems: [{
                    xtype: 'checkboxfield',
                    width: 'fit',
                    fieldLabel: '',
                    labelWidth: 'fit',
                    boxLabel: RolandKioskPrint.app.getString('message.designer.imgUploadDisclaimerDoNotShowThisOrder'),
                    checked: false,
                    dock: 'right',
                    style: 'align:right',
                    padding: '10 0 0 0',
                    hidden: isProducModelDesigner,

                    listeners: {
                        change: function(checkbox, newVal, oldVal) {
                            dontShowAgain = newVal;
                        }
                    }
                }]
            }],

            buttons: [{
                text: RolandKioskPrint.app.getString('label.button.agreedAndSave'),
                handler: function() {
                    if (isProducModelDesigner) {
                        dontShowAgain = true;
                    }
                    disclaimerWindow.close();
                    deferred.resolve(dontShowAgain);
                }
            }, {
                text: RolandKioskPrint.app.getString('label.button.cancel'),
                handler: function() {
                    disclaimerWindow.close();
                    deferred.reject();
                }
            }],
            buttonAlign: 'center'
        });

        RolandKioskPrint.app.showModalView(disclaimerWindow);

        return deferred.promise;
    },

    convertUnitsValueToMM: function(value, units) {
        switch (units) {
            case 'px':
            case 'pt':
            case '':
                return value / 72.0 * 25.4;

            case 'cm':
                return value * 10;

            case 'mm':
                return value;

            case 'in':
                return value * 25.4;

            case 'px96':
                return value / 96.0 * 25.4;

            case 'pc96':
                return value * 25.4 / 6;
        }

        return value;

    },

    createMessageBoxQueue: function() {
        // Message box queue works around the Sencha Ext.msg being a singleton.
        // Two messages cannot be shown at the same time. We use the queue to keep
        // track of the messages, which are shown one after another.

        // List of messages to show.
        var msgBoxConfigs = [];

        function displayMessage(config) {
            msgBoxConfigs.push(config);
            if (!Ext.MessageBox.isVisible()) {
                displayEachMessage();
            }
        }

        function messageClosed() {
            msgBoxConfigs.shift(); // Remove the first config
            if (msgBoxConfigs.length !== 0) {
                // Show the next message.
                displayEachMessage();
            }
        }

        function displayEachMessage() {
            var config = msgBoxConfigs[0];
            config.fn = messageClosed;
            Ext.MessageBox.show(config);
        }

        RolandKioskPrint.app.displayMessage = displayMessage;
    },

    launch: function() {
        Ext.create('RolandKioskPrint.view.MyViewport');
    }

});
